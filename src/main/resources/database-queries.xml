<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">

	<bean class="java.util.HashMap" id="queries">
		<constructor-arg>
			<map>

				<!-- FrmAuditTrail Query -->
				<entry key="SELECT_ALL_Entity_Types_From_FrmAuditTrail"
					value="SELECT distinct(entity_type) FROM audit_trail" />

				<entry key="SELECT_ALL_Entity_Ids_From_FrmAuditTrail"
					value="SELECT distinct(entity_id) 
                                        FROM audit_trail 
                                        where entity_type=?
                                        " />

				<entry key="SEARCH_FrmAuditTrail"
					value="SELECT audit_trail.audit_id,audit_trail.entity_type,audit_trail.entity_id,audit_trail.user_action,audit_trail.audit_data,audit_trail.created_by,audit_trail.updated_by,audit_trail.created_time,audit_trail.updated_time 
                                        FROM audit_trail 
                                        where 1=1  
                                        ORDER BY audit_trail.audit_id
                                        " />
				<entry key="SELECT_ALL_FrmAuditTrail"
					value="SELECT audit_trail.audit_id,audit_trail.entity_type,audit_trail.entity_id,audit_trail.user_action,audit_trail.audit_data,audit_trail.created_by,audit_trail.updated_by,audit_trail.created_time,audit_trail.updated_time  
                                        FROM audit_trail 
                                        where 1=1 
                                        ORDER BY audit_trail.audit_id 
                                        " />
				<entry key="INSERT_FrmAuditTrail"
					value="INSERT INTO audit_trail (entity_type,entity_id,user_action,audit_data,created_by,updated_by,created_time,updated_time)VALUES( ?, ?, ?, ?, ?, ?, ?, ?) 
                                        " />
				<entry key="DELETE_FrmAuditTrail_BY_ID"
					value="DELETE from audit_trail where audit_id= ?  " />
				<entry key="UPDATE_FrmAuditTrail_BY_ID"
					value="UPDATE audit_trail SET entity_type = ?, entity_id = ?, user_action = ?, audit_data = ?, created_by = ?, updated_by = ?, created_time = ?, updated_time = ? 
                                        WHERE audit_id=? 
                                        " />
				<entry key="SELECT_FrmAuditTrail_BY_ID"
					value="SELECT audit_trail.audit_id,audit_trail.entity_type,audit_trail.entity_id,audit_trail.user_action,audit_trail.audit_data,audit_trail.created_by,audit_trail.updated_by,audit_trail.created_time,audit_trail.updated_time  
                                        FROM audit_trail 
                                        where audit_trail.audit_id= ? 
                                        " />
				<entry key="SELECT_ALL_FrmAuditTrail_By_EntityId"
					value="SELECT audit_trail.audit_id,audit_trail.entity_type,audit_trail.entity_id,audit_trail.user_action,audit_trail.audit_data,audit_trail.created_by,audit_trail.updated_by,audit_trail.created_time,audit_trail.updated_time  
                                        FROM audit_trail 
                                        where audit_trail.entity_id= ? 
                                        " />

				<!-- User login Query -->
				<entry key="SELECT_USER_PASSWORD_BY_USER_ID"
					value="SELECT * 
                                        from user_password 
                                        where user_password.user_id= ? and user_password.ISDELTED =0
                                        " />
				<entry key="UPDATE_USER_PASSWORD"
					value="UPDATE user_password up set up.user_password = ? where up.user_id = (SELECT u.user_id 
                                        from [user] u 
                                        where u.loginId = ? and up.user_password= ? and user_password.ISDELETED=0)
                                        " />
				<entry key="SELECT_user_BY_NAME"
					value="SELECT u.*,  CASE WHEN e.ID IS NOT NULL THEN 'Employee'
													WHEN cu.ID IS NOT NULL AND (c.SALESPROMOTER IS NULL OR  c.SALESPROMOTER = 0) THEN 'Customer'
													When cu.ID IS NOT NULL AND c.SALESPROMOTER = 1 THEN 'MultiAccount'
												END userType 
										FROM [USER] u 
										LEFT Join  EMPLOYEE e ON e.ID = u.user_id
										Left Join CUSTOMERUSER cu ON cu.ID = u.user_id
										Left Join CUSTOMER c ON c.ID = cu.CUSTOMERID
										where u.loginId= ?
                                        " />
				<entry key="COUNT_user_BY_NAME"
					value="SELECT COUNT(*) 
                                        FROM [user] 
                                        where [user].loginId= ?
                                        " />
				<entry key="SELECT_password_by_user_id"
					value="SELECT * from user_password where user_password.user_id= ? and user_password.ISDELETED=0" />

				<!--<entry key="UPDATE_user_status" value="update [user] set user_status=0 
					where user_id=?"/> -->
				<entry key="UPDATE_last_login"
					value="update [user] set last_login_time=? where user_id=?" />

				<!-- FrmAuditTrailAtEntityLevel Query -->
				<!--<entry key="SEARCH_FrmAuditTrailAtEntityLevel" value="SELECT audit_trail_at_entity_level.id,audit_trail_at_entity_level.entity_name,audit_trail_at_entity_level.entity_enabled,audit_trail_at_entity_level.created_by,audit_trail_at_entity_level.updated_by,audit_trail_at_entity_level.created_time,audit_trail_at_entity_level.updated_time 
					FROM audit_trail_at_entity_level where 1=1 AND id=? ORDER BY audit_trail_at_entity_level.id 
					"/> <entry key="SELECT_ALL_FrmAuditTrailAtEntityLevel" value="SELECT audit_trail_at_entity_level.id,audit_trail_at_entity_level.entity_name,audit_trail_at_entity_level.entity_enabled,audit_trail_at_entity_level.created_by,audit_trail_at_entity_level.updated_by,audit_trail_at_entity_level.created_time,audit_trail_at_entity_level.updated_time 
					FROM audit_trail_at_entity_level where 1=1 ORDER BY audit_trail_at_entity_level.id 
					"/> <entry key="INSERT_FrmAuditTrailAtEntityLevel" value="INSERT INTO audit_trail_at_entity_level 
					(entity_name,entity_enabled,created_by,updated_by,created_time,updated_time)VALUES(?, 
					?, ?, ?, ?, ?) "/> <entry key="DELETE_FrmAuditTrailAtEntityLevel_BY_ID" value="DELETE 
					from audit_trail_at_entity_level where id= ? "/> <entry key="UPDATE_FrmAuditTrailAtEntityLevel_BY_ID" 
					value="UPDATE audit_trail_at_entity_level SET entity_name = ?, entity_enabled 
					= ?, created_by = ?, updated_by = ?, created_time = ?, updated_time = ? WHERE 
					id=? "/> <entry key="SELECT_FrmAuditTrailAtEntityLevel_BY_ID" value="SELECT 
					audit_trail_at_entity_level.id,audit_trail_at_entity_level.entity_name,audit_trail_at_entity_level.entity_enabled,audit_trail_at_entity_level.created_by,audit_trail_at_entity_level.updated_by,audit_trail_at_entity_level.created_time,audit_trail_at_entity_level.updated_time 
					FROM audit_trail_at_entity_level where audit_trail_at_entity_level.id= ? 
					"/> -->


				<!-- EntityLevelMaster Query -->
				<!--<entry key="SEARCH_EntityLevelMaster" value="SELECT audit_trail_at_entity_level.id,audit_trail_at_entity_level.entity_name,audit_trail_at_entity_level.entity_enabled,audit_trail_at_entity_level.created_by,audit_trail_at_entity_level.updated_by,audit_trail_at_entity_level.created_time,audit_trail_at_entity_level.updated_time 
					FROM audit_trail_at_entity_level where 1=1 AND id=? ORDER BY audit_trail_at_entity_level.id 
					"/> <entry key="SELECT_ALL_EntityLevelMaster" value="SELECT audit_trail_at_entity_level.id,audit_trail_at_entity_level.entity_name,audit_trail_at_entity_level.entity_enabled,audit_trail_at_entity_level.created_by,audit_trail_at_entity_level.updated_by,audit_trail_at_entity_level.created_time,audit_trail_at_entity_level.updated_time 
					FROM audit_trail_at_entity_level where 1=1 ORDER BY audit_trail_at_entity_level.id 
					"/> <entry key="INSERT_EntityLevelMaster" value="INSERT INTO audit_trail_at_entity_level 
					(entity_name,entity_enabled,created_by,updated_by,created_time,updated_time)VALUES(?, 
					?, ?, ?, ?, ?) "/> <entry key="DELETE_EntityLevelMaster_BY_ID" value="DELETE 
					from audit_trail_at_entity_level where id= ? "/> <entry key="UPDATE_EntityLevelMaster_BY_ID" 
					value="UPDATE audit_trail_at_entity_level SET entity_name = ?, entity_enabled 
					= ?, created_by = ?, updated_by = ?, created_time = ?, updated_time = ? WHERE 
					id=? "/> <entry key="SELECT_EntityLevelMaster_BY_ID" value="SELECT audit_trail_at_entity_level.id,audit_trail_at_entity_level.entity_name,audit_trail_at_entity_level.entity_enabled,audit_trail_at_entity_level.created_by,audit_trail_at_entity_level.updated_by,audit_trail_at_entity_level.created_time,audit_trail_at_entity_level.updated_time 
					FROM audit_trail_at_entity_level where audit_trail_at_entity_level.id= ? 
					"/> -->

				<!-- FrmSystemParameter Query -->
				<!--<entry key="SEARCH_FrmSystemParameter" value="SELECT system_parameter.param_id,system_parameter.param_name,system_parameter.param_type,system_parameter.param_value,system_parameter.created_by,system_parameter.created_time,system_parameter.updated_by,system_parameter.updated_time 
					, param_typeLkd.lookup_value as param_typeLkdDesc FROM system_parameter, 
					lookup_details param_typeLkd where 1=1 AND param_name like ? AND system_parameter.param_type 
					= param_typeLkd.lookupd_id ORDER BY system_parameter.param_id "/> <entry 
					key="SELECT_ALL_FrmSystemParameter" value="SELECT system_parameter.param_id,system_parameter.param_name,system_parameter.param_type,system_parameter.param_value,system_parameter.created_by,system_parameter.created_time,system_parameter.updated_by,system_parameter.updated_time 
					, param_typeLkd.lookup_value as param_typeLkdDesc FROM system_parameter, 
					lookup_details param_typeLkd where 1=1 AND system_parameter.param_type = 
					param_typeLkd.lookupd_id ORDER BY system_parameter.param_id "/> <entry key="INSERT_FrmSystemParameter" 
					value="INSERT INTO system_parameter (param_name,param_type,param_value,created_by,created_time,updated_by,updated_time)VALUES(?, 
					?, ?, ?, ?, ?, ?) "/> <entry key="DELETE_FrmSystemParameter_BY_ID" value="DELETE 
					from system_parameter where param_id= ? "/> <entry key="UPDATE_FrmSystemParameter_BY_ID" 
					value="UPDATE system_parameter SET param_name = ?, param_type = ?, param_value 
					= ?, created_by = ?, created_time = ?, updated_by = ?, updated_time = ? WHERE 
					param_id=? "/> <entry key="SELECT_FrmSystemParameter_BY_ID" value="SELECT 
					system_parameter.param_id,system_parameter.param_name,system_parameter.param_type,system_parameter.param_value,system_parameter.created_by,system_parameter.created_time,system_parameter.updated_by,system_parameter.updated_time 
					, param_typeLkd.lookup_value as param_typeLkdDesc FROM system_parameter, 
					lookup_details param_typeLkd where system_parameter.param_id= ? AND system_parameter.param_type 
					= param_typeLkd.lookupd_id "/> -->
				<entry key="SELECT_password_blocked_attempts"
					value="SELECT value from sys_parameter where name= ?" />



				<!-- Pick List Query -->

				<!-- <entry key="SELECT_ALL_PICKLIST" value="SELECT lookup_id,lookup_name,lookup_type 
					FROM lookup_master"/> <entry key="SELECT_ALL_PICKLIST_BY_LOOKUPID" value="SELECT 
					lookup_id,lookup_name,lookup_type FROM lookup_master where lookup_id=? "/> 
					<entry key="SELECT_ALL_PICKLISTDETAILS_BY_LOOKUPID" value="SELECT lookupd_id,lookup_id,lookup_value 
					FROM lookup_details where lookup_id=? "/> <entry key="SELECT_ALL_PICKLISTDETAILS_BY_LOOKUP_DID" 
					value="SELECT lookupd_id,lookup_id,lookup_value FROM lookup_details where 
					lookupd_id=? "/> <entry key="SELECT_ALL_PICKLISTDETAILS_BY_LOOKUPDETAILID_LOOKUPTYPE" 
					value="select d.lookupd_id, d.lookup_value from lookup_dependancy ld, lookup_master 
					lm, lookup_details d where ld.lookup_id=lm.lookup_id and lm.lookup_id = d.lookup_id 
					and ld.lookupd_id=? and lm.lookup_type=? "/> <entry key="SELECT_ALL_PICKLIST_BY_NAME" 
					value="select lookup_id,lookup_name,lookup_type from lookup_master where 
					lookup_name=? "/> <entry key="INSERT_PICKLIST" value="INSERT INTO lookup_master 
					( lookup_name, lookup_type) VALUES (?,?)"/> <entry key="SELECT_DEPENDENT_LOOKUPDID" 
					value="SELECT lookup_dependancy.lookup_dependancy_id,lookup_dependancy.lookupd_id,lookup_dependancy.lookup_id 
					FROM lookup_dependancy where lookup_dependancy.lookupd_id= ? "/> <entry key="FIND_LOOKUP_ID_BY_NAME" 
					value="select lookup_id from lookup_master where lookup_name=?"/> <entry 
					key="INSERT_PICKLISTVALUES" value="INSERT INTO lookup_details ( lookup_id, 
					lookup_value) VALUES (?,?)"/> <entry key="INSERT_PICKLIST_DEPENDANCY_MAPPING" 
					value="INSERT INTO lookup_dependancy ( lookupd_id, lookup_id) VALUES (?,?) 
					"/> <entry key="SELECT_ALL_PICKLIST_DEPENDANCY_MAPPING_BY_ID" value="SELECT 
					lookup_dependancy_id,lookupd_id,lookup_id FROM lookup_dependancy where lookupd_id=? 
					and lookup_id=? "/> <entry key="UPDATE_PICKLIST_BY_ID" value="UPDATE lookup_master 
					SET lookup_name=?,lookup_type=? WHERE lookup_id=?"/> <entry key="UPDATE_PICKLISTDETAILS_BY_LOOKUPD_ID" 
					value="UPDATE lookup_details SET lookup_value=? WHERE lookupd_id=? "/> <entry 
					key="DELETE_PICKLISTDETAILS_BY_ID" value="DELETE from lookup_details where 
					lookup_id= ?"/> <entry key="DELETE_PICKLIST_BY_ID" value="DELETE from lookup_master 
					where lookup_id= ? "/> -->


				<!-- For UserRoleDAO -->
				<entry key="SELECT_ALL_user_role"
					value="SELECT user_role.user_role_id as userRoleId, user_role.user_id as userId, user_role.role_id as roleId, role.role_name as roleName, role.description as description, [user].loginid as loginId
														FROM user_role 
														Inner join role_master role ON role.role_id = user_role.role_id
														Inner Join [user] ON [user].user_id=user_role.user_id
														where user_id=?
														ORDER BY user_role.user_role_id  
														" />
				<entry key="SELECT_user_role_by_user_id"
					value="SELECT user_role.user_role_id as userRoleId, user_role.user_id as userId, user_role.role_id as roleId, role.role_name as roleName, role.description as description
												FROM user_role 
												Inner join role_master role ON role.role_id = user_role.role_id
												where user_id=?
												ORDER BY user_role.user_role_id
												" />
				<entry key="SELECT_Role_FROM_User_Role_By_UserId"
					value="select * from role_master rm  inner join user_role ur  on rm.role_id = ur.role_id where ur.user_id=?"></entry>
				<entry key="SELECT_mapped_roles_by_user_id"
					value="SELECT rm.role_id,rm.role_name,rm.description,ld.lookup_value as roleTypes,rm.created_by,
														rm.created_time,rm.updated_by,rm.updated_time,
														ld.lookupd_id as roleTypeId  
												FROM role_master rm 
												INNER JOIN user_role ur on rm.role_id = ur.role_id 
												LEFT JOIN lookup_details ld ON rm.superrole = ld.lookupd_id
												WHERE ur.user_id=? AND lookup_value = ? AND rm.ISDELETED = 0  AND rm.COMPANYID=? " />
				<entry key="SELECT_unmapped_roles_by_user_id"
					value="SELECT rm.role_id,rm.role_name,rm.description,ld.lookup_value as roleTypes,rm.created_by,
															rm.created_time,rm.updated_by,rm.updated_time,
															ld.lookupd_id as roleTypeId  
													FROM role_master rm 
													LEFT JOIN user_role ur on rm.role_id = ur.role_id  AND ur.user_id= ?
													LEFT JOIN lookup_details ld ON rm.superrole = ld.lookupd_id
													WHERE  lookup_value = ? AND rm.ISDELETED = 0 and ur.role_id is null AND rm.COMPANYID=? " />


				<!-- newly added -->
				<!-- <entry key="SELECT_menus_accesible_to_user" value="select distinct 
					menu_name,menu_master.* from [user],user_role,menu_role,menu_master where 
					[user].user_id=? AND menu_master.menu_type=1 AND [user].user_id=user_role.user_id 
					and menu_role.menu_id=menu_master.menu_id AND menu_role.role_id=user_role.role_id 
					and [user].ISDELETED=0 and menu_master.ISDELETED=0 and menu_master.parent_menu_id=0 
					order by menu_master.menu_sequence "/> -->
				<!-- modified by Deepak -->
				<entry key="SELECT_menus_accesible_to_user"
					value="select distinct menu_name,menu_master.* 
                                        from [user],user_role,menu_role,menu_master 
                                        where [user].user_id=? AND menu_master.menu_type=1 AND [user].user_id=user_role.user_id 
                                        and menu_role.menu_id=menu_master.menu_id AND menu_role.role_id=user_role.role_id and  [user].ISDELETED=0 
                                        and menu_master.ISDELETED=0 and menu_master.parent_menu_id=0 order by menu_master.menu_sequence" />

				<entry key="SELECT_is_menu_accesible_to_user"
					value="select menu_master.* 
                                        from [user],user_role,menu_role,menu_master 
                                        where  [user].user_id=user_role.user_id and menu_role.menu_id=menu_master.menu_id AND menu_role.role_id=user_role.role_id AND [user].user_id=? AND menu_master.page_url = ?
                                        " />


				<entry key="SELECT_menu_master_by_parent_menu_id"
					value="select menu_master.* from menu_master 
															where parent_menu_id=? and ISDELETED = 0 order by menu_sequence
															" />

				<!-- Used to get submenu (Deepak) -->
				<entry key="SELECT_SUBMENUS_BY_PARENT_MENU_ID"
					value="select distinct mm.menu_name,mm.* from menu_master mm inner join menu_role mr  on mm.menu_id = mr.menu_id inner join user_role ur
														on mr.role_id = ur.role_id inner join [USER] u on ur.user_id = u.user_id
														where u.user_id = ? and  mm.parent_menu_id is not null and mm.parent_menu_id=?
														and (mm.ISDELETED=0 or mm.ISDELETED is null) and mm.ACTIVE = 1 and 
														(u.ISDELETED=0 or u.ISDELETED is null)  
														order by mm.menu_sequence
														" />
				<!-- <entry key="GET_ALL_MENU_MASTER_LIST_COUNT_BY_PARENT_MENU_ID" value="select 
					count(*) from menu_master where parent_menu_id=? and ISDELETED = 0"/> -->

				<entry key="GET_ALL_MENU_MASTER_LIST_COUNT_BY_PARENT_MENU_ID"
					value="select count(*) from menu_master mm inner join menu_role mr  on
																	 mm.menu_id = mr.menu_id inner join user_role ur
																	 on mr.role_id = ur.role_id inner join [USER] u on ur.user_id = u.user_id
																	 where u.user_id = ? and  mm.parent_menu_id is not null and mm.parent_menu_id=?
																	 and (mm.ISDELETED=0 or mm.ISDELETED is null) and mm.ACTIVE = 1 and
																    (u.ISDELETED=0 or u.ISDELETED is null) " />



				<entry key="SELECT_ALL_Menu_Name"
					value="SELECT menu_id,menu_name FROM menu_master where parent_menu_id= 0 and ISDELETED = 0" />

				<!-- MenuRoleDAO -->

				<entry key="INSERT_menu_role"
					value="insert into menu_role values(?,?,?,?,?,?,?)" />
				<!-- <entry key="SELECT_menu_role_by_role_menu_id" value="select * from 
					menu_role where role_menu_id=?"/> -->
				<!-- <entry key="SELECT_menu_role_by_menu_id" value="select * from menu_role 
					where menu_id=?"/> -->
				<entry key="SELECT_menu_roles_by_role_id"
					value="select * from menu_role where role_id=?                                        
                                        " />
				<entry key="SELECT_mapped_menu_by_role_id"
					value="select * from menu_master where menu_id in (select menu_id from menu_role where role_id=?) AND isDeleted = 0                                        
                                        " />
				<entry key="SELECT_unmapped_menu_by_role_id"
					value="select * from menu_master where menu_id NOT in (select menu_id from menu_role where role_id=?) AND isDeleted = 0                                         
                                        " />
				<!-- <entry key="SELECT_menu_role_max_id" value="select max(role_menu_id) 
					from menu_role"/> <entry key="SELECT_menu_role_by_menu_id_and_role_id" value="select 
					* from menu_role where menu_id=? and role_id=? "/> -->
				<!-- <entry key="DELETE_menu_role_by_role_menu_id" value="delete from 
					menu_role where role_menu_id=?"/> -->
				<!-- <entry key="DELETE_menu_role_by_role__id" value="delete from menu_role 
					where role_id=?"/> <entry key="DELETE_menu_role_by_menu_id" value="delete 
					from menu_role where menu_id=?"/> -->
				<!-- <entry key="UPDATE_menu_role" value="update menu_role set role_id=?,menu_id=?,created_by=?,created_time=?,updated_by=?,updated_time=? 
					where role_menu_id=? "/> -->

				<!-- UserPasswordDAO -->

				<entry key="Select_Password_Expired_Time"
					value="SELECT value FROM sys_parameter where name=?" />
				<entry key="INSERT_user_password"
					value="insert into user_password(user_password_id, user_id, user_password,password_key, created_by, created_time,updated_by,updated_time)values(?,?,?,?,?,?,?,?)
                                        " />

				<entry key="SELECT_user_password"
					value="select * from user_password where user_password.ISDELETED=0" />

				<entry key="SELECT_user_password_by_user_id"
					value="select * 
                                        from user_password 
                                        where user_id=? AND user_password.ISDELETED=0
                                        " />

				<entry key="SELECT_user_password_max_id"
					value="select max(user_password_id) from user_password where user_password.ISDELETED=0" />

				<entry key="DELETE_user_password"
					value="delete from user_password where user_password_id=?" />

				<entry key="DELETE_user_password_by_user_id"
					value="delete from user_password where user_id=? and user_password.ISDELETED=0" />

				<entry key="UPDATE_user_password"
					value="insert into user_password values(?,?,?,?,?,?)" />

				<entry key="insert_new_user_password"
					value="insert into user_password(user_id,user_password,updated_by,created_by,created_time,updated_time)values(?,?,?,?,?,?)
                                        " />


				<entry key="UPDATE_user_password_to_change_password"
					value="update user_password set user_password=?,password_key=?,updated_time=? 
                                        where user_id=? AND user_password.ISDELETED=0
                                        " />

				<!-- menu_role query -->
				<entry key="SEARCH_ALL_menu_role"
					value="SELECT menu_role.role_menu_id,menu_role.role_id,menu_role.menu_id,menu_role.created_by,menu_role.created_time,menu_role.updated_by,menu_role.updated_time , role_masterLkd.name as role_masterLkdDesc , menu_masterLkd.name as menu_masterLkdDesc  
                                        FROM menu_role, role_master role_masterLkd, menu_master menu_masterLkd 
                                        where 1=1  AND menu_role.role_id = role_masterLkd.role_id AND menu_role.menu_id = menu_masterLkd.menu_id 
                                        ORDER BY menu_role.role_menu_id
                                        " />


				<entry key="SELECT_ALL_menu_role"
					value="SELECT * FROM menu_role" />

				<entry key="INSERT_menu_role"
					value="INSERT INTO menu_role (role_menu_id,role_id,menu_id,created_by,created_time,updated_by,updated_time)VALUES(?, ?, ?, ?, ?, ?, ?)
                                        " />

				<entry key="DELETE_menu_role_BY_ID"
					value="DELETE from menu_role where role_menu_id= ? " />

				<entry key="UPDATE_menu_role_BY_ID"
					value="UPDATE menu_role SET role_id = ?, menu_id = ?, created_by = ?, created_time = ?, updated_by = ?, updated_time = ? 
                                        WHERE role_menu_id=?
                                        " />

				<entry key="SELECT_menu_role_BY_ID"
					value="SELECT menu_role.role_menu_id,menu_role.role_id,menu_role.menu_id,menu_role.created_by,menu_role.created_time,menu_role.updated_by,menu_role.updated_time , role_masterLkd.name as role_masterLkdDesc , menu_masterLkd.name as menu_masterLkdDesc  
                                        FROM menu_role, role_master role_masterLkd, menu_master menu_masterLkd 
                                        where menu_role.role_menu_id= ? AND menu_role.role_id = role_masterLkd.role_id AND menu_role.menu_id = menu_masterLkd.menu_id
                                        " />

				<entry key="SEARCH_ALL_user_role"
					value="SELECT user_role.user_role_id,user_role.user_id,user_role.role_id,user_role.created_by,user_role.created_time,user_role.updated_by,user_role.updated_time , userLkd.name as userLkdDesc , role_masterLkd.name as role_masterLkdDesc  
                                        FROM user_role, [user] userLkd, role_master role_masterLkd 
                                        where 1=1  AND user_role.user_id = userLkd.user_id AND user_role.role_id = role_masterLkd.role_id 
                                        ORDER BY user_role.user_role_id
                                        " />
				<entry key="INSERT_user_role"
					value="INSERT INTO user_role (user_role_id,user_id,role_id,created_by,created_time,updated_by,updated_time)VALUES(?, ?, ?, ?, ?, ?, ?)
                                        " />
				<entry key="UPDATE_user_role"
					value="update user_role set role_id=?,updated_by=?,updated_time=getdate() where user_id=? and user_role_id=?" />

				<entry key="DELETE_user_role_BY_ID"
					value="DELETE from user_role where user_role_id= ? " />
				<entry key="UPDATE_user_role_BY_ID"
					value="UPDATE user_role SET user_id = ?, role_id = ?, created_by = ?, created_time = ?, updated_by = ?, updated_time = ? 
                                        WHERE user_role_id=?
                                        " />
				<entry key="SELECT_user_role_BY_ID"
					value="SELECT user_role.user_role_id,user_role.user_id,user_role.role_id,user_role.created_by,user_role.created_time,user_role.updated_by,user_role.updated_time , userLkd.name as userLkdDesc , role_masterLkd.name as role_masterLkdDesc  
                                        FROM user_role, [user] userLkd, role_master role_masterLkd 
                                        where user_role.user_role_id= ? AND user_role.user_id = userLkd.user_id AND user_role.role_id = role_masterLkd.role_id
                                        " />
				<!-- <entry key="SEARCH_User" value="SELECT [user].user_id,[user].loginId,[user].user_status,[user].user_email_id,[user].created_by,[user].created_time,[user].updated_by,[user].updated_time,[user].givenName, 
					[user].MiddleName, [user].FamilyName,[user].contact_no,[user].address FROM 
					[user] where 1=1 AND loginId like ? AND GivenName like ? AND user_status 
					like ? ORDER BY [user].user_id "/> -->
				<entry key="SELECT_ALL_User"
					value="SELECT [user].user_id,[user].loginId,[user].user_status,[user].created_by,
											[user].created_time,[user].updated_by,[user].updated_time,[user].givenName,[user].middleName,
											[user].familyName,Concat([user].givenName,' ',[user].middleName,' ', [user].FamilyName) as userName,
											c.EMAIL as userEmailId, c.MOBILE as contact_no,[user].mainContactId,
											Case when cu.ID is NOT NULL THEN 'Customer'
											     when e.ID  is NOT NULL THEN 'Employee'
												 ELSE 'n/a' END userType 
									FROM [user] 
									INNER JOIN CONTACT c ON [user].maincontactid=c.id
									LEFT JOIN CUSTOMERUSER cu ON cu.ID = [user].user_id
									LEFT JOIN Employee e ON e.ID = [user].user_id
									where [user].ISDELETED = 0 and [user].companyId=?
									ORDER BY [user].user_id
                                        " />

				<entry key="SEARCH_User"
					value="SELECT [user].user_id,[user].loginId,[user].user_status,[user].created_by,
									   [user].created_time,[user].updated_by,[user].updated_time,[user].givenName,[user].middleName,
									   [user].familyName,Concat([user].givenName,' ',[user].middleName,' ', [user].FamilyName) as userName,
									    c.EMAIL as userEmailId, c.MOBILE as contact_no,[user].mainContactId,
										Case when cu.ID is NOT NULL THEN 'Customer'
										     when e.ID  is NOT NULL THEN 'Employee'
											 ELSE 'n/a' END userType 
								FROM [user] 
								INNER JOIN CONTACT c ON [user].maincontactid=c.id
								LEFT JOIN CUSTOMERUSER cu ON cu.ID = [user].user_id
								LEFT JOIN Employee e ON e.ID = [user].user_id
								where [user].ISDELETED = 0 " />

				<entry key="INSERT_User"
					value="INSERT INTO [user] (user_id,loginId,user_status,user_email_id,created_by,created_time,updated_by,updated_time,givenName, middleName, FamilyName,contact_no,address, gender, mainContactId, Entity_UID, DateOfBirth, CompanyId, ACTIVATION_DATE,STATUSUPDATEDBY)VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?,?,?)
                                        " />
				<entry key="INSERT_User_Register_Application"
					value="INSERT INTO TempUserRegister(createDate,creator,modifier,updateDate,loginId ,firstName ,givenName ,familyName ,email ,mobileNumber ,addressName ,streetName ,streetSide ,floor ,houseNumber ,city ,state ,country ,postalCode ,applicationStatus ,customerId ,roleId,emailVerification,userComments,companyName,dateOfBirth,requestTo,isEmployee)
     VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)" />
				<entry key="User_Register_Application_OTP_UPDATE"
					value="update TempUserRegister set emailVerification='SUCCESS' where  id=? and emailVerification=?" />
				<entry key="Update_User_Register_Application"
					value="update TempUserRegister set applicationStatus=?,modifier=?,updateDate=getdate(),approversComments=? where  id=? " />


				<entry key="select_TempUserRegister"
					value="select * From TempUserRegister  where  id=?" />

				<entry key="SQL_GET_User_Register_Application"
					value="select tu.*,rm.role_name as roleName,c.CUSTOMERNAME as customerName ,u.loginId as updatedBy,case tu.isEmployee when 1 then tu.customerId else c.CODE end as customerCode 
					From TempUserRegister tu inner join role_master rm on tu.roleId=rm.role_id 
					 left outer join customer c on ISNULL(tu.customerId,'') =c.id
					left outer join [user] u on u.user_id= ISNULL(tu.modifier,'')
					 where emailVerification='SUCCESS' and (tu.modifier is null OR tu.modifier!='SYSTEM')" />



				<entry key="DELETE_User_BY_ID"
					value="DELETE from [user] where user_id= ? " />

				<!-- <entry key="UPDATE_user_BY_ID" value="UPDATE [user] SET loginId 
					= ?, user_status = ?, user_email_id = ?, created_by = ?, created_time = ?, 
					updated_by = ?, updated_time = ?, GivenName = ?, MiddleName = ?, FamilyName 
					= ? , contact_no = ?, address = ?,password_attempts=?, IMAGEID = ? WHERE 
					user_id=? "/> -->

				<entry key="SELECT_User_BY_ID"
					value="SELECT [user].user_id,[user].loginId,[user].user_status,c.email userEmailId,
										[user].created_by,[user].created_time,[user].updated_by,[user].updated_time,[user].givenName, 
										[user].MiddleName, [user].FamilyName,[user].contact_no,[user].address,[user].last_login_time,
										[user].MAINCONTACTID,[user].imageId,[user].EmployeeLocked,[user].COMPANYID,[user].ACTIVATION_DATE,[user].DEACTIVATION_DATE ,
										[user].STATUSUPDATEDBY 
                                        FROM [user]
                                        INNER JOIN CONTACT  c ON c.ID = [user].MAINCONTACTID
                                        where [user].user_id= ?
                                        " />
				<entry key="SELECT_User_Dto_BY_ID"
					value="SELECT 
									   		CASE WHEN u.middleName IS NOT NULL AND u.FAMILYNAME IS NOT NULL THEN Concat(u.givenName,' ',u.middleName,' ', u.FamilyName)
											WHEN u.middleName IS NULL AND u.familyName IS NOT NULL THEN Concat(u.givenName,' ', u.FamilyName) 
											WHEN u.middleName IS NOT NULL AND u.familyName IS NULL THEN Concat(u.givenName,' ', u.middleName) 	
											ELSE u.givenName END as name,
									   		c.EMAIL as emailId FROM [user] u INNER JOIN CONTACT c ON u.maincontactid=c.id  
									   		where u.user_id= ?
                                        	" />

				<!-- <entry key="SELECT_user_BY_NAMe" value="SELECT [user].user_id,[user].loginId,[user].user_status,[user].user_email_id,[user].created_by,[user].created_time,[user].givenName, 
					[user].MiddleName, [user].FamilyName,[user].contact_no,[user].address FROM 
					[user] where 1=1 AND [user].loginId= ? "/> -->

				<entry key="UPDATE_block_status"
					value="update [user] set user_status=? where user_id=?" />
				<entry key="UPDATE_password_attempts"
					value="update [user] set password_attempts=password_attempts+1 
                                        where user_id=?
                                        " />
				<entry key="UPDATE_password_attempts_to_zero"
					value="update [user] set password_attempts=0 where user_id=?" />

				<!-- role_master query -->

				<entry key="SEARCH_role_master"
					value="SELECT  rm.role_id,rm.role_name,rm.description,ld.lookup_value as roleTypes,rm.created_by,
											rm.created_time,rm.updated_by,rm.updated_time, ld.lookupd_id as roleTypeId 
										  FROM role_master rm  
										  LEFT JOIN lookup_details ld ON rm.superrole = ld.lookupd_id 
										  where 1=1  and isDeleted = 0 AND role_name like ?  AND description like ?
										  			 and companyId = ?
                                        ORDER BY rm.role_id
                                        " />

				<entry key="SELECT_ALL_role_master"
					value="SELECT  rm.role_id,rm.role_name,rm.description,ld.lookup_value as roleTypes,rm.created_by,
													rm.created_time,rm.updated_by,rm.updated_time, ld.lookupd_id as roleTypeId 
											FROM role_master rm  
											LEFT JOIN lookup_details ld ON rm.superrole = ld.lookupd_id 
											where 1=1  and isDeleted = 0 AND CompanyId = ?  ORDER BY rm.role_id
                                        " />

				<entry key="INSERT_role_master"
					value="INSERT INTO role_master (role_id,role_name,description,created_by,created_time,updated_by,updated_time, entity_uid,superrole, companyId)VALUES(?, ?, ?, ?, ?, ?, ?, ?,?, ?)
                                        " />

				<entry key="DELETE_role_master_BY_ID"
					value="DELETE from role_master where role_id= ? " />

				<entry key="UPDATE_role_master_BY_ID"
					value="UPDATE role_master SET role_name = ?, description = ?, SUPERROLE = ?, created_by = ?, created_time = ?, updated_by = ?, updated_time = ?, companyId=? 
                                        WHERE role_id=?
                                        " />

				<entry key="UPDATE_role_master_IsDeleted_BY_ID"
					value="UPDATE role_master SET isDeleted = 1 WHERE role_id=? AND role_id NOT IN (SELECT role_id from user_role) AND role_id NOT IN (SELECT role_id from menu_role)" />


				<entry key="SELECT_role_master_BY_ID"
					value="SELECT role_master.role_id,role_master.role_name,role_master.description,role_master.created_by,role_master.created_time,role_master.updated_by,role_master.updated_time  
                                        FROM role_master 
                                        where role_master.role_id= ? and isDeleted = 0
                                        " />

				<entry key="Count_role_master_BY_NAME"
					value="SELECT Count(role_Id)  
		                                        FROM role_master 
		                                        where role_master.role_name = ? and COMPANYID = ? and isDeleted = 0            
                                             " />
				<entry key="Count_role_master_BY_NAME_Excluding_Cur_RoleID"
					value="SELECT Count(role_Id)  
                                        FROM role_master 
                                        where role_master.role_name= ? and role_master.role_Id != ? and isDeleted = 0 " />
				<entry key="GetRoleId_by_Name"
					value="SELECT rm.role_Id FROM role_master rm
											INNER JOIN lookup_details ld ON ld.lookupd_id = rm.SUPERROLE
											where rm.role_name = ? and COMPANYID = ? and isDeleted = 0 AND ld.lookup_value = 'Employee' " />
				<entry key="COUNT_RoleId_by_Name"
					value="SELECT Count(rm.role_Id) FROM role_master rm
											INNER JOIN lookup_details ld ON ld.lookupd_id = rm.SUPERROLE
											where rm.role_name = ? and isDeleted = 0 AND ld.lookup_value = 'Employee' " />

				<entry key="GetRoleId_by_Name_RegisterUser"
					value="SELECT rm.role_Id FROM role_master rm
											INNER JOIN lookup_details ld ON ld.lookupd_id = rm.SUPERROLE
											where rm.role_name = ? and COMPANYID = ? and isDeleted = 0 " />
				<entry key="COUNT_RoleId_by_Name_RegisterUser"
					value="SELECT Count(rm.role_Id) FROM role_master rm
											INNER JOIN lookup_details ld ON ld.lookupd_id = rm.SUPERROLE
											where rm.role_name = ? and COMPANYID = ? and isDeleted = 0 " />
				<!-- menu_master Query -->
				<entry key="SEARCH_menu_master"
					value="SELECT menu_master.menu_id,menu_master.menu_name,menu_master.menu_type,menu_master.parent_menu_id,menu_master.page_url,menu_master.created_by,menu_master.created_time,menu_master.updated_by,menu_master.updated_time,menu_master.menu_sequence,
                                         ISNULL(menu_master.active, 0) active, ISNULL(menu_master.extranet, 0)  extranet, menu_master.description, menu_master.type, menu_master.isDeleted, menu_master.entity_uid, ISNULL(menu_master.contentPage,0) contentPage, menu_master.companyId as CompanyId
                                        FROM menu_master 
										where menu_master.menu_name like ?  and menu_master.isDeleted = 0 and menu_master.parent_menu_id = 0 and menu_master.companyId = ?
										ORDER BY menu_master.menu_sequence
									  " />
				<entry key="SELECT_ALL_menu_master"
					value="SELECT menu_master.menu_id,menu_master.menu_name,menu_master.menu_type,menu_master.parent_menu_id,menu_master.page_url,menu_master.created_by,menu_master.created_time,menu_master.updated_by,menu_master.updated_time,menu_master.menu_sequence,
                                         ISNULL(menu_master.active, 0) active, ISNULL(menu_master.extranet, 0)  extranet, menu_master.description, menu_master.type, menu_master.isDeleted, menu_master.entity_uid, ISNULL(menu_master.contentPage,0) contentPage, menu_master.companyId as CompanyId 
                                        FROM menu_master 
                                        where menu_master.parent_menu_id = ? and isDeleted = 0 and menu_master.companyId=?
                                        ORDER BY menu_master.menu_sequence 
                                        " />
				<entry key="INSERT_menu_master"
					value="INSERT INTO menu_master (menu_id,menu_name,menu_type,parent_menu_id,page_url,created_by,
																created_time,updated_by,updated_time,menu_sequence, active, 
																description, extranet, type, entity_uid, contentPage, companyId)
										VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
                                        " />
				<!--<entry key="DELETE_menu_master_BY_ID" value="DELETE from menu_master 
					where menu_id= ? "/> -->
				<entry key="UPDATE_menu_master_BY_ID"
					value="UPDATE menu_master SET menu_name = ?, menu_type = ?, parent_menu_id = ?, page_url = ?, created_by = ?, created_time = ?, 
																updated_by = ?, updated_time = ?, menu_sequence = ?, active = ?, 
																extranet = ?, description = ?, type = ?, entity_uid = ?, 
																contentPage = ?, companyId = ? 
											 WHERE menu_id=?" />
				<entry key="Update_IsDeleted_menu_master_BY_ID_1"
					value="UPDATE menu_master SET isDeleted = 1 WHERE menu_id=? 
															AND menu_id NOT IN (SELECT menu_role.menu_id from menu_role)" />
				<!-- <entry key="SELECT_menu_role_BY_menu_master_MENU_ID" value="SELECT 
					menu_role.menu_id from menu_role WHERE menu_role.menu_id = ?"/> -->




				<entry key="Update_IsDeleted_menu_master_BY_ID"
					value="UPDATE menu_master SET isDeleted = 1 WHERE menu_id=? " />


				<entry key="SELECT_menu_master_BY_ID"
					value="SELECT menu_master.menu_id,menu_master.menu_name,menu_master.menu_type,menu_master.parent_menu_id,
														menu_master.page_url,menu_master.created_by,menu_master.created_time,menu_master.updated_by,
														menu_master.updated_time,menu_master.menu_sequence,
														ISNULL(menu_master.active, 0) active, ISNULL(menu_master.extranet, 0) extranet, menu_master.description,
														menu_master.type, menu_master.isDeleted, menu_master.entity_uid, ISNULL(contentPage, 0) contentPage		
											FROM menu_master
											where menu_master.menu_id= ? and menu_master.isDeleted = 0 
                                        " />

				<!-- Commented lookup code -->
				<!-- <entry key="SELECT_All_lookup_details_BY_FKID" value="SELECT lookupdId,lookupId,lookupValue 
					FROM lookup_details where = ? "/> lookup_master Query <entry key="SEARCH_lookup_master" 
					value="SELECT lookup_master.lookup_id,lookup_master.lookup_name,lookup_master.lookup_type 
					FROM lookup_master where 1=1 AND lookup_name like ? ORDER BY lookup_master.lookup_id 
					"/> <entry key="SELECT_ALL_lookup_master" value="SELECT lookup_master.lookup_id,lookup_master.lookup_name,lookup_master.lookup_type 
					,lookup_master.is_sys_lookup FROM lookup_master where 1=1 ORDER BY lookup_master.lookup_id 
					"/> <entry key="SEARCH_ALL_lookup_master" value="SELECT lookup_master.lookup_id,lookup_master.lookup_name,lookup_master.lookup_type 
					FROM lookup_master where 1=1 ORDER BY lookup_master.lookup_id "/> <entry 
					key="INSERT_lookup_master" value="INSERT INTO lookup_master (lookup_name,lookup_type) 
					VALUES(?, ?) "/> <entry key="DELETE_lookup_master_BY_ID" value="DELETE from 
					lookup_master where lookup_id= ? "/> <entry key="UPDATE_lookup_master_BY_ID" 
					value="UPDATE lookup_master SET lookup_name = ?, lookup_type = ? WHERE lookup_id=? 
					"/> <entry key="SELECT_lookup_master_BY_ID" value="SELECT lookup_master.lookup_id,lookup_master.lookup_name,lookup_master.lookup_type 
					FROM lookup_master where lookup_master.lookup_id= ? "/> lookup_master Query 
					<entry key="SEARCH_lookup_master" value="SELECT lookup_master.lookup_id,lookup_master.lookup_name,lookup_master.lookup_type 
					,lookup_master.is_sys_lookup FROM lookup_master where 1=1 AND lookup_id=? 
					ORDER BY lookup_master.lookup_id "/> <entry key="SELECT_ALL_lookup_master" 
					value="SELECT lookup_master.lookup_id,lookup_master.lookup_name,lookup_master.lookup_type 
					,lookup_master.is_sys_lookup FROM lookup_master where 1=1 ORDER BY lookup_master.lookup_id 
					"/> <entry key="INSERT_lookup_master" value=" INSERT INTO lookup_master (lookup_id,lookup_name,lookup_type,is_sys_lookup,created_by,created_time,updated_by,updated_time)VALUES(?,?, 
					?,?,?,?, ?,?) "/> <entry key="DELETE_lookup_master_BY_ID" value="DELETE from 
					lookup_master where lookup_id= ? "/> <entry key="UPDATE_lookup_master_BY_ID" 
					value="UPDATE lookup_master SET lookup_name = ?, lookup_type = ? ,is_sys_lookup=?,updated_by 
					= ?,updated_time = ? WHERE lookup_id=? "/> <entry key="SELECT_lookup_master_BY_ID" 
					value="SELECT lookup_master.lookup_id,lookup_master.lookup_name,lookup_master.lookup_type 
					,lookup_master.is_sys_lookup FROM lookup_master where lookup_master.lookup_id= 
					? "/> <entry key="SELECT_lookup_details_BY_Request_Suggestion_ID" value="SELECT 
					lookup_details.lookupd_id,lookup_details.lookup_id,lookup_details.lookup_value 
					FROM lookup_details where lookup_details.lookupd_id= ?"> </entry> <entry 
					key="SELECT_lookup_details_BY_LookupId" value="SELECT lookup_details.lookupd_id,lookup_details.lookup_id,lookup_details.lookup_value,lookup_details.created_by,lookup_details.created_time,lookup_details.updated_by,lookup_details.updated_time 
					FROM lookup_details where lookup_id = ?"> </entry> <entry key="INSERT_lookup_details" 
					value="INSERT INTO lookup_details (lookupd_id, lookup_id,lookup_value)VALUES(?,?, 
					?) "/> <entry key="DELETE_lookup_details_BY_ID" value="DELETE from lookup_details 
					where lookupd_id= ? "/> <entry key="UPDATE_lookup_details_BY_ID" value="UPDATE 
					lookup_details SET lookup_id = ?, lookup_value = ? WHERE lookupd_id=? "/> 
					<entry key="DELETE_lookup_details_BY_LookupId" value=" DELETE from lookup_details 
					where lookup_id = ? "/> <entry key="DELETE_lookup_details_BY_LookupdId" value=" 
					DELETE from lookup_details where lookup_id = ? "/> lookup_dependancy Query 
					<entry key="SEARCH_lookup_dependancy" value="SELECT lookup_dependancy.lookup_dependancy_id,lookup_dependancy.lookupd_id,lookup_dependancy.lookup_id 
					FROM lookup_dependancy where 1=1 AND lookup_dependancy_id=? ORDER BY lookup_dependancy.lookup_dependancy_id 
					"/> <entry key="SELECT_ALL_lookup_dependancy" value="SELECT lookup_dependancy.lookup_dependancy_id,lookup_dependancy.lookupd_id,lookup_dependancy.lookup_id 
					FROM lookup_dependancy where 1=1 ORDER BY lookup_dependancy.lookup_dependancy_id 
					"/> <entry key="INSERT_lookup_dependancy" value="INSERT INTO lookup_dependancy 
					(lookup_dependancy_id,lookupd_id,lookup_id)VALUES(?, ?, ?) "/> <entry key="DELETE_lookup_dependancy_BY_ID" 
					value="DELETEfrom lookup_dependancywhere lookup_dependancy_id= ? "/> <entry 
					key="UPDATE_lookup_dependancy_BY_ID" value="UPDATE lookup_dependancy SET 
					lookupd_id = ?, lookup_id = ? WHERE lookup_dependancy_id=? "/> <entry key="SELECT_lookup_dependancy_BY_ID" 
					value="SELECT lookup_dependancy.lookup_dependancy_id,lookup_dependancy.lookupd_id,lookup_dependancy.lookup_id 
					FROM lookup_dependancy where lookup_dependancy.lookup_dependancy_id= ? "/> 
					<entry key="SELECT_lookup_dependancy_BY_lookupID_and_lookupd_id" value="SELECT 
					lookup_dependancy.lookup_dependancy_id,lookup_dependancy.lookupd_id,lookup_dependancy.lookup_id 
					FROM lookup_dependancy where lookup_dependancy.lookup_id=? AND lookup_dependancy.lookupd_id=? 
					"/> <entry key="SELECT_lookup_details_BY_DId" value="select lookup_details.lookupd_id,lookup_details.lookup_id,lookup_details.lookup_value 
					from lookup_details where lookup_details.lookupd_id=? "/> <entry key="SELECT_lookup_dependancy_BY_lookupID" 
					value="SELECT lookup_dependancy.lookup_dependancy_id,lookup_dependancy.lookupd_id,lookup_dependancy.lookup_id 
					FROM lookup_dependancy where lookup_dependancy.lookup_id=? "/> <entry key="DELETE_lookup_dependancy_BY_LookupdId" 
					value="DELETE from lookup_dependancy where lookupd_id= ? "/> <entry key="DELETE_lookup_dependancy_BY_LookupId" 
					value="DELETE from lookup_dependancy where lookup_id= ? "/> -->

				<!-- FrmSequences Query -->
				<entry key="SEARCH_Sequences"
					value="SELECT sequences.sequenceName,sequences.sequenceDescription,sequences.startwith,sequences.incrementBy,sequences.sequenceMinValue,sequences.sequenceMaxValue,sequences.currentValue 
                                        FROM sequences 
                                        where 1=1  AND sequenceName like ? 
                                        
                                        " />
				<entry key="SELECT_ALL_Sequences"
					value="SELECT sequences.sequenceName,sequences.sequenceDescription,sequences.startwith,sequences.incrementBy,sequences.sequenceMinValue,sequences.sequenceMaxValue,sequences.currentValue  
                                        FROM sequences 
                                        where 1=1 
                                        
                                        " />
				<entry key="INSERT_Sequences"
					value="INSERT INTO sequences (sequenceName,sequenceDescription,startwith,incrementBy,sequenceMinValue,sequenceMaxValue,currentValue)VALUES(?, ?, ?, ?, ?, ?, ?) 
                                        " />

				<entry key="UPDATE_Sequences_BY_ID"
					value="UPDATE sequences SET sequenceName = ?, sequenceDescription = ?, startwith = ?, incrementBy = ?, sequenceMinValue = ?, sequenceMaxValue = ?, currentValue = ? 
                                        WHERE sequenceName = ? 
                                        " />
				<entry key="COUNT_Sequences_BY_Name"
					value="SELECT count(*) FROM sequences where sequenceName= ? " />

				<entry key="SELECT_Sequences_BY_NAME"
					value="SELECT sequenceName,sequenceDescription,startwith,incrementBy,sequenceMinValue,sequenceMaxValue,currentValue 
										FROM sequences 
										where sequenceName= ?
										" />

				<!-- FrmAuditTrailEntityLevelMaster Query -->
				<entry key="SEARCH_AuditTrailEntityLevelMaster"
					value="SELECT audit_trail_entity_level_master.id,audit_trail_entity_level_master.entity_name,audit_trail_entity_level_master.entity_enabled,audit_trail_entity_level_master.created_by,audit_trail_entity_level_master.updated_by,audit_trail_entity_level_master.created_time,audit_trail_entity_level_master.updated_time , entityEnabledLkd.lookup_value as entityEnabledLkdDesc 
                                        FROM audit_trail_entity_level_master, lookup_details entityEnabledLkd
                                        where 1=1  AND id=?  AND audit_trail_entity_level_master.entity_enabled = entityEnabledLkd.lookupd_id
                                        ORDER BY audit_trail_entity_level_master.id
                                        " />
				<entry key="SELECT_ALL_AuditTrailEntityLevelMaster"
					value="SELECT audit_trail_entity_level_master.id,audit_trail_entity_level_master.entity_name,audit_trail_entity_level_master.entity_enabled,audit_trail_entity_level_master.created_by,audit_trail_entity_level_master.updated_by,audit_trail_entity_level_master.created_time,audit_trail_entity_level_master.updated_time
                                        FROM audit_trail_entity_level_master where  audit_trail_entity_level_master.entity_name = ?
                                        ORDER BY audit_trail_entity_level_master.id 
                                        " />
				<entry key="INSERT_AuditTrailEntityLevelMaster"
					value="INSERT INTO audit_trail_entity_level_master (entity_name,entity_enabled,created_by,updated_by,created_time,updated_time)VALUES(?, ?, ?, ?, ?, ?) 
                                        " />
				<entry key="DELETE_AuditTrailEntityLevelMaster_BY_ID"
					value="DELETE 
                                        from audit_trail_entity_level_master 
                                        where id= ?  
                                        " />
				<entry key="UPDATE_AuditTrailEntityLevelMaster_BY_ID"
					value="UPDATE audit_trail_entity_level_master SET entity_name = ?, entity_enabled = ?, created_by = ?, updated_by = ?, created_time = ?, updated_time = ? 
                                        WHERE id=? 
                                        " />
				<entry key="SELECT_AuditTrailEntityLevelMaster_BY_ID"
					value="SELECT audit_trail_entity_level_master.id,audit_trail_entity_level_master.entity_name,audit_trail_entity_level_master.entity_enabled,audit_trail_entity_level_master.created_by,audit_trail_entity_level_master.updated_by,audit_trail_entity_level_master.created_time,audit_trail_entity_level_master.updated_time , entityEnabledLkd.lookup_value as entityEnabledLkdDesc  
                                        FROM audit_trail_entity_level_master, lookup_details entityEnabledLkd
                                        where audit_trail_entity_level_master.id= ? AND audit_trail_entity_level_master.entity_enabled = entityEnabledLkd.lookupd_id 
                                        " />

				<entry key="SELECT_AuditTrailEntityLevelMaster_BY_Name"
					value="SELECT audit_trail_entity_level_master.id,audit_trail_entity_level_master.entity_name,audit_trail_entity_level_master.entity_enabled,audit_trail_entity_level_master.created_by,audit_trail_entity_level_master.updated_by,audit_trail_entity_level_master.created_time,audit_trail_entity_level_master.updated_time
                                        FROM audit_trail_entity_level_master
                                        where audit_trail_entity_level_master.entity_name= ?  
                                        " />

				<!-- FrmAuditTrailFieldLevelDetail Query -->
				<entry
					key="SELECT_AuditTrailFieldLevelDetail_BY_AuditTrailFieldLevelDetailID"
					value="SELECT audit_trail_field_level_detail.id,audit_trail_field_level_detail.entity_level_id,audit_trail_field_level_detail.field_name,audit_trail_field_level_detail.field_enabled,audit_trail_field_level_detail.created_by,audit_trail_field_level_detail.updated_by,audit_trail_field_level_detail.created_time,audit_trail_field_level_detail.updated_time , frmAuditTrailEntityLevelMasterLkd.entity_name as frmAuditTrailEntityLevelMasterLkdDesc , field_enabledLkd.lookup_value as field_enabledLkdDesc  
                                        FROM audit_trail_field_level_detail, audit_trail_entity_level_master frmAuditTrailEntityLevelMasterLkd, lookup_details field_enabledLkd
                                        where audit_trail_field_level_detail.id= ? AND audit_trail_field_level_detail.entity_level_id = frmAuditTrailEntityLevelMasterLkd.id AND audit_trail_field_level_detail.field_enabled = field_enabledLkd.lookupd_id 
                                        " />

				<entry
					key="SELECT_AuditTrailFieldLevelDetail_BY_AuditTrailEntityLevelMasterId"
					value="SELECT audit_trail_field_level_detail.id,audit_trail_field_level_detail.entity_level_id,audit_trail_field_level_detail.field_name,audit_trail_field_level_detail.field_enabled,audit_trail_field_level_detail.created_by,audit_trail_field_level_detail.updated_by,audit_trail_field_level_detail.created_time,audit_trail_field_level_detail.updated_time
                                        FROM audit_trail_field_level_detail
                                        where 1=1 AND audit_trail_field_level_detail.entity_level_id = ?
                                        " />
				<entry
					key="SELECT_AuditTrailFieldLevelDetail_BY_AuditTrailEntityLevelMasterIdEnable"
					value="SELECT audit_trail_field_level_detail.id,audit_trail_field_level_detail.entity_level_id,audit_trail_field_level_detail.field_name,audit_trail_field_level_detail.field_enabled,audit_trail_field_level_detail.created_by,audit_trail_field_level_detail.updated_by,audit_trail_field_level_detail.created_time,audit_trail_field_level_detail.updated_time , frmAuditTrailEntityLevelMasterLkd.entity_name as frmAuditTrailEntityLevelMasterLkdDesc , field_enabledLkd.lookup_value as field_enabledLkdDesc  
                                        FROM audit_trail_field_level_detail, audit_trail_entity_level_master frmAuditTrailEntityLevelMasterLkd, lookup_details field_enabledLkd
                                        where 1=1 AND audit_trail_field_level_detail.entity_level_id = ? AND audit_trail_field_level_detail.entity_level_id = frmAuditTrailEntityLevelMasterLkd.id and  audit_trail_field_level_detail.field_enabled=126 AND audit_trail_field_level_detail.field_enabled = field_enabledLkd.lookupd_id  
                                        " />


				<entry key="INSERT_AuditTrailFieldLevelDetail"
					value="  INSERT INTO audit_trail_field_level_detail(entity_level_id, field_name, field_enabled,created_by, 
											created_time, updated_by, updated_time)
											SELECT ?,
											c.name AS column_name,1,?,?,?,?
											FROM sys.tables AS t
											INNER JOIN sys.columns c ON t.OBJECT_ID = c.OBJECT_ID
											WHERE t.name = ?  
                                        " />
				<entry key="UPDATE_AuditTrailFieldLevelDetail_BY_ID"
					value="UPDATE audit_trail_field_level_detail SET entity_level_id = ?, field_name = ?, field_enabled = ?, created_by = ?, updated_by = ?, created_time = ?, updated_time = ? 
                                        WHERE id=? 
                                        " />

				<entry key="DELETE_AuditTrailFieldLevelDetail_BY_ID"
					value="  DELETE 
                                        from audit_trail_field_level_detail 
                                        where id= ?  
                                        " />
				<entry key="DELETE_AuditTrailFieldLevelDetail_BY_Id"
					value=" DELETE 
                                        from audit_trail_field_level_detail whereentity_level_id = ? 
                                        " />

				<!--// Queries For Employee -->
				<entry key="SEARCH_Employee"
					value="Select e.ID, e.EMPLOYEECODE,com.NAME as companyName,u.user_status as activeStatus, e.EXTERNALID, e.SALESOFFICEID, u.givenName, u.MiddleName, u.FamilyName,
											u.loginId as loginID, u.DateOfBirth, u.gender, Concat(u.givenName,' ', u.FamilyName) as Name,
											c.EMAIL as emailId, c.MOBILE as mobileNumber, so.NAME as salesOfficeName, so.CODE as salesOfficeCode,
											su.NAME as salesUnitName, su.CODE as salesUnitCode, u.EMPLOYEELOCKED as Locked,
											u.user_id as userId, rm.role_name as roleName,
											a.streetname as streetName, a.streetside as streetSide, a.FLOOR as floor,
											a.HOUSENUMBER as houseNumber, l.city as  city, l.STATEPROV as  state,
											l.COUNTRY as  country, l.POSTALCODE as  postalCode,e.ISWAREHOUSEOPERATOR as isWareHouseOperator
										from [EMPLOYEE] e
										INNER Join [USER] u ON e.ID = u.user_id
										INNER JOIN COMPANY com ON u.COMPANYID=com.ID
										Inner join [SALESOFFICE] so ON so.ID = e.SALESOFFICEID
										INNER Join [SALESUNIT] su ON su.ID = so.SALESUNITID
										INNER JOIN user_role ur on ur.user_id = u.user_id
										Inner Join role_master rm on ur.role_id =  rm.role_id
										Left Join  [CONTACT] c on c.ID = u.mainContactId
										LEFT JOIN  [ADDRESS] a ON a.ID = c.ADDRESSID
										LEFT JOIN  [Location] l ON l.ID = a.LOCATIONID
										INNER JOIN SALESREGION salesRegionLkd ON su.SALESREGIONID = salesRegionLkd.ID 
										INNER JOIN ENTERPRISE en ON salesRegionLkd.ENTERPRISEID = en.ID
									where e.ISDELETED = 0 " />
				<entry key="SELECT_ALL_Employee"
					value="Select e.ID, e.EMPLOYEECODE, e.EXTERNALID, e.SALESOFFICEID, u.givenName, u.MiddleName, u.FamilyName,
											u.loginId as loginID, u.DateOfBirth, u.gender, Concat(u.givenName,' ', u.FamilyName) as Name,
											c.EMAIL as emailId, c.MOBILE as mobileNumber, so.NAME as salesOfficeName, so.CODE as salesOfficeCode,
											su.NAME as salesUnitName, su.CODE as salesUnitCode, u.EMPLOYEELOCKED as Locked,
											u.user_id as userId, rm.role_name as roleName,
											a.streetname as streetName, a.streetside as streetSide, a.FLOOR as floor,
											a.HOUSENUMBER as houseNumber, l.city as  city, l.STATEPROV as  state,
											l.COUNTRY as  country, l.POSTALCODE as  postalCode,e.ISWAREHOUSEOPERATOR as isWareHouseOperator
										from [EMPLOYEE] e
										INNER Join [USER] u ON e.ID = u.user_id
										Inner join [SALESOFFICE] so ON so.ID = e.SALESOFFICEID
										INNER Join [SALESUNIT] su ON su.ID = so.SALESUNITID
										INNER JOIN user_role ur on ur.user_id = u.user_id
										Inner Join role_master rm on ur.role_id =  rm.role_id
										Left Join  [CONTACT] c on c.ID = u.mainContactId
										LEFT JOIN  [ADDRESS] a ON a.ID = c.ADDRESSID
										LEFT JOIN  [Location] l ON l.ID = a.LOCATIONID
										INNER JOIN SALESREGION salesRegionLkd ON su.SALESREGIONID = salesRegionLkd.ID 
										INNER JOIN ENTERPRISE en ON salesRegionLkd.ENTERPRISEID = en.ID
										where e.ISDELETED = 0 and en.COMPANYID = ? and (e.ISWAREHOUSEOPERATOR is null or e.ISWAREHOUSEOPERATOR=0)
										Order By EMPLOYEECODE
                                    " />
				<entry key="INSERT_Employee"
					value="INSERT INTO EMPLOYEE (EMPLOYEETYPEID,EMPLOYEECODE,EXTERNALID,ID,SALESOFFICEID,CMSDESIGNATION,ISDELETED,ISWAREHOUSEOPERATOR) VALUES (?,?,?,?,?,?,?,?)
                                        " />
				<entry key="UPDATE_Employee_BY_ID"
					value="UPDATE employee SET employeetypeid = ?, employeecode = ?, externalid = ?, salesofficeid = ?, cmsdesignation = ?, isdeleted = ?
                                        WHERE id=?
                                        " />
				<entry key="SELECT_Employee_BY_ID"
					value="SELECT employee.employeetypeid, employee.employeecode, employee.externalid, employee.salesofficeid, employee.cmsdesignation, employee.isdeleted,employee.salesofficeid
                                        FROM employee
                                        where employee.id= ?
                                        " />
				<entry key="SELECT_Employee_BY_CODE"
					value="SELECT employee.employeetypeid, employee.employeecode, employee.externalid, employee.salesofficeid, employee.cmsdesignation, employee.isdeleted,employee.salesofficeid
                                        FROM employee
                                        where employee.employeecode= ?
                                        " />
				<!-- <entry key="DELETE_Employee_BY_ID" value="DELETE from employee where 
					id= ? "/> <entry key="UPDATE_Employee_BY_ID" value="UPDATE employee SET emp_no 
					= ?, name = ?, address = ?, city = ?, status = ?, created_by = ?, created_time 
					= ?, updated_by = ?, updated_time = ? WHERE id=? "/> <entry key="SELECT_Employee_BY_ID" 
					value="SELECT employee.id,employee.emp_no,employee.name,employee.address,employee.city,employee.status,employee.created_by,employee.created_time,employee.updated_by,employee.updated_time 
					, statusLkd.lookup_value as statusLkdDesc FROM employee, lookup_details statusLkd 
					where employee.id= ? AND employee.status = statusLkd.lookupd_id "/> -->
				<entry key="SELECT_Employee_By_FKId"
					value="SELECT employee.EMPLOYEETYPEID,employee.EMPLOYEECODE,employee.EXTERNALID,employee.ID,employee.SALESOFFICEID,employee.CMSDESIGNATION,employee.ISDELETED 
                                        FROM employee
                                        where employee.ID = ?
                                        " />
				<entry key="SELECT_Employee_By_FKSalesofficeid"
					value="SELECT employee.EMPLOYEETYPEID,employee.EMPLOYEECODE,employee.EXTERNALID,employee.ID,employee.SALESOFFICEID,employee.CMSDESIGNATION,employee.ISDELETED 
                                        FROM employee
                                        where employee.SALESOFFICEID = ? and (employee.ISWAREHOUSEOPERATOR is null or employee.ISWAREHOUSEOPERATOR=0)
                                        " />

				<entry key="SELECT_BookingOfficer_By_FKSalesofficeid"
					value="SELECT employee.EMPLOYEETYPEID,employee.EMPLOYEECODE,employee.EXTERNALID,
										employee.ID,employee.SALESOFFICEID,employee.CMSDESIGNATION,employee.ISDELETED,
										contact.mobile mobileNumber, contact.email emailId, u.givenname, u.familyname
						                FROM employee
										inner join user_role urole on employee.id=urole.user_id
										inner join role_master rmaster on rmaster.role_id = urole.role_id
										inner join [user] u on u.user_id = employee.id
										inner join CONTACT on contact.id = u.maincontactid
						                where employee.SALESOFFICEID = ? and rmaster.role_name='BookingOfficer'
                                        " />

				<entry key="SELECT_Supervisor_By_FKSalesofficeid"
					value="SELECT employee.EMPLOYEETYPEID,employee.EMPLOYEECODE,employee.EXTERNALID,
										employee.ID,employee.SALESOFFICEID,employee.CMSDESIGNATION,employee.ISDELETED,
										contact.mobile mobileNumber, contact.email emailId, u.givenname, u.familyname
						                FROM employee
										inner join user_role urole on employee.id=urole.user_id
										inner join role_master rmaster on rmaster.role_id = urole.role_id
										inner join [user] u on u.user_id = employee.id
										inner join CONTACT on contact.id = u.maincontactid
						                where employee.SALESOFFICEID = ? and rmaster.role_name='Supervisor'
                                        " />

				<entry key="Count_Employee_By_Code"
					value="SELECT COUNT(ID) FROM employee where EMPLOYEECODE = ?" />
				<!--// Queries For FrmUser -->
				<entry key="UPDATE_User_BY_ID"
					value="UPDATE [user] SET loginId = ?, user_email_id = ?, user_status = ?, created_by = ?, created_time = ?, updated_by = ?, updated_time = ?, DateOfBirth = ?, GivenName = ?, MiddleName = ?, FamilyName = ?, contact_no = ?, address = ?, last_login_time = ?, IMAGEID = ?, EMPLOYEELOCKED = ?, mainContactId=?, Gender = ?, DEACTIVATION_DATE = ?,ACTIVATION_DATE = ?,STATUSUPDATEDBY = ?
                                        WHERE user_id=? 
                                        " />
				<!-- <entry key="SELECT_User_BY_ID" value="SELECT [user].user_id,[user].loginId,[user].user_email_id,[user].user_status,[user].created_by,[user].created_time,[user].updated_by,[user].updated_time,[user].givenName, 
					[user].MiddleName, [user].FamilyName,[user].contact_no,[user].address,[user].last_login_time,[user].password_attempts 
					FROM [user] where [user].user_id= ? "/> -->

				<!-- <entry key="SEARCH_RoleLOV" value=" select role_id, role_name, description 
					from role_master where role_name like ? "/> -->
				<!-- <entry key="SEARCH_user" value="SELECT [user].user_id,[user].loginId,[user].user_status,[user].user_email_id,[user].created_by,[user].created_time,[user].updated_by,[user].updated_time,[user].givenName, 
					[user].MiddleName, [user].FamilyName,[user].contact_no,[user].address FROM 
					[user] where 1=1 AND givenName like ? ORDER BY [user].user_id "/> -->
				<!-- <entry key="SELECT_ALL_user" value="SELECT [user].user_id,[user].loginId,[user].user_status,[user].user_email_id,[user].created_by,[user].created_time,[user].updated_by,[user].updated_time,[user].givenName, 
					[user].MiddleName, [user].FamilyName,[user].contact_no,[user].address FROM 
					[user] where 1=1 ORDER BY [user].user_id "/> -->


				<!-- UserGroups Queries -->
				<!--Query Filter from xml must identify columns with table.column -->
				<!--in the absense of tableName if there is FK and the names of more 
					than 1 column is same it will give error - ambiguous column -->
				<!-- <entry key="SEARCH_UserGroups" value=" SELECT user_groups.id,user_groups.name,user_groups.created_by,user_groups.created_time,user_groups.updated_by,user_groups.updated_time 
					FROM user_groups where 1=1 AND name like ? ORDER BY user_groups.id " /> <entry 
					key="SELECT_ALL_UserGroups" value=" SELECT user_groups.id,user_groups.name,user_groups.created_by,user_groups.created_time,user_groups.updated_by,user_groups.updated_time 
					FROM user_groups ORDER BY user_groups.id" /> <entry key="INSERT_UserGroups" 
					value=" INSERT INTO user_groups (id,name,created_by,created_time,updated_by,updated_time) 
					VALUES(?, ?, ?, ?, ?, ?) " /> <entry key="DELETE_UserGroups_BY_ID" value=" 
					DELETE from user_groups where id= ? " /> <entry key="UPDATE_UserGroups_BY_ID" 
					value=" UPDATE user_groups SET name = ?, created_by = ?, created_time = ?, 
					updated_by = ?, updated_time = ? WHERE id=? " /> <entry key="SELECT_UserGroups_BY_ID" 
					value=" SELECT user_groups.id,user_groups.name,user_groups.created_by,user_groups.created_time,user_groups.updated_by,user_groups.updated_time 
					FROM user_groups where user_groups.id= ? ORDER BY user_groups.id " /> <entry 
					key="SELECT_UserGroups_By_Name" value=" SELECT user_groups.id,user_groups.name,user_groups.created_by,user_groups.created_time,user_groups.updated_by,user_groups.updated_time 
					FROM user_groups where user_groups.name = ? ORDER BY user_groups.name " /> 
					<entry key="SELECT_UserGroups_By_Name" value=" SELECT user_groups.id,user_groups.name,user_groups.created_by,user_groups.created_time,user_groups.updated_by,user_groups.updated_time 
					FROM user_groups where user_groups.name = ? " /> -->


				<!-- <entry key="SELECT_UserGroupDetails_By_FKGroup" value=" SELECT user_group_details.id,user_group_details.group_id,user_group_details.user_id,user_group_details.created_by,user_group_details.created_time,user_group_details.updated_by,user_group_details.updated_time 
					FROM user_group_details where user_group_details.group_id = ? " /> <entry 
					key="SELECT_UserGroupDetails_By_FKUser" value=" SELECT user_group_details.id,user_group_details.group_id,user_group_details.user_id,user_group_details.created_by,user_group_details.created_time,user_group_details.updated_by,user_group_details.updated_time 
					FROM user_group_details where user_group_details.user_id = ? " /> -->



				<!-- UserGroupDetails Query -->
				<!-- <entry key="SELECT_UserGroupDetails_BY_UserGroupDetailsID" value="SELECT 
					user_group_details.id,user_group_details.group_id,user_group_details.user_id,user_group_details.created_by,user_group_details.created_time,user_group_details.updated_by,user_group_details.updated_time 
					, userGroupsLkd.name as groupuserGroupsLkdDesc , frmUserLkd.loginId as userfrmUserLkdDesc 
					FROM user_group_details , user_groups userGroupsLkd , [user] frmUserLkd where 
					user_group_details.id= ? AND user_group_details.group_id = userGroupsLkd.id 
					AND user_group_details.user_id = frmUserLkd.user_id " /> <entry key="SELECT_UserGroupDetails_BY_UserGroupsId" 
					value="SELECT user_group_details.id,user_group_details.group_id,user_group_details.user_id,user_group_details.created_by,user_group_details.created_time,user_group_details.updated_by,user_group_details.updated_time 
					, userGroupsLkd.name as groupuserGroupsLkdDesc , frmUserLkd.loginId as userfrmUserLkdDesc 
					FROM user_group_details , user_groups userGroupsLkd , [user] frmUserLkd where 
					1=1 AND user_group_details.group_id = ? AND user_group_details.group_id = 
					userGroupsLkd.id AND user_group_details.user_id = frmUserLkd.user_id " /> 
					<entry key="INSERT_UserGroupDetails" value=" INSERT INTO user_group_details 
					(id,group_id,user_id,created_by,created_time,updated_by,updated_time) VALUES(?, 
					?, ?, ?, ?, ?, ?) " /> <entry key="UPDATE_UserGroupDetails_BY_ID" value=" 
					UPDATE user_group_details SET group_id = ?, user_id = ?, created_by = ?, 
					created_time = ?, updated_by = ?, updated_time = ? WHERE id=? " /> <entry 
					key="DELETE_UserGroupDetails_BY_ID" value=" DELETE from user_group_details 
					where id= ? " /> <entry key="DELETE_UserGroupDetails_BY_Id" value=" DELETE 
					from user_group_details where group_id = ? " /> -->
				<!--// Queries For FrmUserLookupMaster -->
				<!-- <entry key="SEARCH_UserLookupMaster" value="SELECT lookup_master.lookup_id 
					id,lookup_master.lookup_name name FROM lookup_master where 1=1 AND lookup_name 
					like ? AND is_sys_lookup=1 ORDER BY lookup_master.lookup_id "/> -->
				<!-- <entry key="SELECT_ALL_UserLookupMaster" value="SELECT lookup_master.lookup_id 
					id,lookup_master.lookup_name name FROM lookup_master ORDER BY lookup_master.lookup_id 
					"/> <entry key="INSERT_UserLookupMaster" value="INSERT INTO lookup_master 
					(lookup_id,lookup_name,created_by,created_time,updated_by,updated_time) VALUES(?, 
					?, ?, ?, ?, ?) "/> <entry key="DELETE_UserLookupMaster_BY_ID" value="DELETE 
					from lookup_master where lookup_id= ? "/> <entry key="UPDATE_UserLookupMaster_BY_ID" 
					value="UPDATE lookup_master SET lookup_name = ?, updated_by = ?, updated_time 
					= ? WHERE lookup_id=? "/> <entry key="SELECT_UserLookupMaster_BY_ID" value=" 
					SELECT lookup_master.lookup_id id,lookup_master.lookup_name name FROM lookup_master 
					where lookup_master.lookup_id= ? ORDER BY lookup_master.lookup_id "/> <entry 
					key="SELECT_UserLookupMaster_By_Name" value="SELECT lookup_master.lookup_id 
					id,lookup_master.lookup_name name FROM lookup_master where lookup_master.lookup_name 
					= ? ORDER BY lookup_master.lookup_name "/> <entry key="SELECT_FrmUserLookupDetails_By_FKLookupId" 
					value="SELECT lookup_details.lookupd_id,lookup_details.lookup_id,lookup_details.lookup_value 
					FROM lookup_details where lookup_details.lookup_id = ? "/> <entry key="SELECT_UserLookupDetails_BY_UserLookupDetailsID" 
					value="SELECT lookup_details.lookupd_id ,lookup_details.lookup_id,lookup_details.lookup_value,frmLookupMasterLkd.lookup_name 
					as lookupIdfrmLookupMasterLkdDesc FROM lookup_details, lookup_master frmLookupMasterLkd 
					where lookup_details.lookupd_id= ? AND lookup_details.lookup_id = frmLookupMasterLkd.lookup_id 
					"/> <entry key="SELECT_UserLookupDetails_BY_UserLookupMasterId" value="SELECT 
					lookup_details.lookupd_id,lookup_details.lookup_id,lookup_details.lookup_value, 
					frmLookupMasterLkd.lookup_name as lookupIdfrmLookupMasterLkdDesc FROM lookup_details, 
					lookup_master frmLookupMasterLkd where 1=1 AND lookup_details.lookup_id = 
					? AND lookup_details.lookup_id = frmLookupMasterLkd.lookup_id "/> <entry 
					key="INSERT_UserLookupDetails" value="INSERT INTO lookup_details (lookupd_id,lookup_id,lookup_value,created_by,created_time,updated_by,updated_time) 
					VALUES(?, ?, ?, ?, ?, ?, ?) "/> <entry key="UPDATE_UserLookupDetails_BY_ID" 
					value="UPDATE lookup_details SET lookup_id = ?, lookup_value = ?, updated_by 
					= ?, updated_time = ? WHERE lookupd_id=? "/> <entry key="DELETE_UserLookupDetails_BY_ID" 
					value="DELETE from lookup_details where lookupd_id= ? "/> <entry key="DELETE_UserLookupDetails_BY_Id" 
					value=" DELETE from lookup_details where lookup_id = ? "/> -->

				<!--// Queries For FrmLanguage -->
				<!--<entry key="SEARCH_Language" value="SELECT language.id,language.code,language.name,language.created_by,language.created_time,language.updated_by,language.updated_time 
					FROM language where 1=1 AND (language.code like ? AND language.name like 
					? ) ORDER BY language.id "/> <entry key="SELECT_ALL_Language" value="SELECT 
					language.id,language.code,language.name,language.created_by,language.created_time,language.updated_by,language.updated_time 
					FROM language ORDER BY language.id "/> <entry key="INSERT_Language" value="INSERT 
					INTO language (id,code,name,created_by,created_time,updated_by,updated_time)VALUES(?, 
					?, ?, ?, ?, ?, ?) "/> <entry key="DELETE_Language_BY_ID" value="DELETE from 
					language where id= ? "/> <entry key="UPDATE_Language_BY_ID" value="UPDATE 
					language SET code = ?, name = ?, created_by = ?, created_time = ?, updated_by 
					= ?, updated_time = ? WHERE id=? "/> <entry key="SELECT_Language_BY_ID" value=" 
					SELECT language.id,language.code,language.name,language.created_by,language.created_time,language.updated_by,language.updated_time 
					FROM language where language.id= ? ORDER BY language.id "/> -->


				<!--// Queries For Customer -->
				<entry key="SEARCH_Customer"
					value="SELECT customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,customer.UPDATEDATE,
												customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,customer.HEADQUARTER,customer.CUSTOMERNAME,
												customer.SINGLELOCATION,customer.CUSTOMERGROUPID,customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,
												customer.SALESGROUPID,customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,
												customer.VIRTUALACCOUNT,customer.ISDELETED , customergroupLkd.name as customerGroupName  , contactLkd.email as email ,
												contactLkd.mobile as mobileNumber, salesgroupLkd.name as salesGroup  , salesofficeLkd.name as salesOffice ,
												customerLkd1.customername as salesPromoterName, salesorgLkd.name as salesOrganisation, distchannelLkd.name as distChannel,
												salesunitLkd.name as  salesUnit , salesregionLkd.name as salesRegion, addressLkd.name as  addressName,
												addressLkd.streetname as streetName, addressLkd.streetside as streetSide, addressLkd.FLOOR as floor,
												addressLkd.HOUSENUMBER as houseNumber, locationLkd.city as  city, locationLkd.STATEPROV as  state,
												locationLkd.COUNTRY as  country, locationLkd.POSTALCODE as  postalCode, customer.issecondarysalesaccess as secondarySalesAccess,
												salesorgLkd.CODE as salesOrgCode, salesofficeLkd.CODE as salesOfficeCode,  salesunitLkd.CODE as salesUnitCode
											FROM customer
											Inner JOIN customergroup customergroupLkd ON customer.CUSTOMERGROUPID = customergroupLkd.ID
											Inner JOIN salesarea salesareaLkd ON customer.SALESAREAID = salesareaLkd.ID 
											Inner JOIN salesgroup salesgroupLkd ON customer.SALESGROUPID = salesgroupLkd.ID 
											Inner JOIN salesoffice salesofficeLkd ON customer.SALESOFFICEID = salesofficeLkd.ID 
											Inner JOIN salesorganisation salesorgLkd ON salesareaLkd.SALESORGID = salesorgLkd.ID 
											Inner JOIN DISTRIBUTIONCHANNEL distchannelLkd ON salesareaLkd.DISTCHANNELID = distchannelLkd.ID 
											Inner JOIN salesunit salesunitLkd ON salesofficeLkd.SALESUNITID = salesunitLkd.ID 
											Inner JOIN salesregion salesregionLkd ON salesunitLkd.SALESREGIONID = salesregionLkd.ID 
											Inner JOIN ENTERPRISE en ON en.ID = salesregionLkd.ENTERPRISEID
											LEFT JOIN customer customerLkd1 ON customer.SALESPROMOTERID = customerLkd1.ID 
											LEFT JOIN contact contactLkd ON customer.MAINCONTACTID = contactLkd.ID 
											LEFT JOIN customer customerLkd ON customer.PARENTHQID = customerLkd.ID
											LEFT JOIN address addressLkd ON contactLkd.ADDRESSID = addressLkd.ID 
											LEFT JOIN location locationLkd ON addressLkd.LOCATIONID = locationLkd.ID
										where customer.ISDELETED = 0 and customer.SALESPROMOTER = 0" />
				<entry key="SELECT_ALL_Customer"
					value="SELECT customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,customer.UPDATEDATE,
												customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,customer.HEADQUARTER,customer.CUSTOMERNAME,
												customer.SINGLELOCATION,customer.CUSTOMERGROUPID,customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,
												customer.SALESGROUPID,customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,
												customer.VIRTUALACCOUNT,customer.ISDELETED , customergroupLkd.name as customerGroupName  , contactLkd.email as email ,
												contactLkd.mobile as mobileNumber, salesgroupLkd.name as salesGroup  , salesofficeLkd.name as salesOffice ,
												customerLkd1.customername as salesPromoterName, salesorgLkd.name as salesOrganisation, distchannelLkd.name as distChannel,
												salesunitLkd.name as  salesUnit , salesregionLkd.name as salesRegion, addressLkd.name as  addressName,
												addressLkd.streetname as streetName, addressLkd.streetside as streetSide, addressLkd.FLOOR as floor,
												addressLkd.HOUSENUMBER as houseNumber, locationLkd.city as  city, locationLkd.STATEPROV as  state,
												locationLkd.COUNTRY as  country, locationLkd.POSTALCODE as  postalCode, customer.issecondarysalesaccess as secondarySalesAccess 
											FROM customer
											Inner JOIN customergroup customergroupLkd ON customer.CUSTOMERGROUPID = customergroupLkd.ID
											Inner JOIN salesarea salesareaLkd ON customer.SALESAREAID = salesareaLkd.ID 
											Inner JOIN salesgroup salesgroupLkd ON customer.SALESGROUPID = salesgroupLkd.ID 
											Inner JOIN salesoffice salesofficeLkd ON customer.SALESOFFICEID = salesofficeLkd.ID 
											Inner JOIN salesorganisation salesorgLkd ON salesareaLkd.SALESORGID = salesorgLkd.ID 
											Inner JOIN DISTRIBUTIONCHANNEL distchannelLkd ON salesareaLkd.DISTCHANNELID = distchannelLkd.ID 
											Inner JOIN salesunit salesunitLkd ON salesofficeLkd.SALESUNITID = salesunitLkd.ID 
											Inner JOIN salesregion salesregionLkd ON salesunitLkd.SALESREGIONID = salesregionLkd.ID 
											Inner JOIN ENTERPRISE en ON en.ID = salesregionLkd.ENTERPRISEID
											LEFT JOIN customer customerLkd1 ON customer.SALESPROMOTERID = customerLkd1.ID 
											LEFT JOIN contact contactLkd ON customer.MAINCONTACTID = contactLkd.ID 
											LEFT JOIN customer customerLkd ON customer.PARENTHQID = customerLkd.ID
											LEFT JOIN address addressLkd ON contactLkd.ADDRESSID = addressLkd.ID 
											LEFT JOIN location locationLkd ON addressLkd.LOCATIONID = locationLkd.ID
										where customer.ISDELETED = 0 and customer.SALESPROMOTER = 0 AND en.COMPANYID = ?
										ORDER BY customer.ID  
                                        " />
				<!-- <entry key="INSERT_Customer" value="INSERT INTO customer (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,ACCESSKEY,ACCESSPORTAL,CODE,HEADQUARTER,CUSTOMERNAME,SINGLELOCATION,CUSTOMERGROUPID,MAINCONTACTID,PARENTHQID,SALESAREAID,SALESGROUPID,SALESOFFICEID,SALESPROMOTER,SALESPROMOTERID,ISDIRECTPOSTING,VIRTUALACCOUNT,ISDELETED)VALUES(?, 
					?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) "/> 
					<entry key="DELETE_Customer_BY_ID" value="UPDATE customer SET ISDELETED = 
					1 WHERE ID=? "/> -->
				<entry key="UPDATE_Customer_BY_ID"
					value="UPDATE customer SET MODIFIER = ?, UPDATEDATE = ?, ISDIRECTPOSTING = ?, ACCESSPORTAL = ?, accessKey = ?, ISSECONDARYSALESACCESS = ?, DEACTIVATION_DATE = ?, ACTIVATION_DATE = ?, STATUSUPDATEDBY = ?,CUSTOMERNAME=?
                                        WHERE ID=? 
                                        " />
                                        
                <entry key="UPDATE_Customer_BY_ID_SalesPromoter"
					value="UPDATE customer SET MODIFIER = ?, UPDATEDATE = ?, ISDIRECTPOSTING = ?, ACCESSPORTAL = ?, accessKey = ?, ISSECONDARYSALESACCESS = ?, DEACTIVATION_DATE = ?, ACTIVATION_DATE = ?, STATUSUPDATEDBY = ?,CUSTOMERNAME=?, SALESPROMOTERID=?
                                        WHERE ID=? 
                                        " />
				<entry key="SELECT_Customer_BY_ID"
					value=" SELECT customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,customer.UPDATEDATE,customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,customer.HEADQUARTER,customer.CUSTOMERNAME,customer.SINGLELOCATION,customer.CUSTOMERGROUPID,customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,customer.SALESGROUPID,customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,customer.VIRTUALACCOUNT,customer.ISDELETED , customergroupCUSTOMERGROUPIDLkd.name as customergroupidcustomergroupLkdDesc  , contactMAINCONTACTIDLkd.name as maincontactidcontactLkdDesc  , customerPARENTHQIDLkd.customername as parenthqidcustomerLkdDesc  , salesareaSALESAREAIDLkd.id as salesareaidsalesareaLkdDesc  , salesgroupSALESGROUPIDLkd.name as salesgroupidsalesgroupLkdDesc  , salesofficeSALESOFFICEIDLkd.name as salesofficeidsalesofficeLkdDesc  , customerSALESPROMOTERIDLkd.customername as salespromoteridcustomerLkdDesc, customer.issecondarysalesaccess as secondarySalesAccess
                                        FROM customer
                                        LEFT JOIN customergroup customergroupCUSTOMERGROUPIDLkd ON customer.CUSTOMERGROUPID = customergroupCUSTOMERGROUPIDLkd.ID LEFT JOIN contact contactMAINCONTACTIDLkd ON customer.MAINCONTACTID = contactMAINCONTACTIDLkd.ID LEFT JOIN customer customerPARENTHQIDLkd ON customer.PARENTHQID = customerPARENTHQIDLkd.ID LEFT JOIN salesarea salesareaSALESAREAIDLkd ON customer.SALESAREAID = salesareaSALESAREAIDLkd.ID LEFT JOIN salesgroup salesgroupSALESGROUPIDLkd ON customer.SALESGROUPID = salesgroupSALESGROUPIDLkd.ID LEFT JOIN salesoffice salesofficeSALESOFFICEIDLkd ON customer.SALESOFFICEID = salesofficeSALESOFFICEIDLkd.ID LEFT JOIN customer customerSALESPROMOTERIDLkd ON customer.SALESPROMOTERID = customerSALESPROMOTERIDLkd.ID
                                        where customer.ID= ? and customer.ISDELETED = 0
                                        ORDER BY customer.ID  
                                        " />
				<!--// Query For validate Customer with code and accesskey -->
				<entry key="SELECT_Customer_BY_Code_AccessKey"
					value=" SELECT customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,customer.UPDATEDATE,customer.issecondarysalesaccess as secondarySalesAccess,
										ISNULL(customer.OPTLOCK,0) OPTLOCK,customer.ACCESSKEY,ISNULL(customer.ACCESSPORTAL, 0) ACCESSPORTAL,customer.CODE,ISNULL(customer.HEADQUARTER, 0) HEADQUARTER,customer.CUSTOMERNAME,
										ISNULL(customer.SINGLELOCATION, 0) SINGLELOCATION,ISNULL(customer.CUSTOMERGROUPID,0) CUSTOMERGROUPID,
										ISNULL(customer.MAINCONTACTID, 0) MAINCONTACTID,ISNULL(customer.PARENTHQID, 0) PARENTHQID,ISNULL(customer.SALESAREAID, 0) SALESAREAID,
										ISNULL(customer.SALESGROUPID, 0) SALESGROUPID, ISNULL(customer.SALESOFFICEID, 0) SALESOFFICEID,
										ISNULL(customer.SALESPROMOTER, 0) SALESPROMOTER,ISNULL(customer.SALESPROMOTERID, 0) SALESPROMOTERID,ISNULL(customer.ISDIRECTPOSTING, 0) ISDIRECTPOSTING,
										ISNULL(customer.VIRTUALACCOUNT, 0) VIRTUALACCOUNT, ISNULL(customer.ISDELETED, 0) ISDELETED,
										ISNULL(customer.DELCREDER,0) DELCREDER
										FROM customer
										Inner JOIN customergroup customergroupLkd ON customer.CUSTOMERGROUPID = customergroupLkd.ID
										Inner JOIN salesarea salesareaLkd ON customer.SALESAREAID = salesareaLkd.ID 
										Inner JOIN salesgroup salesgroupLkd ON customer.SALESGROUPID = salesgroupLkd.ID 
										Inner JOIN salesoffice salesofficeLkd ON customer.SALESOFFICEID = salesofficeLkd.ID 
										Inner JOIN salesorganisation salesorgLkd ON salesareaLkd.SALESORGID = salesorgLkd.ID 
										Inner JOIN DISTRIBUTIONCHANNEL distchannelLkd ON salesareaLkd.DISTCHANNELID = distchannelLkd.ID 
										Inner JOIN salesunit salesunitLkd ON salesofficeLkd.SALESUNITID = salesunitLkd.ID 
										Inner JOIN salesregion salesregionLkd ON salesunitLkd.SALESREGIONID = salesregionLkd.ID 
										Inner JOIN ENTERPRISE en ON en.ID = salesregionLkd.ENTERPRISEID
										where customer.CODE= ? AND en.companyId = ? and customer.isDeleted = 0
										and customer.isDeleted = 0           ORDER BY customer.ID  
										" />

				<entry key="CHECK_CustomerCode_Exists"
					value=" SELECT COUNT(customer.CODE)  
										FROM customer
										Inner JOIN customergroup customergroupLkd ON customer.CUSTOMERGROUPID = customergroupLkd.ID
										Inner JOIN salesarea salesareaLkd ON customer.SALESAREAID = salesareaLkd.ID 
										Inner JOIN salesgroup salesgroupLkd ON customer.SALESGROUPID = salesgroupLkd.ID 
										Inner JOIN salesoffice salesofficeLkd ON customer.SALESOFFICEID = salesofficeLkd.ID 
										Inner JOIN salesorganisation salesorgLkd ON salesareaLkd.SALESORGID = salesorgLkd.ID 
										Inner JOIN DISTRIBUTIONCHANNEL distchannelLkd ON salesareaLkd.DISTCHANNELID = distchannelLkd.ID 
										Inner JOIN salesunit salesunitLkd ON salesofficeLkd.SALESUNITID = salesunitLkd.ID 
										Inner JOIN salesregion salesregionLkd ON salesunitLkd.SALESREGIONID = salesregionLkd.ID 
										Inner JOIN ENTERPRISE en ON en.ID = salesregionLkd.ENTERPRISEID
										where customer.CODE= ? AND en.companyId = ? and customer.isDeleted = 0 
										" />

				<entry key="CHECK_DelcrederCode_Exists"
					value="SELECT COUNT(customer.CODE) FROM customer WHERE customer.code = ?" />
				<entry key="SELECT_Customer_By_FKCustomergroupid"
					value="SELECT customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,customer.UPDATEDATE,customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,customer.HEADQUARTER,customer.CUSTOMERNAME,customer.SINGLELOCATION,customer.CUSTOMERGROUPID,customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,customer.SALESGROUPID,customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,customer.VIRTUALACCOUNT,customer.ISDELETED, customer.issecondarysalesaccess as secondarySalesAccess 
                                        FROM customer
                                        where customer.CUSTOMERGROUPID = ?
                                        " />
				<entry key="SELECT_Customer_By_FKMaincontactid"
					value="SELECT customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,customer.UPDATEDATE,customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,customer.HEADQUARTER,customer.CUSTOMERNAME,customer.SINGLELOCATION,customer.CUSTOMERGROUPID,customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,customer.SALESGROUPID,customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,customer.VIRTUALACCOUNT,customer.ISDELETED, customer.issecondarysalesaccess as secondarySalesAccess 
                                        FROM customer
                                        where customer.MAINCONTACTID = ?
                                        " />
				<entry key="SELECT_Customer_By_FKParenthqid"
					value="SELECT customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,customer.UPDATEDATE,customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,customer.HEADQUARTER,customer.CUSTOMERNAME,customer.SINGLELOCATION,customer.CUSTOMERGROUPID,customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,customer.SALESGROUPID,customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,customer.VIRTUALACCOUNT,customer.ISDELETED, customer.issecondarysalesaccess as secondarySalesAccess
                                        FROM customer
                                        where customer.PARENTHQID = ?
                                        " />
				<entry key="SELECT_Customer_By_FKSalesareaid"
					value="SELECT customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,customer.UPDATEDATE,customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,customer.HEADQUARTER,customer.CUSTOMERNAME,customer.SINGLELOCATION,customer.CUSTOMERGROUPID,customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,customer.SALESGROUPID,customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,customer.VIRTUALACCOUNT,customer.ISDELETED, customer.issecondarysalesaccess as secondarySalesAccess 
                                        FROM customer
                                        where customer.SALESAREAID = ?
                                        " />
				<entry key="SELECT_Customer_By_FKSalesgroupid"
					value="SELECT customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,customer.UPDATEDATE,customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,customer.HEADQUARTER,customer.CUSTOMERNAME,customer.SINGLELOCATION,customer.CUSTOMERGROUPID,customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,customer.SALESGROUPID,customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,customer.VIRTUALACCOUNT,customer.ISDELETED, customer.issecondarysalesaccess as secondarySalesAccess
                                        FROM customer
                                        where customer.SALESGROUPID = ?
                                        " />
				<entry key="SELECT_Customer_By_FKSalesofficeid"
					value="SELECT customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,customer.UPDATEDATE,customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,customer.HEADQUARTER,customer.CUSTOMERNAME,customer.SINGLELOCATION,customer.CUSTOMERGROUPID,customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,customer.SALESGROUPID,customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,customer.VIRTUALACCOUNT,customer.ISDELETED, customer.issecondarysalesaccess as secondarySalesAccess 
                                        FROM customer
                                        where customer.SALESOFFICEID = ?
                                        " />
				<entry key="SELECT_Customer_By_FKSalespromoterid"
					value="SELECT customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,customer.UPDATEDATE,customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,customer.HEADQUARTER,customer.CUSTOMERNAME,customer.SINGLELOCATION,customer.CUSTOMERGROUPID,customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,customer.SALESGROUPID,customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,customer.VIRTUALACCOUNT,customer.ISDELETED, customer.issecondarysalesaccess as secondarySalesAccess
                                        FROM customer
                                        where customer.SALESPROMOTERID = ?
                                        " />
				<!--// Queries For Content -->
				<entry key="SELECT_ALL_Content"
					value="SELECT content.ID,content.CREATEDATE,content.CREATOR,content.ENTITY_UID,content.MODIFIER,content.UPDATEDATE,content.OPTLOCK,content.POSITION,content.STATUS,content.TEMPLATE,content.DETAILTEXTID,content.SHORTTEXTID, content.ISDELETED, content.COMPANYID, content.SALESOFFICEID, content.SALESREGIONID, contentdetailLkd.contenttext as contentText  , contentdetailLkd.header as header,contentdetailLkd.URL as uRL
                                        FROM content 
                                        INNER JOIN contentdetail contentdetailLkd ON content.SHORTTEXTID = contentdetailLkd.ID
                                        where content.ISDELETED = 0 AND content.COMPANYID=?
                                        ORDER BY content.ID
                                        " />
				<entry key="INSERT_Content"
					value="INSERT INTO content (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,POSITION,STATUS,TEMPLATE,DETAILTEXTID,SHORTTEXTID,ISDELETED,COMPANYID,SALESOFFICEID,SALESREGIONID)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
                                        " />
				<entry key="UPDATE_Content_BY_ID"
					value="UPDATE content SET MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, POSITION = ?, STATUS = ?, TEMPLATE = ?, DETAILTEXTID = ?, SHORTTEXTID = ?, ISDELETED = ? 
                                        WHERE ID=? 
                                        " />
				<entry key="SELECT_Content_BY_ID"
					value="SELECT content.ID,content.CREATEDATE,content.CREATOR,content.ENTITY_UID,content.MODIFIER,content.UPDATEDATE,content.OPTLOCK,content.POSITION,content.STATUS,content.TEMPLATE,content.DETAILTEXTID,content.SHORTTEXTID,content.ISDELETED, content.COMPANYID   
                                        FROM content 
                                        where content.ID =? AND content.ISDELETED = 0
                                        " />
				<entry key="SELECT_Content_BY_Template"
					value="SELECT content.ID,content.CREATEDATE,content.CREATOR,content.ENTITY_UID,content.MODIFIER,content.UPDATEDATE,content.OPTLOCK,content.POSITION,content.STATUS,content.TEMPLATE,content.DETAILTEXTID,content.SHORTTEXTID,content.ISDELETED, content.COMPANYID, contentdetailLkd.contenttext as contentText, contentdetailLkd.header as header  
                                        FROM content
                                        INNER JOIN contentdetail contentdetailLkd ON content.SHORTTEXTID = contentdetailLkd.ID 
                                        where content.TEMPLATE=? AND content.ISDELETED = 0 AND content.COMPANYID=?
                                        and content.SALESOFFICEID IS NULL AND content.SALESREGIONID IS NULL
                                        " />
				<entry key="SELECT_Content_BY_SalesRegion_SalesOffice"
					value="SELECT content.ID,content.CREATEDATE,content.CREATOR,content.ENTITY_UID,content.MODIFIER,content.UPDATEDATE,content.OPTLOCK,content.POSITION,content.STATUS,content.TEMPLATE,content.DETAILTEXTID,content.SHORTTEXTID,content.ISDELETED, content.COMPANYID, contentdetailLkd.contenttext as contentText, contentdetailLkd.header as header  
                                        FROM content
                                        INNER JOIN contentdetail contentdetailLkd ON content.SHORTTEXTID = contentdetailLkd.ID
                                        LEFT JOIN salesOffice salesOfficeLkd ON content.SALESOFFICEID = salesOfficeLkd.ID
                                        LEFT JOIN salesRegion salesRegionLkd ON content.SALESREGIONID = salesRegionLkd.ID 
                                        where content.TEMPLATE=? AND content.ISDELETED = 0 AND salesOfficeLkd.ID=?  AND salesRegionLkd.ID=? AND content.COMPANYID=?
                                        " />
				<entry key="SELECT_Content_BY_SalesRegion"
					value="SELECT content.ID,content.CREATEDATE,content.CREATOR,content.ENTITY_UID,content.MODIFIER,content.UPDATEDATE,content.OPTLOCK,content.POSITION,content.STATUS,content.TEMPLATE,content.DETAILTEXTID,content.SHORTTEXTID,content.ISDELETED, content.COMPANYID, contentdetailLkd.contenttext as contentText, contentdetailLkd.header as header  
                                        FROM content
                                        INNER JOIN contentdetail contentdetailLkd ON content.SHORTTEXTID = contentdetailLkd.ID
                                        LEFT JOIN salesOffice salesOfficeLkd ON content.SALESOFFICEID = salesOfficeLkd.ID
                                        LEFT JOIN salesRegion salesRegionLkd ON content.SALESREGIONID = salesRegionLkd.ID 
                                        where content.TEMPLATE=? AND content.ISDELETED = 0 AND salesRegionLkd.ID=? AND content.COMPANYID=?
                                        " />
				<entry key="SELECT_Content_BY_SalesOffice"
					value="SELECT content.ID,content.CREATEDATE,content.CREATOR,content.ENTITY_UID,content.MODIFIER,content.UPDATEDATE,content.OPTLOCK,content.POSITION,content.STATUS,content.TEMPLATE,content.DETAILTEXTID,content.SHORTTEXTID,content.ISDELETED, content.COMPANYID, contentdetailLkd.contenttext as contentText, contentdetailLkd.header as header  
                                        FROM content
                                        INNER JOIN contentdetail contentdetailLkd ON content.SHORTTEXTID = contentdetailLkd.ID
                                        LEFT JOIN salesOffice salesOfficeLkd ON content.SALESOFFICEID = salesOfficeLkd.ID
                                        LEFT JOIN salesRegion salesRegionLkd ON content.SALESREGIONID = salesRegionLkd.ID 
                                        where content.TEMPLATE=? AND content.ISDELETED = 0 AND salesOfficeLkd.ID=? AND content.COMPANYID=?
                                        " />
				<entry key="SELECT_Content_BY_Company"
					value="SELECT content.ID,content.CREATEDATE,content.CREATOR,content.ENTITY_UID,content.MODIFIER,content.UPDATEDATE,content.OPTLOCK,content.POSITION,content.STATUS,content.TEMPLATE,content.DETAILTEXTID,content.SHORTTEXTID,content.ISDELETED, content.COMPANYID, contentdetailLkd.contenttext as contentText, contentdetailLkd.header as header  
                                        FROM content
                                        INNER JOIN contentdetail contentdetailLkd ON content.SHORTTEXTID = contentdetailLkd.ID
                                        LEFT JOIN salesOffice salesOfficeLkd ON content.SALESOFFICEID = salesOfficeLkd.ID
                                        LEFT JOIN salesRegion salesRegionLkd ON content.SALESREGIONID = salesRegionLkd.ID 
                                        where content.TEMPLATE=? AND content.ISDELETED = 0 AND content.COMPANYID=?
                                        " />
				<entry key="INSERT_Content_Image"
					value="INSERT INTO contentimages (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,CONTENTID,IMAGEID)VALUES(?, ?, ?, ?, ?, ?, ?, ?)  " />
				<entry key="SELECT_ContentImage_By_ContentId"
					value="SELECT contentImages.ID, contentImages.CREATEDATE, contentImages.CREATOR, contentImages.MODIFIER, contentImages.UPDATEDATE, contentImages.CONTENTID, contentImages.IMAGEID  
                                        FROM contentImages 
                                        where contentImages.CONTENTID =?  
                                        " />
				<entry key="SELECT_Page_Images"
					value="select img.ID,img.IMAGEPATH, img.DESCRIPTION from IGIMAGE img 
											inner join CONTENTIMAGES cimg on  img.ID=cimg.IMAGEID
											inner join CONTENT c on c.ID=cimg.CONTENTID
											where c.TEMPLATE = ?  and c.COMPANYID = ? and c.ISDELETED = 0
											and c.SALESOFFICEID IS NULL AND c.SALESREGIONID IS NULL" />
				<entry key="SELECT_Page_Images_By_SalesRegion_SalesOffice"
					value="select img.ID,img.IMAGEPATH, img.DESCRIPTION from IGIMAGE img 
											inner join CONTENTIMAGES cimg on  img.ID=cimg.IMAGEID
											inner join CONTENT c on c.ID=cimg.CONTENTID
											where c.TEMPLATE = ?  and c.COMPANYID = ? and c.ISDELETED = 0
											and c.SALESOFFICEID=? AND c.SALESREGIONID=?" />
				<entry key="SELECT_Page_Images_By_SalesRegion"
					value="select img.ID,img.IMAGEPATH, img.DESCRIPTION from IGIMAGE img 
											inner join CONTENTIMAGES cimg on  img.ID=cimg.IMAGEID
											inner join CONTENT c on c.ID=cimg.CONTENTID
											where c.TEMPLATE = ?  and c.COMPANYID = ? and c.ISDELETED = 0
											and c.SALESREGIONID=?" />
				<entry key="SELECT_Page_Content"
					value="select cd.CONTENTTEXT from CONTENTDETAIL cd 
											inner join CONTENT c on cd.ID=c.DETAILTEXTID
											where c.TEMPLATE=?  and c.ISDELETED = 0" />
				<entry key="DELETE_IGIMAGE_BY_ID"
					value="DELETE from Igimage where ID= ? " />
				<entry key="DELETE_ContentImage"
					value="DELETE from contentImages where CONTENTID=? AND IMAGEID=?" />
				<entry key="DELETE_CONTENTIMAGE_BY_IGIMAGEID"
					value="DELETE from contentImages where IMAGEID=?" />

				<!--// Queries For Contentdetail -->
				<entry key="INSERT_Contentdetail"
					value="INSERT INTO contentdetail (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,HEADER,CONTENTTEXT,ISDELETED,URL)
                                         VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?) 
                                        " />
				<entry key="UPDATE_Contentdetail_BY_ID"
					value="UPDATE contentdetail SET MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, HEADER = ?, CONTENTTEXT = ?, ISDELETED = ?,URL=? 
                                        WHERE ID=? 
                                        " />
				<entry key="SELECT_Contentdetail_BY_ID"
					value="SELECT contentdetail.ID,contentdetail.CREATEDATE,contentdetail.CREATOR,contentdetail.ENTITY_UID,contentdetail.MODIFIER,contentdetail.UPDATEDATE,contentdetail.OPTLOCK,contentdetail.HEADER,contentdetail.CONTENTTEXT,contentdetail.ISDELETED,contentdetail.URL
                                        FROM contentdetail 
                                        where contentdetail.ID= ? AND contentdetail.ISDELETED=0
                                        " />


				<!--// Queries For Customeruser -->
				<entry key="SEARCH_Customeruser"
					value="SELECT customeruser.ACCESSKEY,customeruser.JOBTXT,customeruser.MARRIED,customeruser.ORGTXT,customeruser.ORGUNIT,customeruser.POSITION,customeruser.USERFUNCTION,customeruser.WEDDINGANNIVERSARY,customeruser.ID,customeruser.CUSTOMERID,customeruser.SPOUSEID,customeruser.ISDELETED , CUSTOMERIDLkd.name as customeridcustomerLkdDesc , SPOUSEIDLkd.name as spouseidrelationLkdDesc 
                                        FROM customeruser  
                                        LEFT JOIN customer CUSTOMERIDLkd ON customeruser.CUSTOMERID = CUSTOMERIDLkd.ID LEFT JOIN relation SPOUSEIDLkd ON customeruser.SPOUSEID = SPOUSEIDLkd.ID  
                                        where 1=1  AND ID=?
                                        ORDER BY customeruser.ID  
                                        " />
				<entry key="SELECT_ALL_Customeruser"
					value="SELECT customeruser.ACCESSKEY,customeruser.JOBTXT,customeruser.MARRIED,customeruser.ORGTXT,customeruser.ORGUNIT,customeruser.POSITION,customeruser.USERFUNCTION,customeruser.WEDDINGANNIVERSARY,customeruser.ID,customeruser.CUSTOMERID,customeruser.SPOUSEID,customeruser.ISDELETED , customerLkd.name as customeridcustomerLkdDesc  , relationLkd.name as spouseidrelationLkdDesc  
                                        FROM customeruser  
                                        LEFT JOIN customer customerLkd ON customeruser.CUSTOMERID = customerLkd.ID LEFT JOIN relation relationLkd ON customeruser.SPOUSEID = relationLkd.ID  
                                        ORDER BY customeruser.ID 
                                        " />
				<entry key="INSERT_Customeruser"
					value="INSERT INTO customeruser (ACCESSKEY,JOBTXT,MARRIED,ORGTXT,ORGUNIT,POSITION,USERFUNCTION,WEDDINGANNIVERSARY,ID,CUSTOMERID,SPOUSEID,ISDELETED)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)  
                                        " />
				<entry key="INSERT_Customeruser"
					value="INSERT INTO customeruser (ACCESSKEY,JOBTXT,MARRIED,ORGTXT,ORGUNIT,POSITION,USERFUNCTION,WEDDINGANNIVERSARY,ID,CUSTOMERID,SPOUSEID,ISDELETED, ISADDITIONALUSER, ISPENDING)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)  
                                        " />
				<entry key="UPDATE_Customeruser_BY_ID"
					value="UPDATE customeruser SET MARRIED = ?, POSITION = ?, USERFUNCTION = ?, WEDDINGANNIVERSARY = ?, SPOUSEID = ?, ISDELETED = ? ,  ISPENDING = ?  WHERE ID = ? " />
				<entry key="SELECT_Customeruser_BY_ID"
					value=" SELECT customeruser.ACCESSKEY,customeruser.JOBTXT,customeruser.MARRIED,customeruser.ORGTXT,customeruser.ORGUNIT,customeruser.POSITION,customeruser.USERFUNCTION,customeruser.WEDDINGANNIVERSARY,customeruser.ID,customeruser.CUSTOMERID,customeruser.SPOUSEID,customeruser.ISDELETED , customerCUSTOMERIDLkd.customername as customeridcustomerLkdDesc  , relationSPOUSEIDLkd.given as spouseidrelationLkdDesc  
                                        FROM customeruser  
                                        LEFT JOIN customer customerCUSTOMERIDLkd ON customeruser.CUSTOMERID = customerCUSTOMERIDLkd.ID LEFT JOIN relation relationSPOUSEIDLkd ON customeruser.SPOUSEID = relationSPOUSEIDLkd.ID  
                                        where customeruser.ID= ?
                                        ORDER BY customeruser.ID 
                                        " />
				<entry key="SELECT_Customeruser_By_FKId"
					value="SELECT customeruser.ACCESSKEY,customeruser.JOBTXT,customeruser.MARRIED,customeruser.ORGTXT,customeruser.ORGUNIT,customeruser.POSITION,customeruser.USERFUNCTION,customeruser.WEDDINGANNIVERSARY,customeruser.ID,customeruser.CUSTOMERID,customeruser.SPOUSEID,customeruser.ISDELETED
                                        FROM customeruser  
                                        where customeruser.ID = ?  
                                        " />
				<entry key="SELECT_Customeruser_By_FKCustomerid"
					value="SELECT customeruser.ACCESSKEY,customeruser.JOBTXT,customeruser.MARRIED,customeruser.ORGTXT,customeruser.ORGUNIT,customeruser.POSITION,customeruser.USERFUNCTION,customeruser.WEDDINGANNIVERSARY,customeruser.ID,customeruser.CUSTOMERID,customeruser.SPOUSEID,customeruser.ISDELETED
                                        FROM customeruser  
                                        where customeruser.CUSTOMERID = ?  
                                        " />
				<entry key="SELECT_Customeruser_By_FKSpouseid"
					value="SELECT customeruser.ACCESSKEY,customeruser.JOBTXT,customeruser.MARRIED,customeruser.ORGTXT,customeruser.ORGUNIT,customeruser.POSITION,customeruser.USERFUNCTION,customeruser.WEDDINGANNIVERSARY,customeruser.ID,customeruser.CUSTOMERID,customeruser.SPOUSEID,customeruser.ISDELETED
                                        FROM customeruser  
                                        where customeruser.SPOUSEID = ?  
                                        " />
				<!--// Queries For Usergroup -->
				<entry key="SEARCH_Usergroup"
					value="SELECT usergroup.ID,usergroup.CREATEDATE,usergroup.CREATOR,usergroup.ENTITY_UID,usergroup.MODIFIER,usergroup.UPDATEDATE,usergroup.OPTLOCK,usergroup.DESCRIPTION,usergroup.NAME,usergroup.SYSTEMGROUP,usergroup.COMPANYID,usergroup.ISDELETED , COMPANYIDLkd.name as companyidcompanyLkdDesc
                                        FROM usergroup 
                                        LEFT JOIN company COMPANYIDLkd ON usergroup.COMPANYID = COMPANYIDLkd.ID 
                                        where 1=1  AND ID=?  
                                        ORDER BY usergroup.ID 
                                        " />
				<entry key="SELECT_ALL_Usergroup"
					value="SELECT usergroup.ID,usergroup.CREATEDATE,usergroup.CREATOR,usergroup.ENTITY_UID,usergroup.MODIFIER,usergroup.UPDATEDATE,usergroup.OPTLOCK,usergroup.DESCRIPTION,usergroup.NAME,usergroup.SYSTEMGROUP,usergroup.COMPANYID,usergroup.ISDELETED , companyLkd.name as companyidcompanyLkdDesc 
                                        FROM usergroup 
                                        LEFT JOIN company companyLkd ON usergroup.COMPANYID = companyLkd.ID 
                                        ORDER BY usergroup.ID
                                        " />
				<entry key="INSERT_Usergroup"
					value="INSERT INTO usergroup (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,DESCRIPTION,NAME,SYSTEMGROUP,COMPANYID,ISDELETED)
                                         VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
                                        " />
				<entry key="DELETE_Usergroup_BY_ID"
					value="DELETE from usergroup where ID= ?  " />
				<entry key="UPDATE_Usergroup_BY_ID"
					value="UPDATE usergroup SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, DESCRIPTION = ?, NAME = ?, SYSTEMGROUP = ?, COMPANYID = ?, ISDELETED = ? 
                                        WHERE ID=? 
                                        " />
				<entry key="SELECT_Usergroup_BY_ID"
					value=" SELECT usergroup.ID,usergroup.CREATEDATE,usergroup.CREATOR,usergroup.ENTITY_UID,usergroup.MODIFIER,usergroup.UPDATEDATE,usergroup.OPTLOCK,usergroup.DESCRIPTION,usergroup.NAME,usergroup.SYSTEMGROUP,usergroup.COMPANYID,usergroup.ISDELETED , companyCOMPANYIDLkd.name as companyidcompanyLkdDesc 
                                        FROM usergroup 
                                        LEFT JOIN company companyCOMPANYIDLkd ON usergroup.COMPANYID = companyCOMPANYIDLkd.ID 
                                        where usergroup.ID= ? 
                                        ORDER BY usergroup.ID
                                        " />
				<entry key="SELECT_Usergroup_By_FKCompanyid"
					value="SELECT usergroup.ID,usergroup.CREATEDATE,usergroup.CREATOR,usergroup.ENTITY_UID,usergroup.MODIFIER,usergroup.UPDATEDATE,usergroup.OPTLOCK,usergroup.DESCRIPTION,usergroup.NAME,usergroup.SYSTEMGROUP,usergroup.COMPANYID,usergroup.ISDELETED  
                                        FROM usergroup 
                                        where usergroup.COMPANYID = ? 
                                        " />
				<!--// Queries For Address -->
				<entry key="SEARCH_Address"
					value="SELECT address.ID,address.CREATEDATE,address.CREATOR,address.ENTITY_UID,address.MODIFIER,address.UPDATEDATE,address.OPTLOCK,address.FLOOR,address.HOUSENUMBER,address.NAME,address.STREETNAME,address.STREETSIDE,address.LOCATIONID,address.ISDELETED , LOCATIONIDLkd.name as locationidlocationLkdDesc 
                                        FROM address  
                                        LEFT JOIN location LOCATIONIDLkd ON address.LOCATIONID = LOCATIONIDLkd.ID  
                                        where 1=1  AND ID=?
                                        ORDER BY address.ID  
                                        " />
				<entry key="SELECT_ALL_Address"
					value="SELECT address.ID,address.CREATEDATE,address.CREATOR,address.ENTITY_UID,address.MODIFIER,address.UPDATEDATE,address.OPTLOCK,address.FLOOR,address.HOUSENUMBER,address.NAME,address.STREETNAME,address.STREETSIDE,address.LOCATIONID,address.ISDELETED , locationLkd.name as locationidlocationLkdDesc  
                                        FROM address  
                                        LEFT JOIN location locationLkd ON address.LOCATIONID = locationLkd.ID  
                                        ORDER BY address.ID 
                                        " />

				<entry key="DELETE_Address_BY_ID"
					value="DELETE from address where ID= ?  " />
				<entry key="UPDATE_Address_BY_ID"
					value="UPDATE address SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, FLOOR = ?, HOUSENUMBER = ?, NAME = ?, STREETNAME = ?, STREETSIDE = ?, LOCATIONID = ?, ISDELETED = ?  
                                        WHERE ID=?  
                                        " />
				<entry key="SELECT_Address_BY_ID"
					value=" SELECT address.ID,address.CREATEDATE,address.CREATOR,address.ENTITY_UID,address.MODIFIER,address.UPDATEDATE,address.OPTLOCK,address.FLOOR,address.HOUSENUMBER,address.NAME,address.STREETNAME,address.STREETSIDE,address.LOCATIONID,address.ISDELETED
                                        FROM address  
                                        where address.ID= ?  
                                        ORDER BY address.ID 
                                        " />
				<entry key="SELECT_Address_By_FKLocationid"
					value="SELECT address.ID,address.CREATEDATE,address.CREATOR,address.ENTITY_UID,address.MODIFIER,address.UPDATEDATE,address.OPTLOCK,address.FLOOR,address.HOUSENUMBER,address.NAME,address.STREETNAME,address.STREETSIDE,address.LOCATIONID,address.ISDELETED
                                        FROM address  
                                        where address.LOCATIONID = ?  
                                        " />
				<!--// Queries For Contact -->
				<entry key="SEARCH_Contact"
					value="SELECT contact.ID,contact.CREATEDATE,contact.CREATOR,contact.ENTITY_UID,contact.MODIFIER,contact.UPDATEDATE,contact.OPTLOCK,contact.EMAIL,contact.EXTENSION,contact.FAX,contact.LANDLINE,contact.MOBILE,contact.NAME,contact.URI,contact.ADDRESSID,contact.ISDELETED , ADDRESSIDLkd.name as addressidaddressLkdDesc  
                                        FROM contact
                                        LEFT JOIN address ADDRESSIDLkd ON contact.ADDRESSID = ADDRESSIDLkd.ID
                                        where 1=1  AND ID=? 
                                        ORDER BY contact.ID
                                        " />
				<entry key="SELECT_ALL_Contact"
					value="SELECT contact.ID,contact.CREATEDATE,contact.CREATOR,contact.ENTITY_UID,contact.MODIFIER,contact.UPDATEDATE,contact.OPTLOCK,contact.EMAIL,contact.EXTENSION,contact.FAX,contact.LANDLINE,contact.MOBILE,contact.NAME,contact.URI,contact.ADDRESSID,contact.ISDELETED , addressLkd.name as addressidaddressLkdDesc
                                        FROM contact
                                        LEFT JOIN address addressLkd ON contact.ADDRESSID = addressLkd.ID
                                        ORDER BY contact.ID  
                                        " />
				<entry key="INSERT_Contact"
					value="INSERT INTO contact (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,EMAIL,EXTENSION,FAX,LANDLINE,MOBILE,NAME,URI,ADDRESSID,ISDELETED)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                        " />
				<entry key="DELETE_Contact_BY_ID"
					value="DELETE from contact where ID= ?  " />
				<entry key="UPDATE_Contact_BY_ID"
					value="UPDATE contact SET ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, EMAIL = ?, EXTENSION = ?, FAX = ?, LANDLINE = ?, MOBILE = ?, NAME = ?, URI = ?, ADDRESSID = ?, ISDELETED = ?
                                        WHERE ID=?
                                        " />
				<entry key="SELECT_Contact_BY_ID"
					value="SELECT contact.ID,contact.CREATEDATE,contact.CREATOR,contact.ENTITY_UID,contact.MODIFIER,contact.UPDATEDATE,contact.OPTLOCK,contact.EMAIL,contact.EXTENSION,contact.FAX,contact.LANDLINE,contact.MOBILE,contact.NAME,contact.URI,contact.ADDRESSID,contact.ISDELETED,addressADDRESSIDLkd.name as addressidaddressLkdDesc
                                        FROM contact with (NOLOCK)
                                        LEFT JOIN address addressADDRESSIDLkd with (NOLOCK) ON contact.ADDRESSID = addressADDRESSIDLkd.ID
                                        where contact.ID= ? AND contact.ISDELETED = 0
                                        ORDER BY contact.ID  
                                        " />
				<entry key="SELECT_Contact_By_FKAddressid"
					value="SELECT contact.ID,contact.CREATEDATE,contact.CREATOR,contact.ENTITY_UID,contact.MODIFIER,contact.UPDATEDATE,contact.OPTLOCK,contact.EMAIL,contact.EXTENSION,contact.FAX,contact.LANDLINE,contact.MOBILE,contact.NAME,contact.URI,contact.ADDRESSID,contact.ISDELETED 
                                        FROM contact
                                        where contact.ADDRESSID = ?
                                        " />
				<!-- Start :Query modified by Ravindra to add company id -->

				<!-- <entry key="Validate_EmailIdExist" value="SELECT COUNT(CUSTOMER.CODE) 
					FROM CUSTOMER INNER JOIN CONTACT ON CONTACT.ID = CUSTOMER.MAINCONTACTID WHERE 
					contact.Email = ? "/> -->

				<entry key="Validate_EmailIdExist"
					value="SELECT COUNT(u.loginId) FROM [user] u
										INNER JOIN CONTACT c ON c.ID = u.MAINCONTACTID
										WHERE c.Email =? and u.ISDELETED=0 and c.ISDELETED=0 and u.user_status=1" />
				<!-- End :Query modified by Ravindra to add company id -->

				<entry key="Validate_EmailIdExistForUser"
					value="SELECT Count(c.id) 
                                        FROM contact c
                                        INNER JOIN [user] u ON u.mainContactId=c.id
                                        where c.Email = ? and u.user_id!=? and u.user_status=1
                                        " />
				<!--// Queries For Location -->
				<entry key="SEARCH_Location"
					value="SELECT location.ID,location.CREATEDATE,location.CREATOR,location.ENTITY_UID,location.MODIFIER,location.UPDATEDATE,location.OPTLOCK,location.CITY,location.COUNTRY,location.POSTALCODE,location.STATEPROV,location.ISDELETED
                                        FROM location 
                                        where 1=1  AND ID=?  
                                        ORDER BY location.ID 
                                        " />
				<entry key="SELECT_ALL_Location"
					value="SELECT location.ID,location.CREATEDATE,location.CREATOR,location.ENTITY_UID,location.MODIFIER,location.UPDATEDATE,location.OPTLOCK,location.CITY,location.COUNTRY,location.POSTALCODE,location.STATEPROV,location.ISDELETED
                                        FROM location 
                                        ORDER BY location.ID
                                        " />

				<entry key="DELETE_Location_BY_ID"
					value="DELETE from location where ID= ?  " />
				<entry key="UPDATE_Location_BY_ID"
					value="UPDATE location SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, CITY = ?, COUNTRY = ?, POSTALCODE = ?, STATEPROV = ?, ISDELETED = ? 
                                        WHERE ID=? 
                                        " />
				<entry key="SELECT_Location_BY_ID"
					value=" SELECT location.ID,location.CREATEDATE,location.CREATOR,location.ENTITY_UID,location.MODIFIER,location.UPDATEDATE,location.OPTLOCK,location.CITY,location.COUNTRY,location.POSTALCODE,location.STATEPROV,location.ISDELETED
                                        FROM location 
                                        where location.ID= ? 
                                        ORDER BY location.ID
                                        " />
				<!--// Queries For Relation -->
				<entry key="SEARCH_Relation"
					value="SELECT relation.ID,relation.CREATEDATE,relation.CREATOR,relation.ENTITY_UID,relation.MODIFIER,relation.UPDATEDATE,relation.OPTLOCK,relation.OWNER,relation.DATEOFBIRTH,relation.FAMILY,relation.GENDER,relation.GIVEN,relation.MIDDLE,relation.PREFIX,relation.RELTYPE,relation.SUFFIX,relation.IMAGEID,relation.MAINCONTACTID,relation.ISDELETED , IMAGEIDLkd.name as imageidigimageLkdDesc , MAINCONTACTIDLkd.name as maincontactidcontactLkdDesc  
                                        FROM relation
                                        LEFT JOIN igimage IMAGEIDLkd ON relation.IMAGEID = IMAGEIDLkd.ID LEFT JOIN contact MAINCONTACTIDLkd ON relation.MAINCONTACTID = MAINCONTACTIDLkd.ID
                                        where 1=1  AND ID=? 
                                        ORDER BY relation.ID
                                        " />
				<entry key="SELECT_ALL_Relation"
					value="SELECT relation.ID,relation.CREATEDATE,relation.CREATOR,relation.ENTITY_UID,relation.MODIFIER,relation.UPDATEDATE,relation.OPTLOCK,relation.OWNER,relation.DATEOFBIRTH,relation.FAMILY,relation.GENDER,relation.GIVEN,relation.MIDDLE,relation.PREFIX,relation.RELTYPE,relation.SUFFIX,relation.IMAGEID,relation.MAINCONTACTID,relation.ISDELETED , igimageLkd.name as imageidigimageLkdDesc  , contactLkd.name as maincontactidcontactLkdDesc
                                        FROM relation
                                        LEFT JOIN igimage igimageLkd ON relation.IMAGEID = igimageLkd.ID LEFT JOIN contact contactLkd ON relation.MAINCONTACTID = contactLkd.ID
                                        ORDER BY relation.ID  
                                        " />
				<entry key="INSERT_Relation"
					value="INSERT INTO relation (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,OWNER,DATEOFBIRTH,FAMILY,GENDER,GIVEN,MIDDLE,PREFIX,RELTYPE,SUFFIX,IMAGEID,MAINCONTACTID,ISDELETED)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                        " />
				<entry key="DELETE_Relation_BY_ID"
					value="DELETE from relation where ID= ?  " />
				<entry key="UPDATE_Relation_BY_ID"
					value="UPDATE relation SET  GENDER = ?, GIVEN = ?, MODIFIER = ?, UPDATEDATE = ? WHERE ID=?" />
				<entry key="SELECT_Relation_BY_ID"
					value=" SELECT relation.ID,relation.CREATEDATE,relation.CREATOR,relation.ENTITY_UID,
													relation.MODIFIER,relation.UPDATEDATE,relation.OPTLOCK,relation.OWNER,
													relation.DATEOFBIRTH,relation.FAMILY,relation.GENDER,relation.GIVEN,relation.MIDDLE,
													relation.PREFIX,relation.RELTYPE,relation.SUFFIX,relation.IMAGEID,relation.MAINCONTACTID,relation.ISDELETED
											FROM relation
											
											where relation.ID= ? 
                                        " />
				<entry key="count_Relation_BY_ID"
					value=" SELECT count(*) FROM relation where relation.ID= ?    " />
				<entry key="SELECT_Relation_By_FKImageid"
					value="SELECT relation.ID,relation.CREATEDATE,relation.CREATOR,relation.ENTITY_UID,relation.MODIFIER,relation.UPDATEDATE,relation.OPTLOCK,relation.OWNER,relation.DATEOFBIRTH,relation.FAMILY,relation.GENDER,relation.GIVEN,relation.MIDDLE,relation.PREFIX,relation.RELTYPE,relation.SUFFIX,relation.IMAGEID,relation.MAINCONTACTID,relation.ISDELETED 
                                        FROM relation
                                        where relation.IMAGEID = ?
                                        " />
				<entry key="SELECT_Relation_By_FKMaincontactid"
					value="SELECT relation.ID,relation.CREATEDATE,relation.CREATOR,relation.ENTITY_UID,relation.MODIFIER,relation.UPDATEDATE,relation.OPTLOCK,relation.OWNER,relation.DATEOFBIRTH,relation.FAMILY,relation.GENDER,relation.GIVEN,relation.MIDDLE,relation.PREFIX,relation.RELTYPE,relation.SUFFIX,relation.IMAGEID,relation.MAINCONTACTID,relation.ISDELETED 
                                        FROM relation
                                        where relation.MAINCONTACTID = ?
                                        " />

				<!--// Queries For Customergroup -->
				<entry key="SEARCH_Customergroup"
					value="SELECT customergroup.ID,customergroup.CREATEDATE,customergroup.CREATOR,customergroup.ENTITY_UID,customergroup.MODIFIER,customergroup.UPDATEDATE,customergroup.OPTLOCK,customergroup.ACTIVE,customergroup.CODE,customergroup.NAME,customergroup.ENTERPRISEID,customergroup.ISDELETED
										FROM customergroup
										LEFT JOIN enterprise enterpriseLkd ON customergroup.ENTERPRISEID = enterpriseLkd.ID
										LEFT JOIN company companyLkd ON enterpriseLkd.COMPANYID = companyLkd.ID
										where customergroup.ISDELETED=0 AND customergroup.active like ? AND customergroup.CODE like ?
										and companyLkd.ID=?
										ORDER BY customergroup.ID
                                        " />
				<entry key="SEARCH_Customergroup_by_name"
					value="SELECT customergroup.ID,customergroup.CREATEDATE,customergroup.CREATOR,customergroup.ENTITY_UID,customergroup.MODIFIER,customergroup.UPDATEDATE,customergroup.OPTLOCK,customergroup.ACTIVE,customergroup.CODE,customergroup.NAME,customergroup.ENTERPRISEID,customergroup.ISDELETED
										FROM customergroup
										LEFT JOIN enterprise enterpriseLkd ON customergroup.ENTERPRISEID = enterpriseLkd.ID
										LEFT JOIN company companyLkd ON enterpriseLkd.COMPANYID = companyLkd.ID
										where customergroup.ISDELETED=0 AND customergroup.NAME like ?
										and companyLkd.ID=? 
										ORDER BY customergroup.ID
                                        " />
				<entry key="SELECT_ALL_Customergroup"
					value="SELECT customergroup.ID,customergroup.CREATEDATE,customergroup.CREATOR,customergroup.ENTITY_UID,customergroup.MODIFIER,customergroup.UPDATEDATE,customergroup.OPTLOCK,customergroup.ACTIVE,customergroup.CODE,customergroup.NAME,customergroup.ENTERPRISEID,customergroup.ISDELETED 
                                        FROM customergroup 
                                        LEFT JOIN enterprise enterpriseLkd ON customergroup.ENTERPRISEID = enterpriseLkd.ID 
                                        LEFT JOIN company companyLkd ON enterpriseLkd.COMPANYID = companyLkd.ID
                                        where customergroup.ISDELETED=0
                                        and companyLkd.ID=?
                                        ORDER BY customergroup.ID
                                        " />
				<entry key="SELECT_CustomerGroup_BY_ID"
					value="SELECT customergroup.ID,customergroup.CREATEDATE,customergroup.CREATOR,customergroup.ENTITY_UID,customergroup.MODIFIER,customergroup.UPDATEDATE,customergroup.OPTLOCK,customergroup.ACTIVE,customergroup.CODE,customergroup.NAME,customergroup.ENTERPRISEID,customergroup.ISDELETED 
                                        FROM customergroup 
                                        where customergroup.ID=? AND customergroup.ISDELETED=0
                                        " />
				<entry key="SELECT_CustomerGroup_BY_Code"
					value="SELECT customergroup.ID,customergroup.CREATEDATE,customergroup.CREATOR,customergroup.ENTITY_UID,customergroup.MODIFIER,customergroup.UPDATEDATE,customergroup.OPTLOCK,customergroup.ACTIVE,customergroup.CODE,customergroup.NAME,customergroup.ENTERPRISEID,customergroup.ISDELETED 
                                        FROM customergroup 
                                        where customergroup.CODE=? AND customergroup.ENTERPRISEID = ? AND customergroup.ISDELETED=0
                                        " />
				<entry key="INSERT_Customergroup"
					value="INSERT INTO customergroup (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,ACTIVE,CODE,NAME,ENTERPRISEID,ISDELETED)
                                         VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
                                        " />
				<entry key="DELETE_Customergroup_BY_ID"
					value="UPDATE customergroup SET MODIFIER = ?, UPDATEDATE = ?, ISDELETED = ?
										 where ID= ?  
										 " />
				<entry key="UPDATE_Customergroup_BY_ID"
					value="UPDATE customergroup SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, ACTIVE = ?, CODE = ?, NAME = ?, ENTERPRISEID = ?, ISDELETED = ? 
                                        WHERE ID=? 
                                       " />
				<entry key="FIND_ENTERPRISE_BY_COMPANY_ID"
					value="select e.ID,e.CREATEDATE,e.CREATOR,e.ENTITY_UID,e.MODIFIER,e.UPDATEDATE,e.OPTLOCK,e.CODE,
										e.CONTROLLINGAREA,e.COUNTRY,e.COUNTRYISO,e.COMPANYID,e.ISDELETED 
										FROM enterprise e 
										where e.ISDELETED=0 and e.COMPANYID = ? 
										" />
				<!--// Queries For EmailTemplate -->
				<entry key="SELECT_EmailTemplate_BY_TemplateName"
					value=" SELECT email_template.id, email_template.templateName, email_template.template_type,email_template.language,email_template.subject,email_template.mail_body,email_template.comment,email_template.created_by,email_template.created_time,email_template.updated_by,email_template.updated_time
										FROM email_template 
										where email_template.templateName = ? 
											" />
				<!--// Queries For Company -->
				<!-- <entry key="SEARCH_Company" value="SELECT company.ID,company.CREATEDATE,company.CREATOR,company.ENTITY_UID,company.MODIFIER,company.UPDATEDATE,company.OPTLOCK,company.COMPANYID,company.CURRENCY,company.FAILEDLOGINS,company.HOMEURL,company.INITIALIZED,company.KEYOBJ,company.LOCALE,company.LONGDATE,company.DOMAIN,company.NAME,company.OTHERDATE,company.PASSWORDRESET,company.PASSWORDTRACKER,company.PORTALURL,company.SHORTDATE,company.TIMEZONE,company.COMPANYLOGOID,company.MAINCONTACTID,company.PORTALLOGOID 
					, COMPANYLOGOIDLkd.name as companylogoidigimageLkdDesc , MAINCONTACTIDLkd.name 
					as maincontactidcontactLkdDesc , PORTALLOGOIDLkd.name as portallogoidigimageLkdDesc 
					FROM company LEFT JOIN igimage COMPANYLOGOIDLkd ON company.COMPANYLOGOID 
					= COMPANYLOGOIDLkd.ID LEFT JOIN contact MAINCONTACTIDLkd ON company.MAINCONTACTID 
					= MAINCONTACTIDLkd.ID LEFT JOIN igimage PORTALLOGOIDLkd ON company.PORTALLOGOID 
					= PORTALLOGOIDLkd.ID where 1=1 AND ID=? ORDER BY company.ID "/> <entry key="SELECT_ALL_Company" 
					value="SELECT company.ID,company.CREATEDATE,company.CREATOR,company.ENTITY_UID,company.MODIFIER,company.UPDATEDATE,company.OPTLOCK,company.COMPANYID,company.CURRENCY,company.FAILEDLOGINS,company.HOMEURL,company.INITIALIZED,company.KEYOBJ,company.LOCALE,company.LONGDATE,company.DOMAIN,company.NAME,company.OTHERDATE,company.PASSWORDRESET,company.PASSWORDTRACKER,company.PORTALURL,company.SHORTDATE,company.TIMEZONE,company.COMPANYLOGOID,company.MAINCONTACTID,company.PORTALLOGOID 
					, igimageLkd.name as companylogoidigimageLkdDesc , contactLkd.name as maincontactidcontactLkdDesc 
					, igimageLkd.name as portallogoidigimageLkdDesc FROM company LEFT JOIN igimage 
					igimageLkd ON company.COMPANYLOGOID = igimageLkd.ID LEFT JOIN contact contactLkd 
					ON company.MAINCONTACTID = contactLkd.ID LEFT JOIN igimage igimageLkd ON 
					company.PORTALLOGOID = igimageLkd.ID ORDER BY company.ID "/> <entry key="INSERT_Company" 
					value="INSERT INTO company (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,COMPANYID,CURRENCY,FAILEDLOGINS,HOMEURL,INITIALIZED,KEYOBJ,LOCALE,LONGDATE,DOMAIN,NAME,OTHERDATE,PASSWORDRESET,PASSWORDTRACKER,PORTALURL,SHORTDATE,TIMEZONE,COMPANYLOGOID,MAINCONTACTID,PORTALLOGOID) 
					VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
					?, ?, ?, ?) "/> <entry key="DELETE_Company_BY_ID" value="DELETE from company 
					where ID= ? "/> <entry key="UPDATE_Company_BY_ID" value="UPDATE company SET 
					CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, 
					OPTLOCK = ?, COMPANYID = ?, CURRENCY = ?, FAILEDLOGINS = ?, HOMEURL = ?, 
					INITIALIZED = ?, KEYOBJ = ?, LOCALE = ?, LONGDATE = ?, DOMAIN = ?, NAME = 
					?, OTHERDATE = ?, PASSWORDRESET = ?, PASSWORDTRACKER = ?, PORTALURL = ?, 
					SHORTDATE = ?, TIMEZONE = ?, COMPANYLOGOID = ?, MAINCONTACTID = ?, PORTALLOGOID 
					= ? WHERE ID=? "/> <entry key="SELECT_Company_By_FKCompanylogoid" value="SELECT 
					company.ID,company.CREATEDATE,company.CREATOR,company.ENTITY_UID,company.MODIFIER,company.UPDATEDATE,company.OPTLOCK,company.COMPANYID,company.CURRENCY,company.FAILEDLOGINS,company.HOMEURL,company.INITIALIZED,company.KEYOBJ,company.LOCALE,company.LONGDATE,company.DOMAIN,company.NAME,company.OTHERDATE,company.PASSWORDRESET,company.PASSWORDTRACKER,company.PORTALURL,company.SHORTDATE,company.TIMEZONE,company.COMPANYLOGOID,company.MAINCONTACTID,company.PORTALLOGOID 
					FROM company where company.COMPANYLOGOID = ? "/> <entry key="SELECT_Company_By_FKMaincontactid" 
					value="SELECT company.ID,company.CREATEDATE,company.CREATOR,company.ENTITY_UID,company.MODIFIER,company.UPDATEDATE,company.OPTLOCK,company.COMPANYID,company.CURRENCY,company.FAILEDLOGINS,company.HOMEURL,company.INITIALIZED,company.KEYOBJ,company.LOCALE,company.LONGDATE,company.DOMAIN,company.NAME,company.OTHERDATE,company.PASSWORDRESET,company.PASSWORDTRACKER,company.PORTALURL,company.SHORTDATE,company.TIMEZONE,company.COMPANYLOGOID,company.MAINCONTACTID,company.PORTALLOGOID 
					FROM company where company.MAINCONTACTID = ? "/> <entry key="SELECT_Company_By_FKPortallogoid" 
					value="SELECT company.ID,company.CREATEDATE,company.CREATOR,company.ENTITY_UID,company.MODIFIER,company.UPDATEDATE,company.OPTLOCK,company.COMPANYID,company.CURRENCY,company.FAILEDLOGINS,company.HOMEURL,company.INITIALIZED,company.KEYOBJ,company.LOCALE,company.LONGDATE,company.DOMAIN,company.NAME,company.OTHERDATE,company.PASSWORDRESET,company.PASSWORDTRACKER,company.PORTALURL,company.SHORTDATE,company.TIMEZONE,company.COMPANYLOGOID,company.MAINCONTACTID,company.PORTALLOGOID 
					FROM company where company.PORTALLOGOID = ? "/> -->

				<entry key="Count_Company_By_Id"
					value="SELECT  COUNT(c.ID) FROM company c where c.COMPANYID = ?" />
				<entry key="Get_Company_By_Id"
					value="SELECT  c.ID FROM company c where c.COMPANYID = ?" />
				<!--// Queries For Zonalhead -->
				<entry key="SEARCH_Zonalhead"
					value="SELECT zonalhead.ID,zonalhead.CREATEDATE,zonalhead.CREATOR,zonalhead.ENTITY_UID,zonalhead.MODIFIER,zonalhead.UPDATEDATE,zonalhead.OPTLOCK,zonalhead.CODE,zonalhead.DESCRIPTION,zonalhead.SALESREGIONID , SALESREGIONIDLkd.name as salesregionidsalesregionLkdDesc
                                        FROM zonalhead 
                                        LEFT JOIN salesregion SALESREGIONIDLkd ON zonalhead.SALESREGIONID = SALESREGIONIDLkd.ID 
                                        where 1=1  AND ID=?   AND zonalhead.IsDeleted = 0
                                        ORDER BY zonalhead.ID 
                                        " />
				<entry key="SELECT_ALL_Zonalhead"
					value="SELECT zonalhead.ID,zonalhead.CREATEDATE,zonalhead.CREATOR,zonalhead.ENTITY_UID,zonalhead.MODIFIER,zonalhead.UPDATEDATE,zonalhead.OPTLOCK,zonalhead.CODE,zonalhead.DESCRIPTION,zonalhead.SALESREGIONID , salesregionLkd.name as salesregionDescription 
                                        FROM zonalhead 
                                        LEFT JOIN salesregion salesregionLkd ON zonalhead.SALESREGIONID = salesregionLkd.ID 
                                        where zonalhead.isDeleted = 0
                                        ORDER BY zonalhead.ID
                                        " />
				<entry key="INSERT_Zonalhead"
					value="INSERT INTO zonalhead (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,CODE,DESCRIPTION,SALESREGIONID, IsDeleted)
                                         VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0) 
                                        " />
				<entry key="DELETE_Zonalhead_BY_ID"
					value="DELETE from zonalhead where ID= ?  " />

				<entry key="UPDATE_Zonalhead_BY_ID"
					value="UPDATE zonalhead SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, CODE = ?, DESCRIPTION = ?, SALESREGIONID = ? 
                                        WHERE ID=? 
                                        " />
				<entry key="UPDATE_ISDeleted_Zonalhead_BY_ID"
					value="UPDATE zonalhead SET isDeleted = 1 WHERE ID=? " />
				<entry key="SELECT_Zonalhead_BY_ID"
					value=" SELECT zonalhead.ID,zonalhead.CREATEDATE,zonalhead.CREATOR,zonalhead.ENTITY_UID,zonalhead.MODIFIER,zonalhead.UPDATEDATE,zonalhead.OPTLOCK,zonalhead.CODE,zonalhead.DESCRIPTION,zonalhead.SALESREGIONID , salesregionSALESREGIONIDLkd.name as salesregionDescription 
                                        FROM zonalhead 
                                        LEFT JOIN salesregion salesregionSALESREGIONIDLkd ON zonalhead.SALESREGIONID = salesregionSALESREGIONIDLkd.ID 
                                        where zonalhead.ID= ?  And zonalhead.isDeleted =0
                                        ORDER BY zonalhead.ID
                                        " />
				<entry key="SELECT_Zonalhead_By_FKSalesregionid"
					value="SELECT zonalhead.ID,zonalhead.CREATEDATE,zonalhead.CREATOR,zonalhead.ENTITY_UID,zonalhead.MODIFIER,zonalhead.UPDATEDATE,zonalhead.OPTLOCK,zonalhead.CODE,zonalhead.DESCRIPTION,zonalhead.SALESREGIONID  
                                        FROM zonalhead 
                                        where zonalhead.SALESREGIONID = ? 
                                        " />
				<entry key="SELECT_SalesRegion"
					value="SELECT id as value, name as label from SALESREGION Order by  name " />


				<entry key="SEARCH_User_By_Emailid_CompanyId"
					value="SELECT u.user_id,u.loginId,u.user_status,u.user_email_id,u.created_by,
	 u.created_time,u.updated_by,u.updated_time,u.givenName, u.MiddleName,
	u.FamilyName,u.contact_no,u.address,u.COMPANYID as companyId, c.email, c.mobile  FROM [user] u inner join CONTACT c on u.mainContactId = c.ID	
	where  u.user_status=1 and  c.EMAIL like ?  AND u.COMPANYID = ? AND c.ISDELETED=0 AND u.ISDELETED=0" />

				<entry key="SEARCH_User_Only_By_Emailid"
					value="SELECT u.user_id,u.loginId,u.user_status,u.user_email_id,u.created_by,
	 u.created_time,u.updated_by,u.updated_time,u.givenName, u.MiddleName,
	u.FamilyName,u.contact_no,u.address,u.COMPANYID as companyId, c.email, c.mobile  FROM [user] u inner join CONTACT c on u.mainContactId = c.ID	
	where  u.user_status=1 and  c.EMAIL like ? AND c.ISDELETED=0 AND u.ISDELETED=0" />

				<entry key="SEARCH_User_By_Mobile_CompanyId"
					value="SELECT u.user_id,u.loginId,u.user_status,u.user_email_id,u.created_by,
	 u.created_time,u.updated_by,u.updated_time,u.givenName, u.MiddleName,
	u.FamilyName,u.contact_no,u.address,u.COMPANYID as companyId, c.email, c.mobile FROM [user] u inner join CONTACT c on u.mainContactId = c.ID	
	where  c.MOBILE like ?  AND u.COMPANYID = ? AND c.ISDELETED=0 AND u.ISDELETED=0" />

				<entry key="SEARCH_User_By_Mobile"
					value="SELECT u.user_id,u.loginId,u.user_status,u.user_email_id,u.created_by,
	 u.created_time,u.updated_by,u.updated_time,u.givenName, u.MiddleName,
	u.FamilyName,u.contact_no,u.address,u.COMPANYID as companyId, c.email, c.mobile FROM [user] u inner join CONTACT c on u.mainContactId = c.ID	
	where  c.MOBILE like ? AND c.ISDELETED=0 AND u.ISDELETED=0" />


				<entry key="SELECT_ALL_SalesOffice"
					value="SELECT id as value, name as label from SALESOFFICE Order by  name " />
				<entry key="SELECT_ALL_SalesUnit"
					value="SELECT id as value, name as label from SALESUNIT Order by  name " />
				<entry key="Get_SalesOfficeId_By_Code_Company"
					value="SELECT so.id from 
					SALESOFFICE so Inner Join SALESUNIT su ON su.id = so.salesunitId Inner Join 
					SALESREGION sr on sr.id= su.SALESREGIONID Inner Join ENTERPRISE e on e.id 
					= sr.ENTERPRISEID Inner Join COMPANY c ON c.id = e.companyId where so.code 
					= ? and c.id=?" />
				<entry key="Get_SalesOfficeId_By_Code"
					value="SELECT so.id  from SALESOFFICE so where so.code = ?" />
				<!-- <entry key="COUNT_SalesOfficeId_By_Code" value="SELECT COUNT(so.id) 
					from SALESOFFICE so Inner Join SALESUNIT su ON su.id = so.salesunitId Inner 
					Join SALESREGION sr on sr.id= su.SALESREGIONID Inner Join ENTERPRISE e on 
					e.id = sr.ENTERPRISEID Inner Join COMPANY c ON c.id = e.companyId where so.code 
					= ? and c.id=?" /> -->
				<entry key="COUNT_SalesOfficeId_By_Code"
					value="SELECT COUNT(so.id)  from SALESOFFICE so where so.code = ? " />
				<entry key="Get_SalesUnitId_By_Code"
					value="SELECT su.id  from SALESUNIT su
											Inner Join SALESREGION sr on sr.id= su.SALESREGIONID
											Inner Join ENTERPRISE e on e.id = sr.ENTERPRISEID
											Inner Join COMPANY c ON c.id = e.companyId 
											
											 where su.code = ? AND c.ID = ? " />
				<entry key="COUNT_SalesUnitId_By_Code"
					value="SELECT COUNT(su.id)  
											from SALESUNIT su
											Inner Join SALESREGION sr on sr.id= su.SALESREGIONID
											Inner Join ENTERPRISE e on e.id = sr.ENTERPRISEID
											Inner Join COMPANY c ON c.id = e.companyId 
											
											 where su.code = ? AND c.ID = ? " />
				<entry key="Get_SalesGroupId_By_Code"
					value="SELECT id  from SALESGROUP where code = ? " />
				<entry key="COUNT_SalesGroupId_By_Code"
					value="SELECT COUNT(id)  from SALESGROUP where code = ? " />
				<entry key="Get_SalesOrgId_By_Code"
					value="SELECT id  from SALESORGANISATION where code = ? " />
				<entry key="COUNT_SalesOrgId_By_Code"
					value="SELECT COUNT(id)  from SALESORGANISATION where code = ? " />
				<entry key="Get_DivisionId_By_Code"
					value="SELECT id  from DIVISION where code = ? " />
				<entry key="COUNT_DivisionId_By_Code"
					value="SELECT COUNT(id)  from DIVISION where code = ? " />
				<entry key="Get_DistChannelId_By_Code"
					value="SELECT id  from DISTRIBUTIONCHANNEL where code = ? " />
				<entry key="COUNT_DistChannelId_By_Code"
					value="SELECT COUNT(id)  from DISTRIBUTIONCHANNEL where code = ? " />
				<entry key="Get_SalesAreaId_By_Code"
					value="SELECT id  from SALESAREA where SALESORGID = ? AND DIVISIONID = ? AND DISTCHANNELID = ? " />
				<entry key="COUNT_SalesAreaId_By_Code"
					value="SELECT COUNT(id)  from SALESAREA where SALESORGID = ? AND DIVISIONID = ? AND DISTCHANNELID = ? " />


				<!--// Queries For CmsIncident -->
				<entry key="SEARCH_CmsIncident"
					value="SELECT cms_incident.ID,cms_incident.CREATEDATE,cms_incident.CREATOR,cms_incident.ENTITY_UID,cms_incident.MODIFIER,cms_incident.UPDATEDATE,cms_incident.OPTLOCK,cms_incident.BATCHID,cms_incident.COMPLAINTNUMBER,cms_incident.CONTACTNUMBER,cms_incident.CUSTOMERCODE,cms_incident.DESCRIPTION,cms_incident.FEEDBACKDES,cms_incident.INCIDENTNUMBER,cms_incident.INCIDENTRATINGID,cms_incident.SALESFORCEID,cms_incident.STEADDRESS as SITEADDRESS,cms_incident.STATUS,cms_incident.SUBJECT,cms_incident.TALUKAMANDAL,cms_incident.CHAILDSUBCATEGORYID as CHILDSUBCATEGORYID ,cms_incident.ENTERPRISEID,cms_incident.INCATEGORYID,cms_incident.INSUBCATEGORYID,cms_incident.SALESOFFICEID,cms_incident.USERID , cmsChaildsubcategoryLkd.name as childSubCategoryName ,enterpriseLkd.code as enterpriseCode , cmsIncategoryLkd.name as inCategoryName , cmsInsubcategoryLkd.name as inSubCategoryName , salesofficeLkd.name as salesOfficeName, incidentRatingLkd.rating as incidentRating            
										FROM CMS_INCIDENT 
										LEFT JOIN cms_chaildsubcategory cmsChaildsubcategoryLkd ON cms_incident.CHAILDSUBCATEGORYID = cmsChaildsubcategoryLkd.ID              
										LEFT JOIN enterprise enterpriseLkd ON cms_incident.ENTERPRISEID = enterpriseLkd.ID
										LEFT JOIN company companyLkd ON companyLkd.ID = enterpriseLkd.COMPANYID              
										LEFT JOIN cms_incategory cmsIncategoryLkd ON cms_incident.INCATEGORYID = cmsIncategoryLkd.ID              
										LEFT JOIN cms_insubcategory cmsInsubcategoryLkd ON cms_incident.INSUBCATEGORYID = cmsInsubcategoryLkd.ID              
										LEFT JOIN salesoffice salesofficeLkd ON cms_incident.SALESOFFICEID = salesofficeLkd.ID 
										LEFT JOIN [user] userLkd ON cms_incident.USERID = userLkd.user_id 
										LEFT JOIN cms_incidentrating incidentRatingLkd ON cms_incident.INCIDENTRATINGID = incidentRatingLkd.ID                          
										where cms_incident.INCIDENTNUMBER like ? AND (? IS NULL OR CONVERT(VARCHAR(10), cms_incident.CREATEDATE, 101) = CONVERT(VARCHAR(10), ?, 101)) AND cms_incident.INCATEGORYID like ? AND cms_incident.STATUS like ?  AND cms_incident.COMPLAINTNUMBER like ?
										and cms_incident.USERID = ?
										and companyLkd.ID=?              
										ORDER BY cms_incident.ID                                        
                                        " />
				<entry key="SELECT_ALL_CmsIncident"
					value="SELECT cms_incident.ID,cms_incident.CREATEDATE,cms_incident.CREATOR,cms_incident.ENTITY_UID,cms_incident.MODIFIER,cms_incident.UPDATEDATE,cms_incident.OPTLOCK,cms_incident.BATCHID,cms_incident.COMPLAINTNUMBER,cms_incident.CONTACTNUMBER,cms_incident.CUSTOMERCODE,cms_incident.DESCRIPTION,cms_incident.FEEDBACKDES,cms_incident.INCIDENTNUMBER,cms_incident.INCIDENTRATINGID,cms_incident.SALESFORCEID,cms_incident.STEADDRESS as SITEADDRESS,cms_incident.STATUS,cms_incident.SUBJECT,cms_incident.TALUKAMANDAL,cms_incident.CHAILDSUBCATEGORYID as CHILDSUBCATEGORYID ,cms_incident.ENTERPRISEID,cms_incident.INCATEGORYID,cms_incident.INSUBCATEGORYID,cms_incident.SALESOFFICEID,cms_incident.USERID , cmsChaildsubcategoryLkd.name as childSubCategoryName ,enterpriseLkd.code as enterpriseCode , cmsIncategoryLkd.name as inCategoryName , cmsInsubcategoryLkd.name as inSubCategoryName , salesofficeLkd.name as salesOfficeName, incidentRatingLkd.rating as incidentRating, customerLkd.CUSTOMERNAME as customerName            
										FROM CMS_INCIDENT 
										LEFT JOIN cms_chaildsubcategory cmsChaildsubcategoryLkd ON cms_incident.CHAILDSUBCATEGORYID = cmsChaildsubcategoryLkd.ID              
										LEFT JOIN enterprise enterpriseLkd ON cms_incident.ENTERPRISEID = enterpriseLkd.ID
										LEFT JOIN company companyLkd ON companyLkd.ID = enterpriseLkd.COMPANYID              
										LEFT JOIN cms_incategory cmsIncategoryLkd ON cms_incident.INCATEGORYID = cmsIncategoryLkd.ID              
										LEFT JOIN cms_insubcategory cmsInsubcategoryLkd ON cms_incident.INSUBCATEGORYID = cmsInsubcategoryLkd.ID              
										LEFT JOIN salesoffice salesofficeLkd ON cms_incident.SALESOFFICEID = salesofficeLkd.ID 
										LEFT JOIN [user] userLkd ON cms_incident.USERID = userLkd.user_id
										LEFT JOIN customeruser customeruserLkd ON userLkd.user_id = customeruserLkd.ID 
										LEFT JOIN customer customerLkd ON customeruserLkd.CUSTOMERID = customerLkd.ID  
										LEFT JOIN cms_incidentrating incidentRatingLkd ON cms_incident.INCIDENTRATINGID = incidentRatingLkd.ID                          
										where companyLkd.ID=?              
										ORDER BY cms_incident.ID  
                                        " />
				<entry key="INSERT_CmsIncident"
					value="INSERT INTO cms_incident (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,BATCHID,COMPLAINTNUMBER,CONTACTNUMBER,CUSTOMERCODE,DESCRIPTION,FEEDBACKDES,INCIDENTNUMBER,INCIDENTRATINGID,SALESFORCEID,STEADDRESS,STATUS,SUBJECT,TALUKAMANDAL,CHAILDSUBCATEGORYID,ENTERPRISEID,INCATEGORYID,INSUBCATEGORYID,SALESOFFICEID,USERID)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                        " />
				<entry key="UPDATE_CmsIncident_BY_ID"
					value="UPDATE cms_incident SET MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, BATCHID = ?, COMPLAINTNUMBER = ?, CONTACTNUMBER = ?, CUSTOMERCODE = ?, DESCRIPTION = ?, FEEDBACKDES = ?, INCIDENTNUMBER = ?, INCIDENTRATINGID = ?, SALESFORCEID = ?, STEADDRESS = ?, STATUS = ?, SUBJECT = ?, TALUKAMANDAL = ?, CHAILDSUBCATEGORYID = ?, ENTERPRISEID = ?, INCATEGORYID = ?, INSUBCATEGORYID = ?, SALESOFFICEID = ?, USERID = ?
                                        WHERE ID=?
                                        " />
				<entry key="SELECT_CmsIncident_By_FKUserid"
					value="SELECT cms_incident.ID,cms_incident.CREATEDATE,cms_incident.CREATOR,cms_incident.ENTITY_UID,cms_incident.MODIFIER,cms_incident.UPDATEDATE,cms_incident.OPTLOCK,cms_incident.BATCHID,cms_incident.COMPLAINTNUMBER,cms_incident.CONTACTNUMBER,cms_incident.CUSTOMERCODE,cms_incident.DESCRIPTION,cms_incident.FEEDBACKDES,cms_incident.INCIDENTNUMBER,cms_incident.INCIDENTRATINGID,cms_incident.SALESFORCEID,cms_incident.STEADDRESS as SITEADDRESS,cms_incident.STATUS,cms_incident.SUBJECT,cms_incident.TALUKAMANDAL,cms_incident.CHAILDSUBCATEGORYID as CHILDSUBCATEGORYID,cms_incident.ENTERPRISEID,cms_incident.INCATEGORYID,cms_incident.INSUBCATEGORYID,cms_incident.SALESOFFICEID,cms_incident.USERID , 
										cmsChaildsubcategoryLkd.name as childSubCategoryName, enterpriseLkd.code as enterpriseCode  , cmsIncategoryLkd.name as inCategoryName  , cmsInsubcategoryLkd.name as inSubCategoryName  , salesofficeLkd.name as salesOfficeName, incidentRatingLkd.rating as incidentRating 
										FROM CMS_INCIDENT 
										LEFT JOIN cms_chaildsubcategory cmsChaildsubcategoryLkd ON cms_incident.CHAILDSUBCATEGORYID = cmsChaildsubcategoryLkd.ID 
										LEFT JOIN enterprise enterpriseLkd ON cms_incident.ENTERPRISEID = enterpriseLkd.ID
										LEFT JOIN company companyLkd ON companyLkd.ID = enterpriseLkd.COMPANYID 
										LEFT JOIN cms_incategory cmsIncategoryLkd ON cms_incident.INCATEGORYID = cmsIncategoryLkd.ID 
										LEFT JOIN cms_insubcategory cmsInsubcategoryLkd ON cms_incident.INSUBCATEGORYID = cmsInsubcategoryLkd.ID 
										LEFT JOIN salesoffice salesofficeLkd ON cms_incident.SALESOFFICEID = salesofficeLkd.ID 
										LEFT JOIN [user] userLkd ON cms_incident.USERID = userLkd.user_id
										LEFT JOIN cms_incidentrating incidentRatingLkd ON cms_incident.INCIDENTRATINGID = incidentRatingLkd.ID 										
                                        where cms_incident.USERID = ?
                                        and companyLkd.ID = ?
                                        ORDER BY cms_incident.ID 
                                        " />
				<entry key="SELECT_CmsIncident_BY_ID"
					value="SELECT cms_incident.ID,cms_incident.CREATEDATE,cms_incident.CREATOR,cms_incident.ENTITY_UID,cms_incident.MODIFIER,cms_incident.UPDATEDATE,cms_incident.OPTLOCK,cms_incident.BATCHID,cms_incident.COMPLAINTNUMBER,cms_incident.CONTACTNUMBER,cms_incident.CUSTOMERCODE,cms_incident.DESCRIPTION,cms_incident.FEEDBACKDES,cms_incident.INCIDENTNUMBER,cms_incident.INCIDENTRATINGID,cms_incident.SALESFORCEID,cms_incident.STEADDRESS as SITEADDRESS,cms_incident.STATUS,cms_incident.SUBJECT,cms_incident.TALUKAMANDAL,cms_incident.CHAILDSUBCATEGORYID as CHILDSUBCATEGORYID,cms_incident.ENTERPRISEID,cms_incident.INCATEGORYID,cms_incident.INSUBCATEGORYID,cms_incident.SALESOFFICEID,cms_incident.USERID
                                        FROM cms_incident
                                        WHERE cms_incident.ID=?
                                        " />
				<entry key="SEARCH_CmsIncident_Incident_List"
					value="SELECT cms_incident.ID,cms_incident.CREATEDATE,cms_incident.CREATOR,cms_incident.ENTITY_UID,cms_incident.MODIFIER,cms_incident.UPDATEDATE,cms_incident.OPTLOCK,cms_incident.BATCHID,cms_incident.COMPLAINTNUMBER,cms_incident.CONTACTNUMBER,cms_incident.CUSTOMERCODE,cms_incident.DESCRIPTION,cms_incident.FEEDBACKDES,cms_incident.INCIDENTNUMBER,cms_incident.INCIDENTRATINGID,cms_incident.SALESFORCEID,cms_incident.STEADDRESS as SITEADDRESS,cms_incident.STATUS,cms_incident.SUBJECT,cms_incident.TALUKAMANDAL,cms_incident.CHAILDSUBCATEGORYID as CHILDSUBCATEGORYID ,cms_incident.ENTERPRISEID,cms_incident.INCATEGORYID,cms_incident.INSUBCATEGORYID,cms_incident.SALESOFFICEID,cms_incident.USERID , cmsChaildsubcategoryLkd.name as childSubCategoryName ,enterpriseLkd.code as enterpriseCode , cmsIncategoryLkd.name as inCategoryName , cmsInsubcategoryLkd.name as inSubCategoryName , salesofficeLkd.name as salesOfficeName, incidentRatingLkd.rating as incidentRating, customerLkd.CUSTOMERNAME as customerName            
										FROM CMS_INCIDENT 
										LEFT JOIN cms_chaildsubcategory cmsChaildsubcategoryLkd ON cms_incident.CHAILDSUBCATEGORYID = cmsChaildsubcategoryLkd.ID              
										LEFT JOIN enterprise enterpriseLkd ON cms_incident.ENTERPRISEID = enterpriseLkd.ID
										LEFT JOIN company companyLkd ON companyLkd.ID = enterpriseLkd.COMPANYID              
										LEFT JOIN cms_incategory cmsIncategoryLkd ON cms_incident.INCATEGORYID = cmsIncategoryLkd.ID              
										LEFT JOIN cms_insubcategory cmsInsubcategoryLkd ON cms_incident.INSUBCATEGORYID = cmsInsubcategoryLkd.ID              
										LEFT JOIN salesoffice salesofficeLkd ON cms_incident.SALESOFFICEID = salesofficeLkd.ID 
										LEFT JOIN [user] userLkd ON cms_incident.USERID = userLkd.user_id
										LEFT JOIN customeruser customeruserLkd ON userLkd.user_id = customeruserLkd.ID 
										LEFT JOIN customer customerLkd ON customeruserLkd.CUSTOMERID = customerLkd.ID  
										LEFT JOIN cms_incidentrating incidentRatingLkd ON cms_incident.INCIDENTRATINGID = incidentRatingLkd.ID                          
										where cms_incident.INCIDENTNUMBER like ? AND (? IS NULL OR CONVERT(VARCHAR(10), cms_incident.CREATEDATE, 101) = CONVERT(VARCHAR(10), ?, 101)) AND cms_incident.INCATEGORYID like ? AND cms_incident.STATUS like ?  AND cms_incident.COMPLAINTNUMBER like ?
										and companyLkd.ID=?              
										ORDER BY cms_incident.ID                                        
                                        " />
				<!--// Queries For CmsIncategory -->
				<entry key="SELECT_ALL_CmsIncategory"
					value="SELECT cms_incategory.ID,cms_incategory.CREATEDATE,cms_incategory.CREATOR,cms_incategory.ENTITY_UID,cms_incategory.MODIFIER,cms_incategory.UPDATEDATE,cms_incategory.OPTLOCK,cms_incategory.ACTIVE,cms_incategory.DESCRIPTION,cms_incategory.NAME,cms_incategory.COMPANYID , companyLkd.name as companyName  
                                        FROM cms_incategory  
                                        LEFT JOIN company companyLkd ON cms_incategory.COMPANYID = companyLkd.ID
                                        where companyLkd.ID=?  
                                        ORDER BY cms_incategory.ID 
                                        " />
				<entry key="INSERT_CmsIncategory"
					value="INSERT INTO cms_incategory (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,ACTIVE,DESCRIPTION,NAME,COMPANYID)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                        " />
				<entry key="UPDATE_CmsIncategory"
					value="UPDATE cms_incategory SET MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, ACTIVE = ?, DESCRIPTION = ?, NAME = ?, COMPANYID = ?
										WHERE ID=?
										" />
				<entry key="SELECT_CmsIncategory_BY_ID"
					value="SELECT cms_incategory.ID,cms_incategory.CREATEDATE,cms_incategory.CREATOR,cms_incategory.ENTITY_UID,cms_incategory.MODIFIER,cms_incategory.UPDATEDATE,cms_incategory.OPTLOCK,cms_incategory.ACTIVE,cms_incategory.DESCRIPTION,cms_incategory.NAME,cms_incategory.COMPANYID   
                                        FROM cms_incategory
                                        WHERE cms_incategory.ID=?
										" />
				<entry key="SEARCH_CmsIncategory"
					value="SELECT cms_incategory.ID,cms_incategory.CREATEDATE,cms_incategory.CREATOR,cms_incategory.ENTITY_UID,cms_incategory.MODIFIER,cms_incategory.UPDATEDATE,cms_incategory.OPTLOCK,cms_incategory.ACTIVE,cms_incategory.DESCRIPTION,cms_incategory.NAME,cms_incategory.COMPANYID   
                                        FROM cms_incategory
                                        LEFT JOIN company companyLkd ON cms_incategory.COMPANYID = companyLkd.ID
                                        where cms_incategory.NAME like ? and cms_incategory.DESCRIPTION like ? and cms_incategory.ACTIVE like ?
                                        and companyLkd.ID=?
                                        ORDER BY cms_incategory.ID  
                                        " />

				<!--// Queries For CmsInsubcategory -->
				<entry key="SELECT_ALL_CmsInsubcategory"
					value="SELECT cms_insubcategory.ID,cms_insubcategory.CREATEDATE,cms_insubcategory.CREATOR,cms_insubcategory.ENTITY_UID,cms_insubcategory.MODIFIER,cms_insubcategory.UPDATEDATE,cms_insubcategory.OPTLOCK,cms_insubcategory.ACTIVE,cms_insubcategory.DESCRIPTION,cms_insubcategory.NAME,cms_insubcategory.INCATEGORYID , cmsIncategoryLkd.name as INCATEGORYNAME 
                                        FROM cms_insubcategory 
                                        LEFT JOIN cms_incategory cmsIncategoryLkd ON cms_insubcategory.INCATEGORYID = cmsIncategoryLkd.ID 
                                        ORDER BY cms_insubcategory.ID
                                        " />
				<entry key="SELECT_ALL_CmsInsubcategory_By_InCategoryId"
					value="SELECT cms_insubcategory.ID,cms_insubcategory.CREATEDATE,cms_insubcategory.CREATOR,cms_insubcategory.ENTITY_UID,cms_insubcategory.MODIFIER,cms_insubcategory.UPDATEDATE,cms_insubcategory.OPTLOCK,cms_insubcategory.ACTIVE,cms_insubcategory.DESCRIPTION,cms_insubcategory.NAME,cms_insubcategory.INCATEGORYID 
                                        FROM cms_insubcategory 
                                        where cms_insubcategory.INCATEGORYID = ?
                                        ORDER BY cms_insubcategory.ID
                                        " />
				<entry key="INSERT_CmsInSubCategory"
					value="INSERT INTO cms_insubcategory (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,ACTIVE,DESCRIPTION,NAME,INCATEGORYID)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                        " />
				<!--// Queries For CmsChaildsubcategory -->
				<entry key="SELECT_ALL_CmsChaildsubcategory"
					value="SELECT cms_chaildsubcategory.ID,cms_chaildsubcategory.CREATEDATE,cms_chaildsubcategory.CREATOR,cms_chaildsubcategory.ENTITY_UID,cms_chaildsubcategory.MODIFIER,cms_chaildsubcategory.UPDATEDATE,cms_chaildsubcategory.OPTLOCK,cms_chaildsubcategory.ACTIVE,cms_chaildsubcategory.DESCRIPTION,cms_chaildsubcategory.NAME,cms_chaildsubcategory.INSUBCATEGORYID , cmsInsubcategoryLkd.name as insubcategoryidcmsInsubcategoryLkdDesc 
                                        FROM cms_chaildsubcategory 
                                        LEFT JOIN cms_insubcategory cmsInsubcategoryLkd ON cms_chaildsubcategory.INSUBCATEGORYID = cmsInsubcategoryLkd.ID 
                                        ORDER BY cms_chaildsubcategory.ID
                                        " />
				<entry key="SELECT_CmsChaildsubcategory_By_SubCategoryId"
					value="SELECT cms_chaildsubcategory.ID,cms_chaildsubcategory.CREATEDATE,cms_chaildsubcategory.CREATOR,cms_chaildsubcategory.ENTITY_UID,cms_chaildsubcategory.MODIFIER,cms_chaildsubcategory.UPDATEDATE,cms_chaildsubcategory.OPTLOCK,cms_chaildsubcategory.ACTIVE,cms_chaildsubcategory.DESCRIPTION,cms_chaildsubcategory.NAME,cms_chaildsubcategory.INSUBCATEGORYID , cmsInsubcategoryLkd.name as insubcategoryidcmsInsubcategoryLkdDesc 
                                        FROM cms_chaildsubcategory 
                                        LEFT JOIN cms_insubcategory cmsInsubcategoryLkd ON cms_chaildsubcategory.INSUBCATEGORYID = cmsInsubcategoryLkd.ID
                                        where cms_chaildsubcategory.INSUBCATEGORYID = ? 
                                        ORDER BY cms_chaildsubcategory.ID
                                        " />
				<entry key="INSERT_CmsInChildSubCategory"
					value="INSERT INTO cms_chaildsubcategory (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,ACTIVE,DESCRIPTION,NAME,INSUBCATEGORYID)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                        " />

				<!--// Queries For Helpdetails Report -->
				<entry key="SEARCH_Helpdetails"
					value="SELECT helpdetails.ID,helpdetails.CREATEDATE,helpdetails.CREATOR,helpdetails.ENTITY_UID,helpdetails.MODIFIER,helpdetails.UPDATEDATE,helpdetails.OPTLOCK,helpdetails.DESCRIPTION,helpdetails.EMAIL,helpdetails.NAME, helpdetails.PHONE, helpdetails.ALT_PHONE, helpdetails.PROBLEMTYPE, helpdetails.COMPANYID, helpdetails.SAPCODE 
                                        FROM helpdetails
                                        INNER JOIN company companyLkd ON helpdetails.COMPANYID = companyLkd.ID
                                        where helpdetails.CREATEDATE between ? and ?
                                        and companyLkd.ID=?
                                        ORDER BY helpdetails.ID  
                                        " />
				<entry key="SEARCH_Helpdetails_For_Employee"
					value="SELECT helpdetails.ID,helpdetails.CREATEDATE,helpdetails.CREATOR,helpdetails.ENTITY_UID,helpdetails.MODIFIER,helpdetails.UPDATEDATE,helpdetails.OPTLOCK,helpdetails.DESCRIPTION,helpdetails.EMAIL,helpdetails.NAME, helpdetails.PHONE, helpdetails.ALT_PHONE, helpdetails.PROBLEMTYPE, helpdetails.COMPANYID, helpdetails.SAPCODE 
                                        FROM helpdetails
                                        INNER JOIN company companyLkd ON helpdetails.COMPANYID = companyLkd.ID
                                        where helpdetails.CREATEDATE between ? and ?
                                        and companyLkd.ID=?
                                        ORDER BY helpdetails.ID  
                                        " />
				<entry key="SELECT_ALL_Helpdetails"
					value="SELECT helpdetails.ID,helpdetails.CREATEDATE,helpdetails.CREATOR,helpdetails.ENTITY_UID,helpdetails.MODIFIER,helpdetails.UPDATEDATE,helpdetails.OPTLOCK,helpdetails.DESCRIPTION,helpdetails.EMAIL,helpdetails.NAME, helpdetails.PHONE, helpdetails.ALT_PHONE, helpdetails.PROBLEMTYPE, helpdetails.COMPANYID, helpdetails.SAPCODE 
                                        FROM helpdetails
                                        INNER JOIN company companyLkd ON helpdetails.COMPANYID = companyLkd.ID
                                        where companyLkd.ID=?
                                        ORDER BY helpdetails.ID  
                                        " />
				<entry key="SELECT_Helpdetails_For_Employee"
					value="SELECT helpdetails.ID,helpdetails.CREATEDATE,helpdetails.CREATOR,helpdetails.ENTITY_UID,helpdetails.MODIFIER,helpdetails.UPDATEDATE,helpdetails.OPTLOCK,helpdetails.DESCRIPTION,helpdetails.EMAIL,helpdetails.NAME, helpdetails.PHONE, helpdetails.ALT_PHONE, helpdetails.PROBLEMTYPE, helpdetails.COMPANYID, helpdetails.SAPCODE 
                                        FROM helpdetails
                                        INNER JOIN company companyLkd ON helpdetails.COMPANYID = companyLkd.ID
                                        where companyLkd.ID=?
                                        ORDER BY helpdetails.ID  
                                        " />
				<!--// Queries For Web Order Report -->
				<entry key="SELECT_ALL_WebOrders"
					value="select saleorder.WEBORDERNUMBER, saleorder.createdate as WEBORDERDATE, customer.CODE,CUSTOMER.CUSTOMERNAME, ORDERLINE.QUANTITY, Orderline.REQUIREDDATE, MATERIAL.ARTICLENO,MATERIAL.DESCRIPTION, ORDERPARTNER.PARTNERNO, ORDERPARTNER.PARTNERTYPE, so.ID as salesOfficeId, customer.CUSTOMERGROUPID,CUSTOMER.ID, COMPANY.COMPANYID, so.NAME as salesOfficeName, POSTEDORDERHEADER.CREATEDATE as orderPostedDate  
                                        from SALEORDER 
                                        INNER JOIN ORDERHEADER ON SALEORDER.ORDERHEADERID=ORDERHEADER.ID
                                        INNER JOIN POSTEDORDERHEADER ON ORDERHEADER.POSTEDORDERHEADERID=POSTEDORDERHEADER.ID  
                                        INNER Join ORDERPARTNER ON ORDERHEADER.ID=ORDERPARTNER.ORDERHEADERID 
                                        INNER JOIN Orderline ON ORDERHEADER.id=ORDERLINE.ORDERHEADERID 
                                        INNER Join MATERIAL On OrderLine.MATERIALID=MATERIAL.ID 
                                        INNER JOIN CUSTOMER ON SALEORDER.CUSTOMERID=CUSTOMER.ID 
                                        INNER JOIN CUSTOMERGROUP on CUSTOMER.CUSTOMERGROUPID=CUSTOMERGROUP.ID 
                                        INNER JOIN ENTERPRISE on CUSTOMERGROUP.ENTERPRISEID= ENTERPRISE.ID 
                                        INNER  JOIN company on ENTERPRISE.COMPANYID=COMPANY.ID 
                                        Inner Join SALESOFFICE so on customer.SALESOFFICEID=so.ID 
                                        where company.ID=?
                                        ORDER BY saleorder.WEBORDERNUMBER 
                                        " />
				<entry key="SELECT_ALL_WebOrders_For_Employee"
					value="select saleorder.WEBORDERNUMBER, saleorder.createdate as WEBORDERDATE, customer.CODE,CUSTOMER.CUSTOMERNAME, ORDERLINE.QUANTITY, Orderline.REQUIREDDATE, MATERIAL.ARTICLENO,MATERIAL.DESCRIPTION, ORDERPARTNER.PARTNERNO, ORDERPARTNER.PARTNERTYPE, so.ID as salesOfficeId, customer.CUSTOMERGROUPID,CUSTOMER.ID, COMPANY.COMPANYID, so.NAME as salesOfficeName, POSTEDORDERHEADER.CREATEDATE as orderPostedDate 
                                        from SALEORDER 
                                        INNER JOIN ORDERHEADER ON SALEORDER.ORDERHEADERID=ORDERHEADER.ID
                                        INNER JOIN POSTEDORDERHEADER ON ORDERHEADER.POSTEDORDERHEADERID=POSTEDORDERHEADER.ID  
                                        INNER Join ORDERPARTNER ON ORDERHEADER.ID=ORDERPARTNER.ORDERHEADERID 
                                        INNER JOIN Orderline ON ORDERHEADER.id=ORDERLINE.ORDERHEADERID 
                                        INNER Join MATERIAL On OrderLine.MATERIALID=MATERIAL.ID 
                                        INNER JOIN CUSTOMER ON SALEORDER.CUSTOMERID=CUSTOMER.ID
                                        INNER JOIN  Employee em ON CUSTOMER.SALESOFFICEID = em.SALESOFFICEID 
                                        INNER JOIN CUSTOMERGROUP on CUSTOMER.CUSTOMERGROUPID=CUSTOMERGROUP.ID 
                                        INNER JOIN ENTERPRISE on CUSTOMERGROUP.ENTERPRISEID= ENTERPRISE.ID 
                                        INNER  JOIN company on ENTERPRISE.COMPANYID=COMPANY.ID 
                                        Inner Join SALESOFFICE so on customer.SALESOFFICEID=so.ID 
                                        where em.ID=? and company.ID=? 
                                        ORDER BY saleorder.WEBORDERNUMBER 
                                        " />
				<!-- <entry key="Search_WebOrders" value="select customer.CODE as customerCode,CUSTOMER.CUSTOMERNAME, 
					so.NAME as salesOfficeName, so.CODE as salesOfficeCode, SALESREGION.NAME 
					as salesRegionName, SALESREGION.CODE as salesRegionCode, SALESUNIT.NAME as 
					salesUnitName, SALESUNIT.CODE as salesUnitCode, LOCATION.CITY, LOCATION.STATEPROV 
					state, saleorder.WEBORDERNUMBER, saleorder.createdate as WEBORDERDATE, ORDERLINE.QUANTITY, 
					POSTEDORDERHEADER.SALESDOCUMENT as sapOrderNumber, POSTEDORDERHEADER.CREATEDATE 
					as orderPostedDate, SALEORDER.ERRORMSG as remarks, CUSTOMERGROUP.code as 
					customerType, CONVERT(varchar(6),DATEDIFF(minute, POSTEDORDERHEADER.CREATEDATE 
					,saleorder.createdate)/60) as hours, CONVERT(varchar(3),DATEDIFF(minute,POSTEDORDERHEADER.CREATEDATE 
					,saleorder.createdate)%60) as minutes, CASE WHEN SALEORDER.ISMOBILE IS NULL 
					THEN 'No' WHEN SALEORDER.ISMOBILE = 0 THEN 'No' ELSE 'Yes' END ismobile from 
					SALEORDER INNER JOIN ORDERHEADER ON SALEORDER.ORDERHEADERID=ORDERHEADER.ID 
					LEFT JOIN POSTEDORDERHEADER ON ORDERHEADER.POSTEDORDERHEADERID=POSTEDORDERHEADER.ID 
					INNER Join ORDERPARTNER ON ORDERHEADER.ID=ORDERPARTNER.ORDERHEADERID INNER 
					JOIN Orderline ON ORDERHEADER.id=ORDERLINE.ORDERHEADERID INNER Join MATERIAL 
					On OrderLine.MATERIALID=MATERIAL.ID INNER JOIN CUSTOMER ON SALEORDER.CUSTOMERID=CUSTOMER.ID 
					INNER JOIN CONTACT ON CUSTOMER.MAINCONTACTID=CONTACT.ID INNER JOIN ADDRESS 
					ON CONTACT.ADDRESSID=ADDRESS.ID INNER JOIN LOCATION ON ADDRESS.LOCATIONID=LOCATION.ID 
					INNER JOIN CUSTOMERGROUP on CUSTOMER.CUSTOMERGROUPID=CUSTOMERGROUP.ID INNER 
					JOIN ENTERPRISE on CUSTOMERGROUP.ENTERPRISEID= ENTERPRISE.ID INNER JOIN company 
					on ENTERPRISE.COMPANYID=COMPANY.ID INNER Join SALESOFFICE so on customer.SALESOFFICEID=so.ID 
					INNER JOIN SALESUNIT on so.SALESUNITID=SALESUNIT.ID INNER JOIN SALESREGION 
					on SALESUNIT.SALESREGIONID=SALESREGION.ID where (so.NAME like ? OR so.CODE 
					like ?) and (SALESUNIT.NAME like ? OR SALESUNIT.CODE like ?) and (SALESREGION.NAME 
					like ? OR SALESREGION.CODE like ?) and saleorder.createdate between ? and 
					? and (CUSTOMERGROUP.NAME like ? OR CUSTOMERGROUP.CODE like ?) and (CUSTOMER.CODE 
					LIKE ? OR CUSTOMER.CUSTOMERNAME LIKE ?) and (CUSTOMER.ACCESSPORTAL LIKE ?) 
					and (LOCATION.CITY LIKE ?) and company.ID=? ORDER BY saleorder.createdate 
					desc "/> -->

				<entry key="Search_WebOrders"
					value="select customer.CODE as customerCode,CUSTOMER.CUSTOMERNAME, so.NAME as salesOfficeName, so.CODE as salesOfficeCode, 
										SALESREGION.NAME as salesRegionName, SALESREGION.CODE as salesRegionCode,
										SALESUNIT.NAME as salesUnitName, SALESUNIT.CODE as salesUnitCode,
										LOCATION.CITY, LOCATION.STATEPROV state, 
										saleorder.WEBORDERNUMBER, 
										saleorder.createdate as WEBORDERDATE,				
										ORDERLINE.QUANTITY,
										POSTEDORDERHEADER.SALESDOCUMENT as sapOrderNumber,
										POSTEDORDERHEADER.CREATEDATE as orderPostedDate,
										SALEORDER.ERRORMSG as remarks,
										CUSTOMERGROUP.code as customerType,
										CONVERT(varchar(6),DATEDIFF(minute, POSTEDORDERHEADER.CREATEDATE ,saleorder.createdate)/60) as hours, 
										CONVERT(varchar(3),DATEDIFF(minute,POSTEDORDERHEADER.CREATEDATE ,saleorder.createdate)%60) as minutes,
										CASE WHEN SALEORDER.ISMOBILE IS NULL THEN 'No'
											 WHEN SALEORDER.ISMOBILE = 0 THEN 'No'
											 ELSE 'Yes' END ismobile
						                from SALEORDER 
						                INNER JOIN ORDERHEADER ON SALEORDER.ORDERHEADERID=ORDERHEADER.ID
						                LEFT JOIN POSTEDORDERHEADER ON ORDERHEADER.POSTEDORDERHEADERID=POSTEDORDERHEADER.ID						                
						                INNER JOIN Orderline ON ORDERHEADER.id=ORDERLINE.ORDERHEADERID 
						                INNER Join MATERIAL On OrderLine.MATERIALID=MATERIAL.ID 
						                INNER JOIN CUSTOMER ON SALEORDER.CUSTOMERID=CUSTOMER.ID
										INNER JOIN CONTACT ON CUSTOMER.MAINCONTACTID=CONTACT.ID
										INNER JOIN ADDRESS ON CONTACT.ADDRESSID=ADDRESS.ID
										INNER JOIN LOCATION ON ADDRESS.LOCATIONID=LOCATION.ID
						                INNER JOIN CUSTOMERGROUP on CUSTOMER.CUSTOMERGROUPID=CUSTOMERGROUP.ID 
						                INNER JOIN ENTERPRISE on CUSTOMERGROUP.ENTERPRISEID= ENTERPRISE.ID 
						                INNER JOIN company on ENTERPRISE.COMPANYID=COMPANY.ID 
						                INNER Join SALESOFFICE so on customer.SALESOFFICEID=so.ID 
						                INNER JOIN SALESUNIT on so.SALESUNITID=SALESUNIT.ID
						                INNER JOIN SALESREGION on SALESUNIT.SALESREGIONID=SALESREGION.ID
						                where saleorder.createdate between ? and ?				                
										and company.ID=?						                
                                        " />

				<entry key="Search_WebOrders_For_Employee"
					value="select saleorder.WEBORDERNUMBER, saleorder.createdate as WEBORDERDATE, customer.CODE,CUSTOMER.CUSTOMERNAME, 
												ORDERLINE.QUANTITY, Orderline.REQUIREDDATE, MATERIAL.ARTICLENO,MATERIAL.DESCRIPTION as materialDescription, ORDERPARTNER.PARTNERNO, 
												ORDERPARTNER.PARTNERTYPE, so.ID as salesOfficeId, customer.CUSTOMERGROUPID,CUSTOMER.ID, COMPANY.COMPANYID, 
												so.NAME as salesOfficeName, POSTEDORDERHEADER.CREATEDATE as orderPostedDate 
											from SALEORDER 
											INNER JOIN ORDERHEADER ON SALEORDER.ORDERHEADERID=ORDERHEADER.ID
											LEFT JOIN POSTEDORDERHEADER ON ORDERHEADER.POSTEDORDERHEADERID=POSTEDORDERHEADER.ID  
											INNER Join ORDERPARTNER ON ORDERHEADER.ID=ORDERPARTNER.ORDERHEADERID 
											INNER JOIN Orderline ON ORDERHEADER.id=ORDERLINE.ORDERHEADERID 
											INNER Join MATERIAL On OrderLine.MATERIALID=MATERIAL.ID 
											INNER JOIN CUSTOMER ON SALEORDER.CUSTOMERID=CUSTOMER.ID
											INNER JOIN  Employee em ON CUSTOMER.SALESOFFICEID = em.SALESOFFICEID
											INNER JOIN CUSTOMERGROUP on CUSTOMER.CUSTOMERGROUPID=CUSTOMERGROUP.ID 
											INNER JOIN ENTERPRISE on CUSTOMERGROUP.ENTERPRISEID= ENTERPRISE.ID 
											INNER JOIN company on ENTERPRISE.COMPANYID=COMPANY.ID 
											INNER Join SALESOFFICE so on customer.SALESOFFICEID=so.ID 
											INNER JOIN SALESUNIT on so.SALESUNITID=SALESUNIT.ID
											INNER JOIN SALESREGION on SALESUNIT.SALESREGIONID=SALESREGION.ID
											where (so.NAME like ? OR so.CODE like ?) and (SALESUNIT.NAME like ? OR SALESUNIT.CODE like ?) and
									       (SALESREGION.NAME like ? OR SALESREGION.CODE like ?) and saleorder.createdate between ? and ? and
									        (CUSTOMERGROUP.NAME like ? OR CUSTOMERGROUP.CODE like ?) 
											and em.ID = ?
											and company.ID=?
											ORDER BY saleorder.WEBORDERNUMBER
                                        " />


				<!-- Secondary Sales Report -->
				<entry key="SELECT_ALL_Secondarysales_For_Report"
					value="SELECT secondarysales.CODE as soldToParty,secondarysales.CUSTOMERNAME as soldToName,
											secondarysales.DELIVERYNO,secondarysales.MOVEDATE as date,secondarysales.ACTUALQTY as quantity, 
											secondarysales.CITY,secondarysales.RETAILERCODE as shipTo, secondarysales.RETAILERNAME as shipToPartyName,
											secondarysales.MATERIALTYPE,secondarysales.PACKINGTYPE, secondarysales.ASSIGNEDQTY,
											so.name as salesOfficeName,secondarysales.PLANTNAME
											FROM secondarysales
											Inner join salesOffice so ON so.ID = secondarysales.SALESOFFICEID
											Inner join salesunit su ON su.ID = so.SALESUNITID
											Inner join salesregion sr ON sr.ID = su.SALESREGIONID
											Inner join enterprise e ON e.ID = sr.ENTERPRISEID
											Inner join company c ON c.ID = e.COMPANYID
											WHERE secondarysales.ISDELETED=0
											and c.ID=?
											ORDER BY secondarysales.ID  
														" />
				<entry key="Search_SecondarySales_Report"
					value="SELECT secondarysales.CODE as soldToParty,secondarysales.CUSTOMERNAME as soldToName,
											secondarysales.RETAILERCODE as shipTo, 
											secondarysales.RETAILERNAME as shipToPartyName, secondarysales.ASSIGNEDQTY,
											secondarysales.CREATEDATE date,
											so.code as salesOfficeCode, so.name as salesOfficeName,
											su.code as salesUnitCode, su.name as salesUnitName,
											sr.code as salesRegionCode, sr.name as salesRegionName,
											location.city as city, location.STATEPROV as state,
											cg.code as customerType
											FROM secondarysales
											Inner join salesOffice so ON so.ID = secondarysales.SALESOFFICEID
											Inner join salesunit su ON su.ID = so.SALESUNITID
											Inner join salesregion sr ON sr.ID = su.SALESREGIONID
											Inner join enterprise e ON e.ID = sr.ENTERPRISEID
											Inner join company c ON c.ID = e.COMPANYID
											LEFT JOIN CUSTOMER cu on cu.CODE = secondarysales.CODE
											LEFT JOIN CONTACT contact ON cu.MAINCONTACTID=contact.ID
											LEFT JOIN ADDRESS address ON contact.ADDRESSID=address.ID
											LEFT JOIN LOCATION location ON address.LOCATIONID=location.ID
											LEFT JOIN CUSTOMERGROUP cg on cg.ID = cu.CUSTOMERGROUPID
											WHERE secondarysales.ISDELETED=0 and secondarysales.CREATEDATE between ? and ? and 
											(cg.NAME like ? OR cg.CODE like ?) and (so.NAME like ? OR so.CODE like ?) and 
											(sr.NAME like ? OR sr.CODE like ? ) and (su.NAME like ? OR su.CODE like ?) and
											(cu.CUSTOMERNAME like ? or cu.code like ?) and
											(location.city like ?) and (cu.ACCESSPORTAL LIKE ?)
											and c.ID = ? ORDER BY cu.CUSTOMERNAME 
											" />
				<entry key="SELECT_Secondarysales_For_Employee"
					value="SELECT secondarysales.CODE as soldToParty,secondarysales.CUSTOMERNAME as soldToName,secondarysales.DELIVERYNO,
												secondarysales.MOVEDATE as date,secondarysales.ACTUALQTY as quantity, secondarysales.CITY,secondarysales.RETAILERCODE as shipTo, 
												secondarysales.RETAILERNAME as shipToPartyName,secondarysales.MATERIALTYPE,secondarysales.PACKINGTYPE, secondarysales.ASSIGNEDQTY,
												so.name as salesOfficeName,secondarysales.PLANTNAME
												FROM secondarysales
												Inner join salesOffice so ON so.ID = secondarysales.SALESOFFICEID
												Inner join salesunit su ON su.ID = so.SALESUNITID
												Inner join salesregion sr ON sr.ID = su.SALESREGIONID
												Inner join enterprise e ON e.ID = sr.ENTERPRISEID
												Inner join company c ON c.ID = e.COMPANYID
												Inner Join Employee em ON em.SALESOFFICEID = secondarysales.SALESOFFICEID
												WHERE secondarysales.ISDELETED=0 and em.ID=?
												and c.ID=?
												ORDER BY secondarysales.ID
											" />
				<entry key="Search_SecondarySales_Report_For_Employee"
					value="SELECT secondarysales.CODE as soldToParty,secondarysales.CUSTOMERNAME as soldToName,secondarysales.DELIVERYNO,
												secondarysales.MOVEDATE as date,secondarysales.ACTUALQTY as quantity, secondarysales.CITY,secondarysales.RETAILERCODE as shipTo, 
												secondarysales.RETAILERNAME as shipToPartyName,secondarysales.MATERIALTYPE,secondarysales.PACKINGTYPE, secondarysales.ASSIGNEDQTY,
												so.name as salesOfficeName,secondarysales.PLANTNAME
												FROM secondarysales
												Inner join salesOffice so ON so.ID = secondarysales.SALESOFFICEID
												Inner join salesunit su ON su.ID = so.SALESUNITID
												Inner join salesregion sr ON sr.ID = su.SALESREGIONID
												Inner join enterprise e ON e.ID = sr.ENTERPRISEID
												Inner join company c ON c.ID = e.COMPANYID
												Inner Join Employee em ON em.SALESOFFICEID = secondarysales.SALESOFFICEID
												WHERE secondarysales.ISDELETED=0 and secondarysales.CREATEDATE between ? and ? and
												(so.Name like ? OR so.CODE like ?)
												and secondarysales.CUSTOMERNAME like ? and em.ID=?
												and c.ID=?
												ORDER BY secondarysales.ID 
											" />


				<!--// Queries For Incident Report -->
				<entry key="SELECT_ALL_incident_For_Report"
					value="SELECT cms_incident.ID, cms_incident.CREATEDATE, cms_incident.CREATOR, cms_incident.ENTITY_UID, cms_incident.MODIFIER, cms_incident.UPDATEDATE, cms_incident.OPTLOCK, cms_incident.BATCHID, cms_incident.COMPLAINTNUMBER, cms_incident.CONTACTNUMBER, cms_incident.CUSTOMERCODE, cms_incident.DESCRIPTION, cms_incident.FEEDBACKDES, cms_incident.INCIDENTNUMBER, cms_incident.INCIDENTRATINGID, cms_incident.SALESFORCEID, cms_incident.STEADDRESS as SITEADDRESS, cms_incident.STATUS, cms_incident.SUBJECT, cms_incident.TALUKAMANDAL, cms_incident.CHAILDSUBCATEGORYID as CHILDSUBCATEGORYID, cms_incident.ENTERPRISEID, cms_incident.INCATEGORYID, cms_incident.INSUBCATEGORYID, cms_incident.SALESOFFICEID, cms_incident.USERID , cmsChaildsubcategoryLkd.name as childSubCategoryName , cmsIncategoryLkd.name as inCategoryName , cmsInsubcategoryLkd.name as inSubCategoryName , salesofficeLkd.name as salesOfficeName, incidentRatingLkd.rating as incidentRating
                                        FROM cms_incident
                                        LEFT JOIN cms_chaildsubcategory cmsChaildsubcategoryLkd ON cms_incident.CHAILDSUBCATEGORYID = cmsChaildsubcategoryLkd.ID LEFT JOIN enterprise enterpriseLkd ON cms_incident.ENTERPRISEID = enterpriseLkd.ID LEFT JOIN cms_incategory cmsIncategoryLkd ON cms_incident.INCATEGORYID = cmsIncategoryLkd.ID LEFT JOIN cms_insubcategory cmsInsubcategoryLkd ON cms_incident.INSUBCATEGORYID = cmsInsubcategoryLkd.ID LEFT JOIN salesoffice salesofficeLkd ON cms_incident.SALESOFFICEID = salesofficeLkd.ID 
                                        LEFT JOIN [user] userLkd ON cms_incident.USERID = userLkd.user_id
                                        LEFT JOIN Company companyLkd ON companyLkd.ID = userLkd.companyId
                                        LEFT JOIN cms_incidentrating incidentRatingLkd ON cms_incident.INCIDENTRATINGID = incidentRatingLkd.ID
                                        where companyLkd.ID = ?
                                        ORDER BY cms_incident.ID " />
				<entry key="Search_Incident_Report"
					value="SELECT cms_incident.ID, cms_incident.CREATEDATE, cms_incident.CREATOR, cms_incident.ENTITY_UID, cms_incident.MODIFIER, cms_incident.UPDATEDATE, cms_incident.OPTLOCK, cms_incident.BATCHID, cms_incident.COMPLAINTNUMBER, cms_incident.CONTACTNUMBER, cms_incident.CUSTOMERCODE, cms_incident.DESCRIPTION, cms_incident.FEEDBACKDES, cms_incident.INCIDENTNUMBER, cms_incident.INCIDENTRATINGID, cms_incident.SALESFORCEID, cms_incident.STEADDRESS as SITEADDRESS, cms_incident.STATUS, cms_incident.SUBJECT, cms_incident.TALUKAMANDAL, cms_incident.CHAILDSUBCATEGORYID as CHILDSUBCATEGORYID, cms_incident.ENTERPRISEID, cms_incident.INCATEGORYID, cms_incident.INSUBCATEGORYID, cms_incident.SALESOFFICEID, cms_incident.USERID , cmsChaildsubcategoryLkd.name as childSubCategoryName , cmsIncategoryLkd.name as inCategoryName , cmsInsubcategoryLkd.name as inSubCategoryName , salesofficeLkd.name as salesOfficeName, cu.customername as customerName
                                        FROM cms_incident
                                        Inner JOIN cms_chaildsubcategory cmsChaildsubcategoryLkd ON cms_incident.CHAILDSUBCATEGORYID = cmsChaildsubcategoryLkd.ID LEFT JOIN enterprise enterpriseLkd ON cms_incident.ENTERPRISEID = enterpriseLkd.ID LEFT JOIN cms_incategory cmsIncategoryLkd ON cms_incident.INCATEGORYID = cmsIncategoryLkd.ID LEFT JOIN cms_insubcategory cmsInsubcategoryLkd ON cms_incident.INSUBCATEGORYID = cmsInsubcategoryLkd.ID LEFT JOIN salesoffice salesofficeLkd ON cms_incident.SALESOFFICEID = salesofficeLkd.ID 
                                        Inner JOIN [user] userLkd ON cms_incident.USERID = userLkd.user_id
                                        Inner JOIN Company companyLkd ON companyLkd.ID = userLkd.companyId
										Inner JOIN customeruser custuser ON custuser.ID = userLkd.user_id
										Inner JOIN CUSTOMER cu on cu.ID = custuser.CUSTOMERID									
										LEFT JOIN SALESOFFICE soffice ON soffice.ID = cu.SALESOFFICEID
										LEFT JOIN SALESUNIT sUnit ON sUnit.ID = soffice.SALESUNITID
										LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID
                                        where cmsIncategoryLkd.name like ? AND cms_incident.CREATEDATE between ? AND ? and (soffice.NAME like ? OR soffice.CODE like ?)
                                         and (sRegion.NAME like ? OR sRegion.CODE like ?) and (sUnit.NAME like ? OR sUnit.CODE like ?)                                        
										and companyLkd.ID = ?
                                        ORDER BY cms_incident.ID
 " />
				<entry key="SELECT_incident_For_Employee"
					value="SELECT cms_incident.ID, cms_incident.CREATEDATE, cms_incident.CREATOR, cms_incident.ENTITY_UID, cms_incident.MODIFIER, cms_incident.UPDATEDATE, cms_incident.OPTLOCK, cms_incident.BATCHID, cms_incident.COMPLAINTNUMBER, cms_incident.CONTACTNUMBER, cms_incident.CUSTOMERCODE, cms_incident.DESCRIPTION, cms_incident.FEEDBACKDES, cms_incident.INCIDENTNUMBER, cms_incident.INCIDENTRATINGID, cms_incident.SALESFORCEID, cms_incident.STEADDRESS as SITEADDRESS, cms_incident.STATUS, cms_incident.SUBJECT, cms_incident.TALUKAMANDAL, cms_incident.CHAILDSUBCATEGORYID as CHILDSUBCATEGORYID, cms_incident.ENTERPRISEID, cms_incident.INCATEGORYID, cms_incident.INSUBCATEGORYID, cms_incident.SALESOFFICEID, cms_incident.USERID , cmsChaildsubcategoryLkd.name as childSubCategoryName , cmsIncategoryLkd.name as inCategoryName , cmsInsubcategoryLkd.name as inSubCategoryName , salesofficeLkd.name as salesOfficeName, incidentRatingLkd.rating as incidentRating
                                        FROM cms_incident
                                        LEFT JOIN cms_chaildsubcategory cmsChaildsubcategoryLkd ON cms_incident.CHAILDSUBCATEGORYID = cmsChaildsubcategoryLkd.ID LEFT JOIN enterprise enterpriseLkd ON cms_incident.ENTERPRISEID = enterpriseLkd.ID LEFT JOIN cms_incategory cmsIncategoryLkd ON cms_incident.INCATEGORYID = cmsIncategoryLkd.ID LEFT JOIN cms_insubcategory cmsInsubcategoryLkd ON cms_incident.INSUBCATEGORYID = cmsInsubcategoryLkd.ID LEFT JOIN salesoffice salesofficeLkd ON cms_incident.SALESOFFICEID = salesofficeLkd.ID 
                                        LEFT JOIN [user] userLkd ON cms_incident.USERID = userLkd.user_id
                                        LEFT JOIN Company companyLkd ON companyLkd.ID = userLkd.companyId
                                        LEFT JOIN cms_incidentrating incidentRatingLkd ON cms_incident.INCIDENTRATINGID = incidentRatingLkd.ID
                                        where companyLkd.ID = ?
                                        ORDER BY cms_incident.ID " />
				<entry key="Search_Incident_Report_For_Employee"
					value="SELECT cms_incident.ID, cms_incident.CREATEDATE, cms_incident.CREATOR, cms_incident.ENTITY_UID, cms_incident.MODIFIER, cms_incident.UPDATEDATE, cms_incident.OPTLOCK, cms_incident.BATCHID, cms_incident.COMPLAINTNUMBER, cms_incident.CONTACTNUMBER, cms_incident.CUSTOMERCODE, cms_incident.DESCRIPTION, cms_incident.FEEDBACKDES, cms_incident.INCIDENTNUMBER, cms_incident.INCIDENTRATINGID, cms_incident.SALESFORCEID, cms_incident.STEADDRESS as SITEADDRESS, cms_incident.STATUS, cms_incident.SUBJECT, cms_incident.TALUKAMANDAL, cms_incident.CHAILDSUBCATEGORYID as CHILDSUBCATEGORYID, cms_incident.ENTERPRISEID, cms_incident.INCATEGORYID, cms_incident.INSUBCATEGORYID, cms_incident.SALESOFFICEID, cms_incident.USERID , cmsChaildsubcategoryLkd.name as childSubCategoryName , cmsIncategoryLkd.name as inCategoryName , cmsInsubcategoryLkd.name as inSubCategoryName , salesofficeLkd.name as salesOfficeName, cu.customername as customerName
													FROM cms_incident
													Inner JOIN cms_chaildsubcategory cmsChaildsubcategoryLkd ON cms_incident.CHAILDSUBCATEGORYID = cmsChaildsubcategoryLkd.ID LEFT JOIN enterprise enterpriseLkd ON cms_incident.ENTERPRISEID = enterpriseLkd.ID LEFT JOIN cms_incategory cmsIncategoryLkd ON cms_incident.INCATEGORYID = cmsIncategoryLkd.ID LEFT JOIN cms_insubcategory cmsInsubcategoryLkd ON cms_incident.INSUBCATEGORYID = cmsInsubcategoryLkd.ID LEFT JOIN salesoffice salesofficeLkd ON cms_incident.SALESOFFICEID = salesofficeLkd.ID 
													Inner JOIN [user] userLkd ON cms_incident.USERID = userLkd.user_id
													Inner JOIN Company companyLkd ON companyLkd.ID = userLkd.companyId
													Inner JOIN customeruser custuser ON custuser.ID = userLkd.user_id
													Inner JOIN CUSTOMER cu on cu.ID = custuser.CUSTOMERID
													Inner Join Employee em ON em.SALESOFFICEID = cu.SALESOFFICEID									
													LEFT JOIN SALESOFFICE soffice ON soffice.ID = cu.SALESOFFICEID
													LEFT JOIN SALESUNIT sUnit ON sUnit.ID = soffice.SALESUNITID
													LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID
													where cmsIncategoryLkd.name like ? AND cms_incident.CREATEDATE between ? AND ? and
												    (soffice.NAME like ? OR soffice.CODE like ?)
                                                    and (sRegion.NAME like ? OR sRegion.CODE like ?) and (sUnit.NAME like ? OR sUnit.CODE like ?)
													and companyLkd.ID = ? ANd em.ID = ?
													ORDER BY cms_incident.ID " />
				<!--// Queries For User Tracker Report -->
				<entry key="SELECT_USERTRACKER_Report"
					value="SELECT loginDetails.user_id, loginDetails.lastloginsuccess, userLkd.GIVENNAME, cu.CUSTOMERNAME as companyName, 
												cu.CODE as companyCode, Count(loginTracker.USERID) as totalLogin, 
												max(so.CREATEDATE) as lastWebOrderPlacementDate
												FROM userLoginDetails loginDetails
												LEFT JOIN [user] userLkd ON loginDetails.user_id = userLkd.user_id
												LEFT JOIN Company companyLkd ON companyLkd.ID = userLkd.companyId
												LEFT JOIN userLoginTracker loginTracker ON loginTracker.USERID = loginDetails.user_id
												LEFT JOIN customeruser custuser ON custuser.ID = loginDetails.user_id
												LEFT JOIN CUSTOMER cu on cu.ID = custuser.CUSTOMERID
												LEFT JOIN saleorder so ON so.CUSTOMERID = custuser.CUSTOMERID
												where companyLkd.ID = ? 
												group by  loginDetails.user_id, loginDetails.lastloginsuccess, userLkd.GIVENNAME, cu.CUSTOMERNAME, cu.CODE
												" />
				<!-- <entry key="SEARCH_USERTRACKER_Report" value="SELECT userLkd.loginId 
					as id, loginDetails.user_id, loginDetails.lastloginsuccess, CASE WHEN userLkd.middleName 
					IS NOT NULL AND userLkd.FAMILYNAME IS NOT NULL THEN Concat(userLkd.givenName,' 
					',userLkd.middleName,' ', userLkd.FamilyName) WHEN userLkd.middleName IS 
					NULL AND userLkd.familyName IS NOT NULL THEN Concat(userLkd.givenName,' ', 
					userLkd.FamilyName) WHEN userLkd.middleName IS NOT NULL AND userLkd.familyName 
					IS NULL THEN Concat(userLkd.givenName,' ', userLkd.middleName) ELSE userLkd.givenName 
					END as givenName, cu.CUSTOMERNAME as companyName, cu.CODE as companyCode, 
					Count(loginTracker.USERID) as totalLogin, lastWebOrderPlacementDate FROM 
					userLoginDetails loginDetails LEFT JOIN [user] userLkd ON loginDetails.user_id 
					= userLkd.user_id LEFT JOIN Company companyLkd ON companyLkd.ID = userLkd.companyId 
					LEFT JOIN userLoginTracker loginTracker ON loginTracker.USERID = loginDetails.user_id 
					LEFT JOIN customeruser custuser ON custuser.ID = loginDetails.user_id LEFT 
					JOIN (select CUSTOMERID, max(CREATEDATE) lastWebOrderPlacementDate from saleorder 
					group by CUSTOMERID) as so ON so.CUSTOMERID = custuser.CUSTOMERID LEFT JOIN 
					CUSTOMER cu on cu.ID = custuser.CUSTOMERID LEFT JOIN CUSTOMERGROUP cg on 
					cg.ID = cu.CUSTOMERGROUPID LEFT JOIN SALESOFFICE soffice ON soffice.ID = 
					cu.SALESOFFICEID LEFT JOIN SALESUNIT sUnit ON sUnit.ID = soffice.SALESUNITID 
					LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID where loginTracker.loginTime 
					between ? AND ? and (cg.NAME like ? OR cg.CODE like ?) and (soffice.NAME 
					like ? OR soffice.CODE like ?) and (sRegion.NAME like ? OR sRegion.CODE like 
					?) and (sUnit.NAME like ? OR sUnit.CODE like ?) and companyLkd.ID = ? group 
					by userLkd.loginId, loginDetails.user_id, loginDetails.lastloginsuccess, 
					userLkd.GIVENNAME, userLkd.MIDDLENAME, userLkd.FAMILYNAME, cu.CUSTOMERNAME, 
					cu.CODE, lastWebOrderPlacementDate order by loginDetails.user_id asc "/> -->

				<entry key="SEARCH_USERTRACKER_Report"
					value="SELECT userLkd.loginId as id, loginDetails.user_id, loginDetails.lastloginsuccess, CASE WHEN userLkd.middleName IS NOT NULL AND userLkd.FAMILYNAME IS NOT NULL THEN Concat(userLkd.givenName,' ',userLkd.middleName,' ', userLkd.FamilyName)
												WHEN userLkd.middleName IS NULL AND userLkd.familyName IS NOT NULL THEN Concat(userLkd.givenName,' ', userLkd.FamilyName) 
												WHEN userLkd.middleName IS NOT NULL AND userLkd.familyName IS NULL THEN Concat(userLkd.givenName,' ', userLkd.middleName) 	
												ELSE userLkd.givenName END as givenName, cu.CUSTOMERNAME as companyName, 
												cu.CODE as companyCode, Count(loginTracker.USERID) as totalLogin, lastWebOrderPlacementDate
												FROM userLoginDetails loginDetails
												LEFT JOIN [user] userLkd ON loginDetails.user_id = userLkd.user_id
												LEFT JOIN Company companyLkd ON companyLkd.ID = userLkd.companyId
												LEFT JOIN userLoginTracker loginTracker ON loginTracker.USERID = loginDetails.user_id
												LEFT JOIN customeruser custuser ON custuser.ID = loginDetails.user_id
												LEFT JOIN (select CUSTOMERID, max(CREATEDATE) lastWebOrderPlacementDate from saleorder group by CUSTOMERID) as so ON so.CUSTOMERID = custuser.CUSTOMERID 
												LEFT JOIN CUSTOMER cu on cu.ID = custuser.CUSTOMERID
												LEFT JOIN CUSTOMERGROUP cg on cg.ID = cu.CUSTOMERGROUPID
												LEFT JOIN SALESOFFICE soffice ON soffice.ID = cu.SALESOFFICEID
												LEFT JOIN SALESUNIT sUnit ON sUnit.ID = soffice.SALESUNITID
												LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID
												where loginTracker.loginTime between ? AND ? and companyLkd.ID = ?												
												" />
				<entry key="SELECT_USERTRACKER_Report_For_Employee"
					value="SELECT loginDetails.id, loginDetails.user_id, loginDetails.lastloginsuccess, CASE WHEN userLkd.middleName IS NOT NULL AND userLkd.FAMILYNAME IS NOT NULL THEN Concat(userLkd.givenName,' ',userLkd.middleName,' ', userLkd.FamilyName)
												WHEN userLkd.middleName IS NULL AND userLkd.familyName IS NOT NULL THEN Concat(userLkd.givenName,' ', userLkd.FamilyName) 
												WHEN userLkd.middleName IS NOT NULL AND userLkd.familyName IS NULL THEN Concat(userLkd.givenName,' ', userLkd.middleName) 	
												ELSE userLkd.givenName END as givenName, cu.CUSTOMERNAME as companyName, cu.CODE as companyCode, Count(loginTracker.USERID) as totalLogin, max(so.CREATEDATE) as lastWebOrderPlacementDate
												FROM userLoginDetails loginDetails
												LEFT JOIN [user] userLkd ON loginDetails.user_id = userLkd.user_id
												LEFT JOIN Company companyLkd ON companyLkd.ID = userLkd.companyId
												LEFT JOIN userLoginTracker loginTracker ON loginTracker.USERID = loginDetails.user_id
												LEFT JOIN customeruser custuser ON custuser.ID = loginDetails.user_id
												LEFT JOIN CUSTOMER cu on cu.ID = custuser.CUSTOMERID
												LEFT JOIN saleorder so ON so.CUSTOMERID = custuser.CUSTOMERID
												LEFT Join Employee em ON cu.SALESOFFICEID = em.SALESOFFICEID
												where companyLkd.ID = ? and em.ID= ?
												group by  loginDetails.id, loginDetails.user_id, loginDetails.lastloginsuccess, userLkd.GIVENNAME, userLkd.MIDDLENAME, userLkd.FAMILYNAME, cu.CUSTOMERNAME, cu.CODE" />
				<entry key="SEARCH_USERTRACKER_Report_For_Employee"
					value="SELECT userLkd.loginId as id, loginDetails.user_id, loginDetails.lastloginsuccess, CASE WHEN userLkd.middleName IS NOT NULL AND userLkd.FAMILYNAME IS NOT NULL THEN Concat(userLkd.givenName,' ',userLkd.middleName,' ', userLkd.FamilyName)
														WHEN userLkd.middleName IS NULL AND userLkd.familyName IS NOT NULL THEN Concat(userLkd.givenName,' ', userLkd.FamilyName) 
														WHEN userLkd.middleName IS NOT NULL AND userLkd.familyName IS NULL THEN Concat(userLkd.givenName,' ', userLkd.middleName) 	
														ELSE userLkd.givenName END as givenName, cu.CUSTOMERNAME as companyName, 
														cu.CODE as companyCode, Count(loginTracker.USERID) as totalLogin, lastWebOrderPlacementDate
														FROM userLoginDetails loginDetails
														Inner Join [user] userLkd ON loginDetails.user_id = userLkd.user_id
														Inner JOIN Company companyLkd ON companyLkd.ID = userLkd.companyId
														Inner JOIN userLoginTracker loginTracker ON loginTracker.USERID = loginDetails.user_id
														Inner JOIN customeruser custuser ON custuser.ID = loginDetails.user_id
														LEFT JOIN (select CUSTOMERID, max(CREATEDATE) lastWebOrderPlacementDate from saleorder group by CUSTOMERID) as so ON so.CUSTOMERID = custuser.CUSTOMERID
														LEFT JOIN CUSTOMER cu on cu.ID = custuser.CUSTOMERID
														LEFT Join Employee em ON cu.SALESOFFICEID = em.SALESOFFICEID
														LEFT JOIN CUSTOMERGROUP cg on cg.ID = cu.CUSTOMERGROUPID
														LEFT JOIN SALESOFFICE soffice ON soffice.ID = cu.SALESOFFICEID
														LEFT JOIN SALESUNIT sUnit ON sUnit.ID = soffice.SALESUNITID
														LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID
														where loginTracker.loginTime between ? AND ? and (cg.NAME like ? OR cg.CODE like ?) and (soffice.NAME like ? OR soffice.CODE like ?)
														and (sRegion.NAME like ? OR sRegion.CODE like ?) and (sUnit.NAME like ? OR sUnit.CODE like ?) and companyLkd.ID = ? and em.ID = ?
														group by  userLkd.loginId, loginDetails.user_id, loginDetails.lastloginsuccess, userLkd.GIVENNAME, userLkd.MIDDLENAME, userLkd.FAMILYNAME, cu.CUSTOMERNAME, cu.CODE, lastWebOrderPlacementDate
														order by loginDetails.user_id asc
														" />

				<!--// Queries For User Tracker Report -->
				<!-- <entry key="SEARCH_DAILY_USER_LOGIN_Report" value="select cu.CODE 
					as customerCode, cu.CUSTOMERNAME as customerName, soffice.code as salesOfficeCode, 
					soffice.name as salesOfficeName, sUnit.code as salesUnitCode, sUnit.name 
					as salesUnitName, sRegion.code as salesRegionCode, sRegion.name as salesRegionName, 
					location.city as city, location.STATEPROV as state, cg.code as customerType, 
					CONVERT(VARCHAR(25),loginTracker.LOGINTIME,101) as Date,Count(*) as totalLoginForDate 
					FROM userLoginDetails loginDetails INNER JOIN [user] userLkd ON loginDetails.user_id 
					= userLkd.user_id INNER JOIN Company companyLkd ON companyLkd.ID = userLkd.companyId 
					INNER JOIN userLoginTracker loginTracker ON loginTracker.USERID = loginDetails.user_id 
					INNER JOIN customeruser custuser ON custuser.ID = loginDetails.user_id LEFT 
					JOIN CUSTOMER cu on cu.ID = custuser.CUSTOMERID LEFT JOIN CONTACT contact 
					ON cu.MAINCONTACTID=contact.ID LEFT JOIN ADDRESS address ON contact.ADDRESSID=address.ID 
					LEFT JOIN LOCATION location ON address.LOCATIONID=location.ID LEFT JOIN CUSTOMERGROUP 
					cg on cg.ID = cu.CUSTOMERGROUPID LEFT JOIN SALESOFFICE soffice ON soffice.ID 
					= cu.SALESOFFICEID LEFT JOIN SALESUNIT sUnit ON sUnit.ID = soffice.SALESUNITID 
					LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID where loginTracker.LOGINTIME 
					BETWEEN ? AND ? and (cg.NAME like ? OR cg.CODE like ?) and (soffice.NAME 
					like ? OR soffice.CODE like ?) and (sRegion.NAME like ? OR sRegion.CODE like 
					? ) and (sUnit.NAME like ? OR sUnit.CODE like ?) and (cu.CUSTOMERNAME like 
					? or cu.code like ?) and (location.city like ?) and (cu.ACCESSPORTAL LIKE 
					?) and companyLkd.ID = ? group by cu.CODE, CONVERT(VARCHAR(25),loginTracker.LOGINTIME,101), 
					cu.CUSTOMERNAME,soffice.code, soffice.name, sUnit.code, sUnit.name, sRegion.code, 
					sRegion.name, location.city, location.STATEPROV, cg.code order by CONVERT(VARCHAR(25),loginTracker.LOGINTIME,101) 
					desc"/> -->

				<entry key="SEARCH_DAILY_USER_LOGIN_Report"
					value="select cu.CODE as customerCode, cu.CUSTOMERNAME as customerName, 
													soffice.code as salesOfficeCode, soffice.name as salesOfficeName,
													sUnit.code as salesUnitCode, sUnit.name as salesUnitName,
													sRegion.code as salesRegionCode, sRegion.name as salesRegionName,
													location.city as city, location.STATEPROV as state,
													cg.code as customerType,
													CONVERT(VARCHAR(25),loginTracker.LOGINTIME,101) as Date,Count(*) as totalLoginForDate	
													FROM userLoginDetails loginDetails
													INNER JOIN [user] userLkd ON loginDetails.user_id = userLkd.user_id
													INNER JOIN Company companyLkd ON companyLkd.ID = userLkd.companyId
													INNER JOIN userLoginTracker loginTracker ON loginTracker.USERID = loginDetails.user_id
													INNER JOIN customeruser custuser ON custuser.ID = loginDetails.user_id
													LEFT JOIN CUSTOMER cu on cu.ID = custuser.CUSTOMERID
													LEFT JOIN CONTACT contact ON cu.MAINCONTACTID=contact.ID
													LEFT JOIN ADDRESS address ON contact.ADDRESSID=address.ID
													LEFT JOIN LOCATION location ON address.LOCATIONID=location.ID
													LEFT JOIN CUSTOMERGROUP cg on cg.ID = cu.CUSTOMERGROUPID
													LEFT JOIN SALESOFFICE soffice ON soffice.ID = cu.SALESOFFICEID
													LEFT JOIN SALESUNIT sUnit ON sUnit.ID = soffice.SALESUNITID
													LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID
													where loginTracker.LOGINTIME  BETWEEN ? AND ? " />

				<entry key="SEARCH_DAILY_USER_LOGIN_Report_For_Employee"
					value="select userLkd.loginId as id,loginDetails.id,loginDetails.lastloginsuccess, 
													CASE WHEN userLkd.middleName IS NOT NULL AND userLkd.FAMILYNAME IS NOT NULL THEN Concat(userLkd.givenName,' ',userLkd.middleName,' ', userLkd.FamilyName)
															WHEN userLkd.middleName IS NULL AND userLkd.familyName IS NOT NULL THEN Concat(userLkd.givenName,' ', userLkd.FamilyName) 
															WHEN userLkd.middleName IS NOT NULL AND userLkd.familyName IS NULL THEN Concat(userLkd.givenName,' ', userLkd.middleName) 	
															ELSE userLkd.givenName END as givenName, cu.CUSTOMERNAME as companyName, cu.CODE as companyCode ,CONVERT(VARCHAR(25),loginTracker.LOGINTIME,121) as Date,Count(*) as totalLoginForDate, soffice.NAME as salesOfficeName
															FROM userLoginDetails loginDetails
															INNER JOIN userLoginTracker loginTracker ON loginTracker.USERID = loginDetails.user_id
															INNER JOIN [user] userLkd ON loginDetails.user_id = userLkd.user_id
															INNER JOIN customeruser custuser ON custuser.ID = loginDetails.user_id
															INNER JOIN CUSTOMER cu on cu.ID = custuser.CUSTOMERID
															INNER JOIN Employee em ON cu.SALESOFFICEID = em.SALESOFFICEID
															INNER JOIN Company companyLkd ON companyLkd.ID = userLkd.companyId
															LEFT JOIN CUSTOMERGROUP cg on cg.ID = cu.CUSTOMERGROUPID
															LEFT JOIN SALESOFFICE soffice ON soffice.ID = cu.SALESOFFICEID
															LEFT JOIN SALESUNIT sUnit ON sUnit.ID = soffice.SALESUNITID
															LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID
															where loginTracker.LOGINTIME  BETWEEN ? AND ?
															and (cg.NAME like ? OR cg.CODE like ?) and (soffice.NAME like ? OR soffice.CODE like ?) 
															and (sRegion.NAME like ? OR sRegion.CODE like ? ) and 
														    (sUnit.NAME like ? OR sUnit.CODE like ?) and companyLkd.ID = ? AND em.ID = ?
														    group by userLkd.loginId, loginDetails.USER_ID, CONVERT(VARCHAR(25),loginTracker.LOGINTIME,121),loginDetails.id,loginDetails.lastloginsuccess, userLkd.GIVENNAME, userLkd.MIDDLENAME, userLkd.FAMILYNAME, cu.CUSTOMERNAME ,cu.CODE, soffice.NAME
														    order by loginDetails.USER_ID  " />

				<!--// Queries For Numberassignment -->
				<entry key="SEARCH_Numberassignment"
					value="SELECT numberassignment.ID,numberassignment.CREATEDATE,numberassignment.CREATOR,numberassignment.ENTITY_UID,numberassignment.MODIFIER,numberassignment.UPDATEDATE,numberassignment.OPTLOCK,numberassignment.ATTRIBUTENAME,numberassignment.COUNTERNAME,numberassignment.LENGTH,numberassignment.PREFIX,numberassignment.STARTNUMBER,numberassignment.SUFFIX,numberassignment.TEMPLATE,numberassignment.COMPANYID,numberassignment.COUNTERID , COMPANYIDLkd.name as companyidcompanyLkdDesc , COUNTERIDLkd.name as counteridcounterLkdDesc  
                                        FROM numberassignment
                                        LEFT JOIN company COMPANYIDLkd ON numberassignment.COMPANYID = COMPANYIDLkd.ID LEFT JOIN counter COUNTERIDLkd ON numberassignment.COUNTERID = COUNTERIDLkd.ID
                                        where 1=1 AND ID=? 
                                        ORDER BY numberassignment.ID
                                        " />
				<entry key="SELECT_ALL_Numberassignment"
					value="SELECT numberassignment.ID,numberassignment.CREATEDATE,numberassignment.CREATOR,numberassignment.ENTITY_UID,numberassignment.MODIFIER,numberassignment.UPDATEDATE,numberassignment.OPTLOCK,numberassignment.ATTRIBUTENAME,numberassignment.COUNTERNAME,numberassignment.LENGTH,numberassignment.PREFIX,numberassignment.STARTNUMBER,numberassignment.SUFFIX,numberassignment.TEMPLATE,numberassignment.COMPANYID,numberassignment.COUNTERID , companyLkd.name as companyidcompanyLkdDesc  , counterLkd.name as counteridcounterLkdDesc
                                        FROM numberassignment
                                        LEFT JOIN company companyLkd ON numberassignment.COMPANYID = companyLkd.ID LEFT JOIN counter counterLkd ON numberassignment.COUNTERID = counterLkd.ID
                                        ORDER BY numberassignment.ID  
                                        " />
				<entry key="INSERT_Numberassignment"
					value="INSERT INTO numberassignment (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,ATTRIBUTENAME,COUNTERNAME,LENGTH,PREFIX,STARTNUMBER,SUFFIX,TEMPLATE,COMPANYID,COUNTERID)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                        " />
				<entry key="DELETE_Numberassignment_BY_ID"
					value="DELETE from numberassignment where ID= ?  " />
				<entry key="UPDATE_Numberassignment_BY_ID"
					value="UPDATE numberassignment SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, ATTRIBUTENAME = ?, COUNTERNAME = ?, LENGTH = ?, PREFIX = ?, STARTNUMBER = ?, SUFFIX = ?, TEMPLATE = ?, COMPANYID = ?, COUNTERID = ?
                                        WHERE ID=?
                                        " />
				<entry key="SELECT_Numberassignment_BY_ID"
					value=" SELECT numberassignment.ID,numberassignment.CREATEDATE,numberassignment.CREATOR,numberassignment.ENTITY_UID,numberassignment.MODIFIER,numberassignment.UPDATEDATE,numberassignment.OPTLOCK,numberassignment.ATTRIBUTENAME,numberassignment.COUNTERNAME,numberassignment.LENGTH,numberassignment.PREFIX,numberassignment.STARTNUMBER,numberassignment.SUFFIX,numberassignment.TEMPLATE,numberassignment.COMPANYID,numberassignment.COUNTERID , companyCOMPANYIDLkd.name as companyidcompanyLkdDesc  , counterCOUNTERIDLkd.name as counteridcounterLkdDesc
                                        FROM numberassignment
                                        LEFT JOIN company companyCOMPANYIDLkd ON numberassignment.COMPANYID = companyCOMPANYIDLkd.ID LEFT JOIN counter counterCOUNTERIDLkd ON numberassignment.COUNTERID = counterCOUNTERIDLkd.ID
                                        where numberassignment.ID= ?
                                        ORDER BY numberassignment.ID  
                                        " />
				<entry key="SELECT_Numberassignment_By_FKCompanyid"
					value="SELECT numberassignment.ID,numberassignment.CREATEDATE,numberassignment.CREATOR,numberassignment.ENTITY_UID,numberassignment.MODIFIER,numberassignment.UPDATEDATE,numberassignment.OPTLOCK,numberassignment.ATTRIBUTENAME,numberassignment.COUNTERNAME,numberassignment.LENGTH,numberassignment.PREFIX,numberassignment.STARTNUMBER,numberassignment.SUFFIX,numberassignment.TEMPLATE,numberassignment.COMPANYID,numberassignment.COUNTERID 
                                        FROM numberassignment
                                        where numberassignment.COMPANYID = ?
                                        " />
				<entry key="SELECT_Numberassignment_By_FKCounterid"
					value="SELECT numberassignment.ID,numberassignment.CREATEDATE,numberassignment.CREATOR,numberassignment.ENTITY_UID,numberassignment.MODIFIER,numberassignment.UPDATEDATE,numberassignment.OPTLOCK,numberassignment.ATTRIBUTENAME,numberassignment.COUNTERNAME,numberassignment.LENGTH,numberassignment.PREFIX,numberassignment.STARTNUMBER,numberassignment.SUFFIX,numberassignment.TEMPLATE,numberassignment.COMPANYID,numberassignment.COUNTERID 
                                        FROM numberassignment
                                        where numberassignment.COUNTERID = ?
                                        " />
				<!--// Queries For Saleorder -->
				<entry key="SEARCH_Saleorder"
					value="SELECT saleorder.ID,saleorder.CREATEDATE,saleorder.CREATOR,saleorder.ENTITY_UID,saleorder.MODIFIER,saleorder.UPDATEDATE,saleorder.OPTLOCK,saleorder.CUSTOMERNOTES,saleorder.DELETED,saleorder.ORDERPONUMBER,saleorder.WEBORDERGROUP,saleorder.WEBORDERNUMBER,saleorder.CUSTOMERID,saleorder.DELETEDREASONID,saleorder.ORDERHEADERID,saleorder.ERRORMSG,saleorder.ISDIRECTPOSTING,saleorder.ISDELETED , CUSTOMERIDLkd.name as customeridcustomerLkdDesc , DELETEDREASONIDLkd.name as deletedreasonidorderexceptionLkdDesc , ORDERHEADERIDLkd.name as orderheaderidorderheaderLkdDesc 
                                        FROM saleorder  
                                        LEFT JOIN customer CUSTOMERIDLkd ON saleorder.CUSTOMERID = CUSTOMERIDLkd.ID LEFT JOIN orderexception DELETEDREASONIDLkd ON saleorder.DELETEDREASONID = DELETEDREASONIDLkd.ID LEFT JOIN orderheader ORDERHEADERIDLkd ON saleorder.ORDERHEADERID = ORDERHEADERIDLkd.ID  
                                        where 1=1  AND ID=?
                                        ORDER BY saleorder.ID  
                                        " />
				<entry key="SELECT_ALL_Saleorder"
					value="SELECT saleorder.ID,saleorder.CREATEDATE,saleorder.CREATOR,saleorder.ENTITY_UID,saleorder.MODIFIER,saleorder.UPDATEDATE,saleorder.OPTLOCK,saleorder.CUSTOMERNOTES,saleorder.DELETED,saleorder.ORDERPONUMBER,saleorder.WEBORDERGROUP,saleorder.WEBORDERNUMBER,saleorder.CUSTOMERID,saleorder.DELETEDREASONID,saleorder.ORDERHEADERID,saleorder.ERRORMSG,saleorder.ISDIRECTPOSTING,saleorder.ISDELETED , customerLkd.name as customeridcustomerLkdDesc  , orderexceptionLkd.name as deletedreasonidorderexceptionLkdDesc  , orderheaderLkd.name as orderheaderidorderheaderLkdDesc  
                                        FROM saleorder  
                                        LEFT JOIN customer customerLkd ON saleorder.CUSTOMERID = customerLkd.ID LEFT JOIN orderexception orderexceptionLkd ON saleorder.DELETEDREASONID = orderexceptionLkd.ID LEFT JOIN orderheader orderheaderLkd ON saleorder.ORDERHEADERID = orderheaderLkd.ID  
                                        ORDER BY saleorder.ID 
                                        " />
				<entry key="DELETE_Saleorder_BY_ID"
					value="DELETE from saleorder where ID= ?  " />
				<entry key="UPDATE_Saleorder_BY_ID"
					value="UPDATE saleorder SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?,
										   MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, CUSTOMERNOTES = ?,DELETED = ?, ORDERPONUMBER = ?,
										   WEBORDERGROUP = ?, WEBORDERNUMBER = ?, CUSTOMERID = ?, DELETEDREASONID = ?, 
										   ORDERHEADERID = ?, ERRORMSG = ?, ISDIRECTPOSTING = ?  
                                           WHERE ID=?  
                                        " />
				<entry key="SELECT_Saleorder_BY_ID"
					value="  SELECT saleorder.ID,saleorder.CREATEDATE,saleorder.CREATOR,saleorder.ENTITY_UID,saleorder.MODIFIER,
													saleorder.UPDATEDATE,saleorder.OPTLOCK,saleorder.CUSTOMERNOTES,saleorder.DELETED,
													saleorder.ORDERPONUMBER,saleorder.WEBORDERGROUP,saleorder.WEBORDERNUMBER,
													saleorder.CUSTOMERID,saleorder.DELETEDREASONID,saleorder.ORDERHEADERID,
													saleorder.ERRORMSG,saleorder.ISDIRECTPOSTING,saleorder.DELETED as IsDeleted		 
											FROM saleorder  
											where saleorder.ID= ?
											ORDER BY saleorder.ID 
                                        " />
				<entry key="SELECT_Saleorder_By_FKCustomerid"
					value="SELECT saleorder.ID,saleorder.CREATEDATE,saleorder.CREATOR,saleorder.ENTITY_UID,saleorder.MODIFIER,saleorder.UPDATEDATE,saleorder.OPTLOCK,saleorder.CUSTOMERNOTES,saleorder.DELETED,saleorder.ORDERPONUMBER,saleorder.WEBORDERGROUP,saleorder.WEBORDERNUMBER,saleorder.CUSTOMERID,saleorder.DELETEDREASONID,saleorder.ORDERHEADERID,saleorder.ERRORMSG,saleorder.ISDIRECTPOSTING,saleorder.ISDELETED
                                        FROM saleorder  
                                        where saleorder.CUSTOMERID = ?  
                                        " />
				<entry key="SELECT_Saleorder_By_FKDeletedreasonid"
					value="SELECT saleorder.ID,saleorder.CREATEDATE,saleorder.CREATOR,saleorder.ENTITY_UID,saleorder.MODIFIER,saleorder.UPDATEDATE,saleorder.OPTLOCK,saleorder.CUSTOMERNOTES,saleorder.DELETED,saleorder.ORDERPONUMBER,saleorder.WEBORDERGROUP,saleorder.WEBORDERNUMBER,saleorder.CUSTOMERID,saleorder.DELETEDREASONID,saleorder.ORDERHEADERID,saleorder.ERRORMSG,saleorder.ISDIRECTPOSTING,saleorder.ISDELETED
                                        FROM saleorder  
                                        where saleorder.DELETEDREASONID = ?  
                                        " />
				<entry key="SELECT_Saleorder_By_FKOrderheaderid"
					value="SELECT saleorder.ID,saleorder.CREATEDATE,saleorder.CREATOR,saleorder.ENTITY_UID,saleorder.MODIFIER,saleorder.UPDATEDATE,saleorder.OPTLOCK,saleorder.CUSTOMERNOTES,saleorder.DELETED,saleorder.ORDERPONUMBER,saleorder.WEBORDERGROUP,saleorder.WEBORDERNUMBER,saleorder.CUSTOMERID,saleorder.DELETEDREASONID,saleorder.ORDERHEADERID,saleorder.ERRORMSG,saleorder.ISDIRECTPOSTING,saleorder.ISDELETED
                                        FROM saleorder  
                                        where saleorder.ORDERHEADERID = ?  
                                        " />
				<!--// Queries For Orderexception -->
				<entry key="SEARCH_Orderexception"
					value="SELECT orderexception.ID,orderexception.CREATEDATE,orderexception.CREATOR,orderexception.ENTITY_UID,orderexception.MODIFIER,orderexception.UPDATEDATE,orderexception.OPTLOCK,orderexception.ERRORMSG,orderexception.ERRORNO,orderexception.ERRORTYPE,orderexception.ORDERID , ORDERIDLkd.name as orderidsaleorderLkdDesc  
                                        FROM orderexception
                                        LEFT JOIN saleorder ORDERIDLkd ON orderexception.ORDERID = ORDERIDLkd.ID
                                        where 1=1  AND ID=? 
                                        ORDER BY orderexception.ID
                                        " />
				<entry key="SELECT_ALL_Orderexception"
					value="SELECT orderexception.ID,orderexception.CREATEDATE,orderexception.CREATOR,orderexception.ENTITY_UID,orderexception.MODIFIER,orderexception.UPDATEDATE,orderexception.OPTLOCK,orderexception.ERRORMSG,orderexception.ERRORNO,orderexception.ERRORTYPE,orderexception.ORDERID , saleorderLkd.name as orderidsaleorderLkdDesc
                                        FROM orderexception
                                        LEFT JOIN saleorder saleorderLkd ON orderexception.ORDERID = saleorderLkd.ID
                                        ORDER BY orderexception.ID  
                                        " />
				<entry key="INSERT_Orderexception"
					value="INSERT INTO orderexception (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,ERRORMSG,ERRORNO,ERRORTYPE,ORDERID)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                        " />
				<entry key="DELETE_Orderexception_BY_ID"
					value="DELETE from orderexception where ID= ?  " />
				<entry key="UPDATE_Orderexception_BY_ID"
					value="UPDATE orderexception SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, ERRORMSG = ?, ERRORNO = ?, ERRORTYPE = ?, ORDERID = ?
                                        WHERE ID=?
                                        " />
				<entry key="UPDATE_ORDER_EXCEPTION_ORDERID"
					value="UPDATE orderexception SET ORDERID = ? WHERE ID=?" />
				<entry key="SELECT_Orderexception_BY_ID"
					value=" SELECT orderexception.ID,orderexception.CREATEDATE,orderexception.CREATOR,orderexception.ENTITY_UID,orderexception.MODIFIER,orderexception.UPDATEDATE,orderexception.OPTLOCK,orderexception.ERRORMSG,orderexception.ERRORNO,orderexception.ERRORTYPE,orderexception.ORDERID , saleorderORDERIDLkd.name as orderidsaleorderLkdDesc
                                        FROM orderexception
                                        LEFT JOIN saleorder saleorderORDERIDLkd ON orderexception.ORDERID = saleorderORDERIDLkd.ID
                                        where orderexception.ID= ?
                                        ORDER BY orderexception.ID  
                                        " />
				<entry key="SELECT_Orderexception_By_FKOrderid"
					value="SELECT orderexception.ID,orderexception.CREATEDATE,orderexception.CREATOR,orderexception.ENTITY_UID,orderexception.MODIFIER,orderexception.UPDATEDATE,orderexception.OPTLOCK,orderexception.ERRORMSG,orderexception.ERRORNO,orderexception.ERRORTYPE,orderexception.ORDERID 
                                        FROM orderexception
                                        where orderexception.ORDERID = ?
                                        " />
				<!--// Queries For Orderheader -->
				<entry key="SEARCH_Orderheader"
					value="SELECT orderheader.ID,orderheader.CREATEDATE,orderheader.CREATOR,orderheader.ENTITY_UID,orderheader.MODIFIER,orderheader.UPDATEDATE,orderheader.OPTLOCK,orderheader.TRANSPORTER,orderheader.POSTEDORDERHEADERID,orderheader.SALESAREAID,orderheader.SALESGROUPID,orderheader.SALESOFFICEID,orderheader.DELIVERYPRIORITY , POSTEDORDERHEADERIDLkd.name as postedorderheaderidpostedorderheaderLkdDesc , SALESAREAIDLkd.name as salesareaidsalesareaLkdDesc , SALESGROUPIDLkd.name as salesgroupidsalesgroupLkdDesc , SALESOFFICEIDLkd.name as salesofficeidsalesofficeLkdDesc
                                        FROM orderheader 
                                        LEFT JOIN postedorderheader POSTEDORDERHEADERIDLkd ON orderheader.POSTEDORDERHEADERID = POSTEDORDERHEADERIDLkd.ID LEFT JOIN salesarea SALESAREAIDLkd ON orderheader.SALESAREAID = SALESAREAIDLkd.ID LEFT JOIN salesgroup SALESGROUPIDLkd ON orderheader.SALESGROUPID = SALESGROUPIDLkd.ID LEFT JOIN salesoffice SALESOFFICEIDLkd ON orderheader.SALESOFFICEID = SALESOFFICEIDLkd.ID 
                                        where 1=1  AND ID=?  
                                        ORDER BY orderheader.ID 
                                        " />
				<entry key="SELECT_ALL_Orderheader"
					value="SELECT orderheader.ID,orderheader.CREATEDATE,orderheader.CREATOR,orderheader.ENTITY_UID,orderheader.MODIFIER,orderheader.UPDATEDATE,orderheader.OPTLOCK,orderheader.TRANSPORTER,orderheader.POSTEDORDERHEADERID,orderheader.SALESAREAID,orderheader.SALESGROUPID,orderheader.SALESOFFICEID,orderheader.DELIVERYPRIORITY , postedorderheaderLkd.name as postedorderheaderidpostedorderheaderLkdDesc  , salesareaLkd.name as salesareaidsalesareaLkdDesc  , salesgroupLkd.name as salesgroupidsalesgroupLkdDesc  , salesofficeLkd.name as salesofficeidsalesofficeLkdDesc 
                                        FROM orderheader 
                                        LEFT JOIN postedorderheader postedorderheaderLkd ON orderheader.POSTEDORDERHEADERID = postedorderheaderLkd.ID LEFT JOIN salesarea salesareaLkd ON orderheader.SALESAREAID = salesareaLkd.ID LEFT JOIN salesgroup salesgroupLkd ON orderheader.SALESGROUPID = salesgroupLkd.ID LEFT JOIN salesoffice salesofficeLkd ON orderheader.SALESOFFICEID = salesofficeLkd.ID 
                                        ORDER BY orderheader.ID
                                        " />
				<entry key="INSERT_Orderheader"
					value="INSERT INTO ORDERHEADER (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,TRANSPORTER,POSTEDORDERHEADERID,SALESAREAID,SALESGROUPID,SALESOFFICEID,DELIVERYPRIORITY,SHIPTOPARTY)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
                                        " />
				<entry key="DELETE_Orderheader_BY_ID"
					value="DELETE from orderheader where ID= ?  " />
				<entry key="UPDATE_Orderheader_BY_ID"
					value="UPDATE orderheader SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, TRANSPORTER = ?, POSTEDORDERHEADERID = ?, SALESAREAID = ?, SALESGROUPID = ?, SALESOFFICEID = ?, DELIVERYPRIORITY = ? 
                                        WHERE ID=? 
                                        " />
				<entry key="SELECT_Orderheader_BY_ID"
					value=" SELECT orderheader.ID,orderheader.CREATEDATE,orderheader.CREATOR,
														orderheader.ENTITY_UID,orderheader.MODIFIER,orderheader.UPDATEDATE,
														orderheader.OPTLOCK,orderheader.TRANSPORTER,orderheader.POSTEDORDERHEADERID,
														orderheader.SALESAREAID,orderheader.SALESGROUPID,orderheader.SALESOFFICEID,
														orderheader.DELIVERYPRIORITY, orderheader.SHIPTOPARTY
												FROM orderheader 
												where orderheader.ID= ? 
												ORDER BY orderheader.ID                                        " />
				<entry key="SELECT_Orderheader_By_FKPostedorderheaderid"
					value="SELECT orderheader.ID,orderheader.CREATEDATE,orderheader.CREATOR,orderheader.ENTITY_UID,orderheader.MODIFIER,orderheader.UPDATEDATE,orderheader.OPTLOCK,orderheader.TRANSPORTER,orderheader.POSTEDORDERHEADERID,orderheader.SALESAREAID,orderheader.SALESGROUPID,orderheader.SALESOFFICEID,orderheader.DELIVERYPRIORITY  
                                        FROM orderheader 
                                        where orderheader.POSTEDORDERHEADERID = ? 
                                        " />
				<entry key="SELECT_Orderheader_By_FKSalesareaid"
					value="SELECT orderheader.ID,orderheader.CREATEDATE,orderheader.CREATOR,orderheader.ENTITY_UID,orderheader.MODIFIER,orderheader.UPDATEDATE,orderheader.OPTLOCK,orderheader.TRANSPORTER,orderheader.POSTEDORDERHEADERID,orderheader.SALESAREAID,orderheader.SALESGROUPID,orderheader.SALESOFFICEID,orderheader.DELIVERYPRIORITY  
                                        FROM orderheader 
                                        where orderheader.SALESAREAID = ? 
                                        " />
				<entry key="SELECT_Orderheader_By_FKSalesgroupid"
					value="SELECT orderheader.ID,orderheader.CREATEDATE,orderheader.CREATOR,orderheader.ENTITY_UID,orderheader.MODIFIER,orderheader.UPDATEDATE,orderheader.OPTLOCK,orderheader.TRANSPORTER,orderheader.POSTEDORDERHEADERID,orderheader.SALESAREAID,orderheader.SALESGROUPID,orderheader.SALESOFFICEID,orderheader.DELIVERYPRIORITY  
                                        FROM orderheader 
                                        where orderheader.SALESGROUPID = ? 
                                        " />
				<entry key="SELECT_Orderheader_By_FKSalesofficeid"
					value="SELECT orderheader.ID,orderheader.CREATEDATE,orderheader.CREATOR,orderheader.ENTITY_UID,orderheader.MODIFIER,orderheader.UPDATEDATE,orderheader.OPTLOCK,orderheader.TRANSPORTER,orderheader.POSTEDORDERHEADERID,orderheader.SALESAREAID,orderheader.SALESGROUPID,orderheader.SALESOFFICEID,orderheader.DELIVERYPRIORITY  
                                        FROM orderheader 
                                        where orderheader.SALESOFFICEID = ? 
                                        " />
				<!--// Queries For Orderline -->
				<entry key="SEARCH_Orderline"
					value="SELECT orderline.ID,orderline.CREATEDATE,orderline.CREATOR,orderline.ENTITY_UID,orderline.MODIFIER,orderline.UPDATEDATE,orderline.OPTLOCK,orderline.DELETED,orderline.ITEMNUMBER,orderline.QUANTITY,orderline.REQUIREDDATE,orderline.UOM,orderline.MATERIALID,orderline.ORDERHEADERID , MATERIALIDLkd.name as materialidmaterialLkdDesc , ORDERHEADERIDLkd.name as orderheaderidorderheaderLkdDesc 
                                        FROM orderline  
                                        LEFT JOIN material MATERIALIDLkd ON orderline.MATERIALID = MATERIALIDLkd.ID LEFT JOIN orderheader ORDERHEADERIDLkd ON orderline.ORDERHEADERID = ORDERHEADERIDLkd.ID  
                                        where 1=1  AND ID=?   And Deleted = 0
                                        ORDER BY orderline.ID  
                                        " />
				<entry key="SELECT_ALL_Orderline"
					value="SELECT orderline.ID,orderline.CREATEDATE,orderline.CREATOR,orderline.ENTITY_UID,orderline.MODIFIER,orderline.UPDATEDATE,orderline.OPTLOCK,orderline.DELETED,orderline.ITEMNUMBER,orderline.QUANTITY,orderline.REQUIREDDATE,orderline.UOM,orderline.MATERIALID,orderline.ORDERHEADERID , materialLkd.name as materialidmaterialLkdDesc  , orderheaderLkd.name as orderheaderidorderheaderLkdDesc  
                                        FROM orderline  
                                        LEFT JOIN material materialLkd ON orderline.MATERIALID = materialLkd.ID LEFT JOIN orderheader orderheaderLkd ON orderline.ORDERHEADERID = orderheaderLkd.ID  
                                        ORDER BY orderline.ID 
                                        " />
				<entry key="DELETE_Orderline_BY_ID"
					value="DELETE from orderline where ID= ?  " />
				<entry key="UPDATE_Orderline_BY_ID"
					value="UPDATE orderline SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, DELETED = ?, ITEMNUMBER = ?, QUANTITY = ?, REQUIREDDATE = ?, UOM = ?, MATERIALID = ?, ORDERHEADERID = ?  
                                        WHERE ID=?  
                                        " />
				<entry key="SELECT_Orderline_BY_ID"
					value=" SELECT orderline.ID,orderline.CREATEDATE,orderline.CREATOR,orderline.ENTITY_UID,orderline.MODIFIER,orderline.UPDATEDATE,orderline.OPTLOCK,orderline.DELETED,orderline.ITEMNUMBER,orderline.QUANTITY,orderline.REQUIREDDATE,orderline.UOM,orderline.MATERIALID,orderline.ORDERHEADERID , materialMATERIALIDLkd.name as materialidmaterialLkdDesc  , orderheaderORDERHEADERIDLkd.name as orderheaderidorderheaderLkdDesc  
                                        FROM orderline  
                                        LEFT JOIN material materialMATERIALIDLkd ON orderline.MATERIALID = materialMATERIALIDLkd.ID LEFT JOIN orderheader orderheaderORDERHEADERIDLkd ON orderline.ORDERHEADERID = orderheaderORDERHEADERIDLkd.ID  
                                        where orderline.ID= ?  And Deleted = 0  
                                        ORDER BY orderline.ID 
                                        " />
				<entry key="SELECT_Orderline_By_FKMaterialid"
					value="SELECT orderline.ID,orderline.CREATEDATE,orderline.CREATOR,orderline.ENTITY_UID,orderline.MODIFIER,orderline.UPDATEDATE,orderline.OPTLOCK,orderline.DELETED,orderline.ITEMNUMBER,orderline.QUANTITY,orderline.REQUIREDDATE,orderline.UOM,orderline.MATERIALID,orderline.ORDERHEADERID
                                        FROM orderline  
                                        where orderline.MATERIALID = ?  And Deleted = 0  
                                        " />
				<entry key="SELECT_Orderline_By_FKOrderheaderid"
					value="SELECT orderline.ID,orderline.CREATEDATE,orderline.CREATOR,orderline.ENTITY_UID,orderline.MODIFIER,orderline.UPDATEDATE,orderline.OPTLOCK,orderline.DELETED,orderline.ITEMNUMBER,orderline.QUANTITY,orderline.REQUIREDDATE,orderline.UOM,orderline.MATERIALID,orderline.ORDERHEADERID
                                        FROM orderline  
                                        where orderline.ORDERHEADERID = ?  And (Deleted = 0 or DELETED is null)
                                        " />
				<!--// Queries For Orderlineshipping -->
				<entry key="SEARCH_Orderlineshipping"
					value="SELECT orderlineshipping.ID,orderlineshipping.CREATEDATE,orderlineshipping.CREATOR,orderlineshipping.ENTITY_UID,orderlineshipping.MODIFIER,orderlineshipping.UPDATEDATE,orderlineshipping.OPTLOCK,orderlineshipping.DELETED,orderlineshipping.REQUIREDATE,orderlineshipping.REQUIREQTY,orderlineshipping.ORDERLINEID , ORDERLINEIDLkd.name as orderlineidorderlineLkdDesc  
                                        FROM orderlineshipping
                                        LEFT JOIN orderline ORDERLINEIDLkd ON orderlineshipping.ORDERLINEID = ORDERLINEIDLkd.ID
                                        where 1=1  AND ID=? 
                                        ORDER BY orderlineshipping.ID
                                        " />
				<entry key="SELECT_ALL_Orderlineshipping"
					value="SELECT orderlineshipping.ID,orderlineshipping.CREATEDATE,orderlineshipping.CREATOR,orderlineshipping.ENTITY_UID,orderlineshipping.MODIFIER,orderlineshipping.UPDATEDATE,orderlineshipping.OPTLOCK,orderlineshipping.DELETED,orderlineshipping.REQUIREDATE,orderlineshipping.REQUIREQTY,orderlineshipping.ORDERLINEID , orderlineLkd.name as orderlineidorderlineLkdDesc
                                        FROM orderlineshipping
                                        LEFT JOIN orderline orderlineLkd ON orderlineshipping.ORDERLINEID = orderlineLkd.ID
                                        ORDER BY orderlineshipping.ID  
                                        " />
				<entry key="DELETE_Orderlineshipping_BY_ID"
					value="DELETE from orderlineshipping where ID= ?  " />
				<entry key="UPDATE_Orderlineshipping_BY_ID"
					value="UPDATE orderlineshipping SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, DELETED = ?, REQUIREDATE = ?, REQUIREQTY = ?, ORDERLINEID = ?
                                        WHERE ID=?
                                        " />
				<entry key="SELECT_Orderlineshipping_BY_ID"
					value=" SELECT orderlineshipping.ID,orderlineshipping.CREATEDATE,orderlineshipping.CREATOR,orderlineshipping.ENTITY_UID,orderlineshipping.MODIFIER,orderlineshipping.UPDATEDATE,orderlineshipping.OPTLOCK,orderlineshipping.DELETED,orderlineshipping.REQUIREDATE,orderlineshipping.REQUIREQTY,orderlineshipping.ORDERLINEID , orderlineORDERLINEIDLkd.name as orderlineidorderlineLkdDesc
                                        FROM orderlineshipping
                                        LEFT JOIN orderline orderlineORDERLINEIDLkd ON orderlineshipping.ORDERLINEID = orderlineORDERLINEIDLkd.ID
                                        where orderlineshipping.ID= ?
                                        ORDER BY orderlineshipping.ID  
                                        " />
				<entry key="SELECT_Orderlineshipping_By_FKOrderlineid"
					value="SELECT orderlineshipping.ID,orderlineshipping.CREATEDATE,orderlineshipping.CREATOR,orderlineshipping.ENTITY_UID,orderlineshipping.MODIFIER,orderlineshipping.UPDATEDATE,orderlineshipping.OPTLOCK,orderlineshipping.DELETED,orderlineshipping.REQUIREDATE,orderlineshipping.REQUIREQTY,orderlineshipping.ORDERLINEID, CONVERT(VARCHAR(10), REQUIREDATE, 101) as requiredDateDisplay 
                                        FROM orderlineshipping
                                        where orderlineshipping.ORDERLINEID = ? and (Deleted IS NULL OR DELETED = 0)
                                        " />
				<!--// Queries For Orderpartner -->
				<entry key="SEARCH_Orderpartner"
					value="SELECT orderpartner.ID,orderpartner.CREATEDATE,orderpartner.CREATOR,orderpartner.ENTITY_UID,orderpartner.MODIFIER,orderpartner.UPDATEDATE,orderpartner.OPTLOCK,orderpartner.PARTNERNAME,orderpartner.PARTNERNO,orderpartner.PARTNERTYPE,orderpartner.ADDRESSID,orderpartner.ORDERHEADERID , ADDRESSIDLkd.name as addressidaddressLkdDesc , ORDERHEADERIDLkd.name as orderheaderidorderheaderLkdDesc
                                        FROM orderpartner 
                                        LEFT JOIN address ADDRESSIDLkd ON orderpartner.ADDRESSID = ADDRESSIDLkd.ID LEFT JOIN orderheader ORDERHEADERIDLkd ON orderpartner.ORDERHEADERID = ORDERHEADERIDLkd.ID 
                                        where 1=1  AND ID=?  
                                        ORDER BY orderpartner.ID 
                                        " />
				<entry key="SELECT_ALL_Orderpartner"
					value="SELECT orderpartner.ID,orderpartner.CREATEDATE,orderpartner.CREATOR,orderpartner.ENTITY_UID,orderpartner.MODIFIER,orderpartner.UPDATEDATE,orderpartner.OPTLOCK,orderpartner.PARTNERNAME,orderpartner.PARTNERNO,orderpartner.PARTNERTYPE,orderpartner.ADDRESSID,orderpartner.ORDERHEADERID , addressLkd.name as addressidaddressLkdDesc  , orderheaderLkd.name as orderheaderidorderheaderLkdDesc 
                                        FROM orderpartner 
                                        LEFT JOIN address addressLkd ON orderpartner.ADDRESSID = addressLkd.ID LEFT JOIN orderheader orderheaderLkd ON orderpartner.ORDERHEADERID = orderheaderLkd.ID 
                                        ORDER BY orderpartner.ID
                                        " />
				<entry key="DELETE_Orderpartner_BY_ID"
					value="DELETE from orderpartner where ID= ?  " />
				<entry key="UPDATE_Orderpartner_BY_ID"
					value="UPDATE orderpartner SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, PARTNERNAME = ?, PARTNERNO = ?, PARTNERTYPE = ?, ADDRESSID = ?, ORDERHEADERID = ? 
                                        WHERE ID=? 
                                        " />
				<entry key="SELECT_Orderpartner_BY_ID"
					value=" SELECT orderpartner.ID,orderpartner.CREATEDATE,orderpartner.CREATOR,orderpartner.ENTITY_UID,orderpartner.MODIFIER,orderpartner.UPDATEDATE,orderpartner.OPTLOCK,orderpartner.PARTNERNAME,orderpartner.PARTNERNO,orderpartner.PARTNERTYPE,orderpartner.ADDRESSID,orderpartner.ORDERHEADERID , addressADDRESSIDLkd.name as addressidaddressLkdDesc  , orderheaderORDERHEADERIDLkd.name as orderheaderidorderheaderLkdDesc 
                                        FROM orderpartner 
                                        LEFT JOIN address addressADDRESSIDLkd ON orderpartner.ADDRESSID = addressADDRESSIDLkd.ID LEFT JOIN orderheader orderheaderORDERHEADERIDLkd ON orderpartner.ORDERHEADERID = orderheaderORDERHEADERIDLkd.ID 
                                        where orderpartner.ID= ? 
                                        ORDER BY orderpartner.ID
                                        " />
				<entry key="SELECT_Orderpartner_By_FKAddressid"
					value="SELECT orderpartner.ID,orderpartner.CREATEDATE,orderpartner.CREATOR,orderpartner.ENTITY_UID,orderpartner.MODIFIER,orderpartner.UPDATEDATE,orderpartner.OPTLOCK,orderpartner.PARTNERNAME,orderpartner.PARTNERNO,orderpartner.PARTNERTYPE,orderpartner.ADDRESSID,orderpartner.ORDERHEADERID  
                                        FROM orderpartner 
                                        where orderpartner.ADDRESSID = ? 
                                        " />
				<entry key="SELECT_Orderpartner_By_FKOrderheaderid"
					value="SELECT orderpartner.ID,orderpartner.CREATEDATE,orderpartner.CREATOR,orderpartner.ENTITY_UID,orderpartner.MODIFIER,orderpartner.UPDATEDATE,orderpartner.OPTLOCK,orderpartner.PARTNERNAME,orderpartner.PARTNERNO,orderpartner.PARTNERTYPE,orderpartner.ADDRESSID,orderpartner.ORDERHEADERID  
                                        FROM orderpartner 
                                        where orderpartner.ORDERHEADERID = ? 
                                        " />
				<!--// Queries For Salesarea -->
				<entry key="SEARCH_Salesarea"
					value="SELECT salesarea.ID,salesarea.CREATEDATE,salesarea.CREATOR,salesarea.ENTITY_UID,salesarea.MODIFIER,salesarea.UPDATEDATE,salesarea.OPTLOCK,salesarea.DISTCHANNELID,salesarea.DIVISIONID,salesarea.SALESORGID,salesarea.ISDELETED , DISTCHANNELIDLkd.name as distchanneliddistributionchannelLkdDesc , SALESORGIDLkd.name as salesorgidsalesorganisationLkdDesc 
                                        FROM salesarea  
                                        LEFT JOIN distributionchannel DISTCHANNELIDLkd ON salesarea.DISTCHANNELID = DISTCHANNELIDLkd.ID LEFT JOIN salesorganisation SALESORGIDLkd ON salesarea.SALESORGID = SALESORGIDLkd.ID  
                                        where 1=1  AND ID=?
                                        ORDER BY salesarea.ID  
                                        " />
				<entry key="SELECT_ALL_Salesarea"
					value="SELECT salesarea.ID,salesarea.CREATEDATE,salesarea.CREATOR,salesarea.ENTITY_UID,salesarea.MODIFIER,salesarea.UPDATEDATE,salesarea.OPTLOCK,salesarea.DISTCHANNELID,salesarea.DIVISIONID,salesarea.SALESORGID,salesarea.ISDELETED , distributionchannelLkd.name as distchanneliddistributionchannelLkdDesc  , salesorganisationLkd.name as salesorgidsalesorganisationLkdDesc  
                                        FROM salesarea  
                                        LEFT JOIN distributionchannel distributionchannelLkd ON salesarea.DISTCHANNELID = distributionchannelLkd.ID LEFT JOIN salesorganisation salesorganisationLkd ON salesarea.SALESORGID = salesorganisationLkd.ID  
                                        ORDER BY salesarea.ID 
                                        " />
				<entry key="INSERT_Salesarea"
					value="INSERT INTO salesarea (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,DISTCHANNELID,DIVISIONID,SALESORGID)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)  
                                        " />
				<entry key="DELETE_Salesarea_BY_ID"
					value="DELETE from salesarea where ID= ?  " />
				<entry key="UPDATE_Salesarea_BY_ID"
					value="UPDATE salesarea SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, DISTCHANNELID = ?, DIVISIONID = ?, SALESORGID = ?, ISDELETED = ?  
                                        WHERE ID=?  
                                        " />
				<entry key="SELECT_Salesarea_BY_ID"
					value=" SELECT salesarea.ID,salesarea.CREATEDATE,salesarea.CREATOR,salesarea.ENTITY_UID,salesarea.MODIFIER,salesarea.UPDATEDATE,salesarea.OPTLOCK,salesarea.DISTCHANNELID,salesarea.DIVISIONID,salesarea.SALESORGID,salesarea.ISDELETED , distributionchannelDISTCHANNELIDLkd.name as distchanneliddistributionchannelLkdDesc  , salesorganisationSALESORGIDLkd.name as salesorgidsalesorganisationLkdDesc  
                                        FROM salesarea  
                                        LEFT JOIN distributionchannel distributionchannelDISTCHANNELIDLkd ON salesarea.DISTCHANNELID = distributionchannelDISTCHANNELIDLkd.ID LEFT JOIN salesorganisation salesorganisationSALESORGIDLkd ON salesarea.SALESORGID = salesorganisationSALESORGIDLkd.ID  
                                        where salesarea.ID= ?  
                                        ORDER BY salesarea.ID 
                                        " />
				<entry key="SELECT_Salesarea_By_FKDistchannelid"
					value="SELECT salesarea.ID,salesarea.CREATEDATE,salesarea.CREATOR,salesarea.ENTITY_UID,salesarea.MODIFIER,salesarea.UPDATEDATE,salesarea.OPTLOCK,salesarea.DISTCHANNELID,salesarea.DIVISIONID,salesarea.SALESORGID,salesarea.ISDELETED
                                        FROM salesarea  
                                        where salesarea.DISTCHANNELID = ?  
                                        " />
				<entry key="SELECT_Salesarea_By_FKSalesorgid"
					value="SELECT salesarea.ID,salesarea.CREATEDATE,salesarea.CREATOR,salesarea.ENTITY_UID,salesarea.MODIFIER,salesarea.UPDATEDATE,salesarea.OPTLOCK,salesarea.DISTCHANNELID,salesarea.DIVISIONID,salesarea.SALESORGID,salesarea.ISDELETED
                                        FROM salesarea  
                                        where salesarea.SALESORGID = ?  
                                        " />
				<!--// Queries For CreditRepGroup -->


				<entry key="SELECT_ALL_CreditRepGroup"
					value="select * from CREDIT_REP_GROUP" />
				<!--// Queries For Salesorganisation -->
				<entry key="SEARCH_Salesorganisation"
					value="SELECT salesorganisation.ID,salesorganisation.CREATEDATE,salesorganisation.CREATOR,salesorganisation.ENTITY_UID,salesorganisation.MODIFIER,salesorganisation.UPDATEDATE,salesorganisation.OPTLOCK,salesorganisation.CODE,salesorganisation.NAME,salesorganisation.ENTERPRISEID,salesorganisation.ISDELETED , ENTERPRISEIDLkd.name as enterpriseidenterpriseLkdDesc  
                                        FROM salesorganisation
                                        LEFT JOIN enterprise ENTERPRISEIDLkd ON salesorganisation.ENTERPRISEID = ENTERPRISEIDLkd.ID
                                        where 1=1  AND ID=? 
                                        ORDER BY salesorganisation.ID
                                        " />
				<entry key="SELECT_ALL_Salesorganisation"
					value="SELECT salesorganisation.ID,salesorganisation.CREATEDATE,salesorganisation.CREATOR,salesorganisation.ENTITY_UID,salesorganisation.MODIFIER,salesorganisation.UPDATEDATE,salesorganisation.OPTLOCK,salesorganisation.CODE,salesorganisation.NAME,salesorganisation.ENTERPRISEID,salesorganisation.ISDELETED , enterpriseLkd.code as enterpriseidenterpriseLkdDesc
                                        FROM salesorganisation
                                        LEFT JOIN enterprise enterpriseLkd ON salesorganisation.ENTERPRISEID = enterpriseLkd.ID
                                       where salesorganisation.ISDELETED=0  ORDER BY salesorganisation.ID  
                                        " />


				<entry key="INSERT_Salesorganisation"
					value="INSERT INTO salesorganisation (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,CODE,NAME,ENTERPRISEID,ISDELETED) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                        " />
				<entry key="DELETE_Salesorganisation_BY_ID"
					value="DELETE from salesorganisation where ID= ?  " />
				<entry key="UPDATE_Salesorganisation_BY_ID"
					value="UPDATE salesorganisation SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, CODE = ?, NAME = ?, ENTERPRISEID = ?, ISDELETED = ?
                                        WHERE ID=?
                                        " />
				<entry key="SELECT_Salesorganisation_BY_ID"
					value=" SELECT salesorganisation.ID,salesorganisation.CREATEDATE,salesorganisation.CREATOR,salesorganisation.ENTITY_UID,salesorganisation.MODIFIER,salesorganisation.UPDATEDATE,salesorganisation.OPTLOCK,salesorganisation.CODE,salesorganisation.NAME,salesorganisation.ENTERPRISEID,salesorganisation.ISDELETED , enterpriseENTERPRISEIDLkd.name as enterpriseidenterpriseLkdDesc
                                        FROM salesorganisation
                                        LEFT JOIN enterprise enterpriseENTERPRISEIDLkd ON salesorganisation.ENTERPRISEID = enterpriseENTERPRISEIDLkd.ID
                                        where salesorganisation.ID= ? and salesorganisation.ISDELETED=0
                                        ORDER BY salesorganisation.ID  
                                        " />
				<entry key="SELECT_Salesorganisation_By_FKEnterpriseid"
					value="SELECT salesorganisation.ID,salesorganisation.CREATEDATE,salesorganisation.CREATOR,salesorganisation.ENTITY_UID,salesorganisation.MODIFIER,salesorganisation.UPDATEDATE,salesorganisation.OPTLOCK,salesorganisation.CODE,salesorganisation.NAME,salesorganisation.ENTERPRISEID,salesorganisation.ISDELETED 
                                        FROM salesorganisation
                                        where salesorganisation.ENTERPRISEID = ?
                                        " />
				<!--// Queries For Distributionchannel -->
				<entry key="SEARCH_Distributionchannel"
					value="SELECT distributionchannel.ID,distributionchannel.CREATEDATE,distributionchannel.CREATOR,distributionchannel.ENTITY_UID,distributionchannel.MODIFIER,distributionchannel.UPDATEDATE,distributionchannel.OPTLOCK,distributionchannel.code,distributionchannel.name
                                        FROM distributionchannel 
                                        where 1=1  AND ID=?  
                                        ORDER BY distributionchannel.ID 
                                        " />
				<entry key="SELECT_ALL_Distributionchannel"
					value="SELECT distributionchannel.ID,distributionchannel.CREATEDATE,distributionchannel.CREATOR,distributionchannel.ENTITY_UID,distributionchannel.MODIFIER,distributionchannel.UPDATEDATE,distributionchannel.OPTLOCK,distributionchannel.code,distributionchannel.name
                                        FROM distributionchannel 
                                        ORDER BY distributionchannel.ID
                                        " />
				<entry key="INSERT_Distributionchannel"
					value="INSERT INTO distributionchannel (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,code,name)
                                         VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?) 
                                        " />
				<entry key="DELETE_Distributionchannel_BY_ID"
					value="DELETE from distributionchannel where ID= ?  " />
				<entry key="UPDATE_Distributionchannel_BY_ID"
					value="UPDATE distributionchannel SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, code = ?, name = ? 
                                        WHERE ID=? 
                                        " />
				<entry key="SELECT_Distributionchannel_BY_ID"
					value=" SELECT distributionchannel.ID,distributionchannel.CREATEDATE,distributionchannel.CREATOR,distributionchannel.ENTITY_UID,distributionchannel.MODIFIER,distributionchannel.UPDATEDATE,distributionchannel.OPTLOCK,distributionchannel.code,distributionchannel.name
                                        FROM distributionchannel 
                                        where distributionchannel.ID= ? 
                                        ORDER BY distributionchannel.ID
                                        " />

				<entry key="SELECT_ALL_Material"
					value="SELECT mat.ID, mat.CREATEDATE, mat.CREATOR, mat.ENTITY_UID, mat.MODIFIER, 
										  mat.UPDATEDATE, mat.OPTLOCK, mat.ACTIVE, mat.ARTICLENO, mat.DESCRIPTION,
										  mat.MATERIALGROUP, mat.UOM, mat.ENTERPRISEID
										 FROM MATERIAL mat
										 INNER JOIN ENTERPRISE en ON en.ID = mat.ENTERPRISEID
										 WHERE en.COMPANYID = ? and mat.ACTIVE=1 ORDER BY mat.ID " />

				<entry key="SELECT_Customer_By_Customer_Id"
					value="SELECT c.ID
      ,c.CREATEDATE
      ,c.CREATOR
      ,c.ENTITY_UID
      ,c.MODIFIER
      ,c.UPDATEDATE
      ,c.OPTLOCK
      ,c.ACCESSKEY
      ,c.ACCESSPORTAL
      ,c.CODE
      ,c.HEADQUARTER
      ,c.CUSTOMERNAME
      ,c.SINGLELOCATION
      ,c.CUSTOMERGROUPID
      ,c.MAINCONTACTID
      ,c.PARENTHQID
      ,c.SALESAREAID
      ,c.SALESGROUPID
      ,c.SALESOFFICEID
      ,c.SALESPROMOTER
      ,c.SALESPROMOTERID
      ,c.ISDIRECTPOSTING
      ,c.VIRTUALACCOUNT
      ,c.ACTIVATION_DATE
      ,c.DEACTIVATION_DATE  
      , c.STATUSUPDATEDBY    
      ,contactLkd.email as email
      ,contactLkd.mobile as mobileNumber
      ,c.ISDELETED FROM CUSTOMER c with (NOLOCK)
      LEFT JOIN contact contactLkd with (NOLOCK) ON c.MAINCONTACTID = contactLkd.ID  
      where c.ID = ?" />

				<entry key="SELECT_Numberassignment_BY_documentName"
					value=" SELECT numberassignment.ID,numberassignment.CREATEDATE,numberassignment.CREATOR,numberassignment.ENTITY_UID,numberassignment.MODIFIER,numberassignment.UPDATEDATE,numberassignment.OPTLOCK,numberassignment.ATTRIBUTENAME,numberassignment.COUNTERNAME,numberassignment.LENGTH,numberassignment.PREFIX,numberassignment.STARTNUMBER,numberassignment.SUFFIX,numberassignment.TEMPLATE,numberassignment.COMPANYID,numberassignment.COUNTERID 
 FROM NUMBERASSIGNMENT numberassignment where numberassignment.COUNTERNAME= ?" />


				<entry key="INSERT_Saleorder"
					value="INSERT INTO SALEORDER (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,CUSTOMERNOTES,DELETED,ORDERPONUMBER,WEBORDERGROUP,WEBORDERNUMBER,CUSTOMERID,DELETEDREASONID,ORDERHEADERID,ERRORMSG,ISDIRECTPOSTING,ISMOBILE)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)  
	                                       " />
				<entry key="Update_SaleOrder_CustomerNotes"
					value="Update SALEORDER set CUSTOMERNOTES = ?, UPDATEDATE = ?, MODIFIER = ? Where ID = ?" />
				<entry key="Update_OrderHeader_transporter"
					value="Update ORDERHEADER set TRANSPORTER = ?, UPDATEDATE = ?, MODIFIER = ? Where ID = ? " />

				<entry key="INSERT_Orderline"
					value="INSERT INTO ORDERLINE (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,DELETED,ITEMNUMBER,QUANTITY,REQUIREDDATE,UOM,MATERIALID,ORDERHEADERID)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)  
 " />
				<entry key="DELETE_OrderLineShipping_Of_OrderLine"
					value="Update ORDERLINESHIPPING Set DELETED=1, MODIFIER = ?, UPDATEDATE = ? where ORDERLINEID = ?" />
				<entry key="Update_OrderLine"
					value="Update ORDERLINE set MATERIALID = ?, REQUIREDDATE=? , QUANTITY = ?, ITEMNUMBER = ?, UPDATEDATE = ?, MODIFIER = ? where ID = ?" />

				<entry key="INSERT_Address"
					value="INSERT INTO ADDRESS (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,FLOOR,HOUSENUMBER,NAME,STREETNAME,STREETSIDE,LOCATIONID,ISDELETED)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)  
                                       " />

				<entry key="INSERT_Location"
					value="INSERT INTO LOCATION (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,CITY,COUNTRY,POSTALCODE,STATEPROV,ISDELETED,DISTRICT)
   VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?) 
  " />

				<entry key="INSERT_Orderpartner"
					value="INSERT INTO ORDERPARTNER (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,PARTNERNAME,PARTNERNO,PARTNERTYPE,ADDRESSID,ORDERHEADERID)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
                                      " />

				<entry key="INSERT_Orderlineshipping"
					value="INSERT INTO ORDERLINESHIPPING (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,DELETED,REQUIREDATE,REQUIREQTY,ORDERLINEID)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
  " />

				<entry key="SELECT_Company_BY_ID"
					value=" SELECT company.ID,company.CREATEDATE,company.CREATOR,company.ENTITY_UID,company.MODIFIER,company.UPDATEDATE,
			company.OPTLOCK,company.COMPANYID,company.CURRENCY,company.FAILEDLOGINS,company.HOMEURL,company.INITIALIZED,
			company.KEYOBJ,company.LOCALE,company.LONGDATE,company.DOMAIN,company.NAME,company.OTHERDATE,company.PASSWORDRESET,
			company.PASSWORDTRACKER,company.PORTALURL,company.SHORTDATE,company.TIMEZONE,company.COMPANYLOGOID,company.MAINCONTACTID,
			company.PORTALLOGOID FROM COMPANY company where company.ID= ?  ORDER BY company.ID" />


				<entry key="SELECT_Counter_By_CounterId"
					value=" SELECT *  FROM COUNTER where COUNTER.ID= ?" />
				<entry key="UPDATE_Counter_BY_ID"
					value="UPDATE COUNTER SET UPDATEDATE = ?, OPTLOCK = ?, COUNTER = ? WHERE id=? " />

				<entry key="FIND_Distribution_Channel_By_Cutomer_Id"
					value="select d.ID
      ,d.CREATEDATE
      ,d.CREATOR
      ,d.ENTITY_UID
      ,d.MODIFIER
      ,d.UPDATEDATE
      ,d.OPTLOCK
      ,d.code
      ,d.name from DISTRIBUTIONCHANNEL d
	inner join SALESAREA on d.ID=SALESAREA.DISTCHANNELID inner join CUSTOMER on CUSTOMER.SALESAREAID=SALESAREA.ID where CUSTOMER.id=?" />


				<!--// Queries For Mbmessage -->
				<entry key="INSERT_Mbmessage"
					value="INSERT INTO mbmessage (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,ATTACHMENTS,BODY,SUBJECT,THREADID,USERID,ISDELETED)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)  
                                        " />
				<entry key="DELETE_Mbmessage_BY_ID"
					value="UPDATE mbmessage SET ISDELETED = 1
                                        WHERE ID=? " />
				<entry key="SELECT_Mbmessage_By_FKThreadid"
					value="SELECT mbmessage.ID,mbmessage.CREATEDATE,mbmessage.CREATOR,mbmessage.ENTITY_UID,mbmessage.MODIFIER,mbmessage.UPDATEDATE,mbmessage.OPTLOCK,mbmessage.ATTACHMENTS,mbmessage.BODY,mbmessage.SUBJECT,mbmessage.THREADID,mbmessage.USERID,mbmessage.ISDELETED
                                        FROM mbmessage  
                                        where mbmessage.ISDELETED=0 AND mbmessage.THREADID = ?  
                                        " />
				<!--// Queries For Mbthread -->
				<entry key="SELECT_ALL_Mbthread"
					value="SELECT mbthread.ID,mbthread.CREATEDATE,mbthread.CREATOR,mbthread.ENTITY_UID,mbthread.MODIFIER,mbthread.UPDATEDATE,mbthread.OPTLOCK,mbthread.TOPICID,mbthread.ISDELETED , mbtopicLkd.name as topicName
                                        FROM mbthread
                                        LEFT JOIN mbtopic mbtopicLkd ON mbthread.TOPICID = mbtopicLkd.ID
                                        LEFT JOIN company companyLkd ON mbtopicLkd.COMPANYID = companyLkd.ID 
                                        where mbthread.ISDELETED = 0
                                        and companyLkd.ID=?
                                        ORDER BY mbthread.ID  
                                        " />
				<entry key="INSERT_Mbthread"
					value="INSERT INTO mbthread (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,TOPICID,ISDELETED)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)
                                        " />
				<entry key="DELETE_Mbthread_BY_ID"
					value="UPDATE mbthread SET ISDELETED = 1
                                        WHERE ID=? " />
				<entry key="SELECT_Mbthread_By_FKTopicid"
					value="SELECT mbthread.ID,mbthread.CREATEDATE,mbthread.CREATOR,mbthread.ENTITY_UID,mbthread.MODIFIER,mbthread.UPDATEDATE,mbthread.OPTLOCK,mbthread.TOPICID,mbthread.ISDELETED 
                                        FROM mbthread
                                        where mbthread.ISDELETED = 0 AND mbthread.TOPICID = ?
                                        " />
				<!--// Queries For Mbtopic -->
				<entry key="SEARCH_Mbtopic"
					value="SELECT mbtopic.ID,mbtopic.CREATEDATE,mbtopic.CREATOR,mbtopic.ENTITY_UID,mbtopic.MODIFIER,mbtopic.UPDATEDATE,mbtopic.OPTLOCK,mbtopic.DESCRIPTION,mbtopic.EMAIL,mbtopic.NAME,mbtopic.COMPANYID,mbtopic.MODERATORID,mbtopic.ISDELETED , companyLkd.name as companyName
                                        FROM mbtopic 
                                        LEFT JOIN company companyLkd ON mbtopic.COMPANYID = companyLkd.ID LEFT JOIN [user] MODERATORIDLkd ON mbtopic.MODERATORID = MODERATORIDLkd.user_id 
                                        where mbtopic.ISDELETED=0  AND mbtopic.name like ?
                                        and companyLkd.ID = ? 
                                        ORDER BY mbtopic.ID 
                                        " />
				<entry key="SELECT_ALL_Mbtopic"
					value="SELECT mbtopic.ID,mbtopic.CREATEDATE,mbtopic.CREATOR,mbtopic.ENTITY_UID,mbtopic.MODIFIER,mbtopic.UPDATEDATE,mbtopic.OPTLOCK,mbtopic.DESCRIPTION,mbtopic.EMAIL,mbtopic.NAME,mbtopic.COMPANYID,mbtopic.MODERATORID,mbtopic.ISDELETED , companyLkd.name as companyName 
                                        FROM mbtopic 
                                        LEFT JOIN company companyLkd ON mbtopic.COMPANYID = companyLkd.ID LEFT JOIN [user] userLkd ON mbtopic.MODERATORID = userLkd.user_id
                                        where mbtopic.ISDELETED=0
                                        and companyLkd.ID = ? 
                                        ORDER BY mbtopic.ID
                                        " />
				<entry key="INSERT_Mbtopic"
					value="INSERT INTO mbtopic (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,DESCRIPTION,EMAIL,NAME,COMPANYID,MODERATORID,ISDELETED)
                                         VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
                                        " />
				<entry key="DELETE_Mbtopic_BY_ID"
					value="UPDATE mbtopic SET ISDELETED = 1
                                        WHERE ID=?" />
				<entry key="UPDATE_Mbtopic_BY_ID"
					value="UPDATE mbtopic SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, DESCRIPTION = ?, EMAIL = ?, NAME = ?, COMPANYID = ?, MODERATORID = ?, ISDELETED = ? 
                                        WHERE ID=? 
                                        " />
				<entry key="SELECT_Mbtopic_BY_ID"
					value="SELECT mbtopic.ID,mbtopic.CREATEDATE,mbtopic.CREATOR,mbtopic.ENTITY_UID,mbtopic.MODIFIER,mbtopic.UPDATEDATE,mbtopic.OPTLOCK,mbtopic.DESCRIPTION,mbtopic.EMAIL,mbtopic.NAME,mbtopic.COMPANYID,mbtopic.MODERATORID,mbtopic.ISDELETED
                                        FROM mbtopic 
                                        where mbtopic.ID= ? AND mbtopic.ISDELETED=0 
                                        " />
				<!--// Queries For Salesoffice -->
				<entry key="SEARCH_Salesoffice"
					value="SELECT salesoffice.ID,salesoffice.CREATEDATE,salesoffice.CREATOR,salesoffice.ENTITY_UID,salesoffice.MODIFIER,salesoffice.UPDATEDATE,salesoffice.OPTLOCK,salesoffice.CODE,salesoffice.NAME,salesoffice.SALESUNITID,salesoffice.ISDELETED , SALESUNITIDLkd.name as salesunitidsalesunitLkdDesc 
                                        FROM salesoffice  
                                        LEFT JOIN salesunit SALESUNITIDLkd ON salesoffice.SALESUNITID = SALESUNITIDLkd.ID  
                                        where 1=1  AND ID=?
                                        ORDER BY salesoffice.ID  
                                        " />
				<entry key="SELECT_ALL_Salesoffices"
					value="SELECT salesoffice.ID,salesoffice.CREATEDATE,salesoffice.CREATOR,salesoffice.ENTITY_UID,salesoffice.MODIFIER,salesoffice.UPDATEDATE,salesoffice.OPTLOCK,salesoffice.CODE,salesoffice.NAME,salesoffice.SALESUNITID,salesoffice.ISDELETED , salesunitLkd.name as salesunitidsalesunitLkdDesc  
                                        FROM salesoffice  
                                        LEFT JOIN salesunit salesunitLkd ON salesoffice.SALESUNITID = salesunitLkd.ID  
                                        ORDER BY salesoffice.ID 
                                        " />
				<entry key="INSERT_Salesoffice"
					value="INSERT INTO salesoffice (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,CODE,NAME,SALESUNITID)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)  
                                        " />
				<entry key="DELETE_Salesoffice_BY_ID"
					value="DELETE from salesoffice where ID= ?  " />
				<entry key="UPDATE_Salesoffice_BY_ID"
					value="UPDATE salesoffice SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, CODE = ?, NAME = ?, SALESUNITID = ?, ISDELETED = ?  
                                        WHERE ID=?  
                                        " />
				<entry key="SELECT_Salesoffice_BY_ID"
					value=" SELECT salesoffice.ID,salesoffice.CREATEDATE,salesoffice.CREATOR,salesoffice.ENTITY_UID,salesoffice.MODIFIER,salesoffice.UPDATEDATE,salesoffice.OPTLOCK,salesoffice.CODE,salesoffice.NAME,salesoffice.SALESUNITID,salesoffice.ISDELETED , salesunitSALESUNITIDLkd.name as salesunitidsalesunitLkdDesc  
                                        FROM salesoffice  
                                        LEFT JOIN salesunit salesunitSALESUNITIDLkd ON salesoffice.SALESUNITID = salesunitSALESUNITIDLkd.ID  
                                        where salesoffice.ID= ?  
                                        ORDER BY salesoffice.ID 
                                        " />
				<entry key="SELECT_Salesoffice_By_FKSalesunitid"
					value="SELECT salesoffice.ID,salesoffice.CREATEDATE,salesoffice.CREATOR,salesoffice.ENTITY_UID,salesoffice.MODIFIER,salesoffice.UPDATEDATE,salesoffice.OPTLOCK,salesoffice.CODE,salesoffice.NAME,salesoffice.SALESUNITID,salesoffice.ISDELETED
                                        FROM salesoffice  
                                        where salesoffice.SALESUNITID = ?  
                                        " />
				<!--// Queries For Salesunit -->
				<entry key="SEARCH_Salesunit"
					value="SELECT SALESUNIT.ID,SALESUNIT.CREATEDATE,SALESUNIT.CREATOR,SALESUNIT.ENTITY_UID,SALESUNIT.MODIFIER,SALESUNIT.UPDATEDATE,SALESUNIT.OPTLOCK,SALESUNIT.CODE,SALESUNIT.NAME,SALESUNIT.SALESREGIONID,SALESUNIT.ZONALHEADID,SALESUNIT.ISDELETED , SALESREGIONIDLkd.name as salesregionidsalesregionLkdDesc , ZONALHEADIDLkd.name as zonalheadidzonalheadLkdDesc  
                                        FROM SALESUNIT
                                        LEFT JOIN salesregion SALESREGIONIDLkd ON SALESUNIT.SALESREGIONID = SALESREGIONIDLkd.ID LEFT JOIN zonalhead ZONALHEADIDLkd ON SALESUNIT.ZONALHEADID = ZONALHEADIDLkd.ID
                                        where 1=1  AND ID=? 
                                        ORDER BY SALESUNIT.ID
                                        " />
				<entry key="SELECT_ALL_Salesunits"
					value="SELECT SALESUNIT.ID,SALESUNIT.CREATEDATE,SALESUNIT.CREATOR,SALESUNIT.ENTITY_UID,SALESUNIT.MODIFIER,SALESUNIT.UPDATEDATE,SALESUNIT.OPTLOCK,SALESUNIT.CODE,SALESUNIT.NAME,SALESUNIT.SALESREGIONID,SALESUNIT.ZONALHEADID,SALESUNIT.ISDELETED , salesregionLkd.name as salesregionidsalesregionLkdDesc  , zonalheadLkd.description as zonalheadidzonalheadLkdDesc
                                        FROM SALESUNIT
                                        LEFT JOIN salesregion salesregionLkd ON SALESUNIT.SALESREGIONID = salesregionLkd.ID LEFT JOIN zonalhead zonalheadLkd ON SALESUNIT.ZONALHEADID = zonalheadLkd.ID
                                        ORDER BY SALESUNIT.ID  
                                        " />
				<entry key="INSERT_Salesunit"
					value="INSERT INTO SALESUNIT (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,CODE,NAME,SALESREGIONID,ZONALHEADID,ISDELETED)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                        " />
				<entry key="DELETE_Salesunit_BY_ID"
					value="DELETE from SALESUNIT where ID= ?  " />
				<entry key="UPDATE_Salesunit_BY_ID"
					value="UPDATE SALESUNIT SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, CODE = ?, NAME = ?, SALESREGIONID = ?, ZONALHEADID = ?, ISDELETED = ?
                                        WHERE ID=?
                                        " />
				<entry key="SELECT_Salesunit_BY_ID"
					value=" SELECT SALESUNIT.ID,SALESUNIT.CREATEDATE,SALESUNIT.CREATOR,SALESUNIT.ENTITY_UID,SALESUNIT.MODIFIER,SALESUNIT.UPDATEDATE,SALESUNIT.OPTLOCK,SALESUNIT.CODE,SALESUNIT.NAME,SALESUNIT.SALESREGIONID,SALESUNIT.ZONALHEADID,SALESUNIT.ISDELETED , salesregionSALESREGIONIDLkd.name as salesregionidsalesregionLkdDesc  , zonalheadZONALHEADIDLkd.name as zonalheadidzonalheadLkdDesc
                                        FROM SALESUNIT
                                        LEFT JOIN salesregion salesregionSALESREGIONIDLkd ON SALESUNIT.SALESREGIONID = salesregionSALESREGIONIDLkd.ID LEFT JOIN zonalhead zonalheadZONALHEADIDLkd ON SALESUNIT.ZONALHEADID = zonalheadZONALHEADIDLkd.ID
                                        where SALESUNIT.ID= ?
                                        ORDER BY SALESUNIT.ID  
                                        " />
				<entry key="SELECT_Salesunit_By_FKSalesregionid"
					value="SELECT SALESUNIT.ID,SALESUNIT.CREATEDATE,SALESUNIT.CREATOR,SALESUNIT.ENTITY_UID,SALESUNIT.MODIFIER,SALESUNIT.UPDATEDATE,SALESUNIT.OPTLOCK,SALESUNIT.CODE,SALESUNIT.NAME,SALESUNIT.SALESREGIONID,SALESUNIT.ZONALHEADID,SALESUNIT.ISDELETED 
                                        FROM SALESUNIT
                                        where SALESUNIT.SALESREGIONID = ?
                                        " />
				<entry key="SELECT_Salesunit_By_FKZonalheadid"
					value="SELECT SALESUNIT.ID,SALESUNIT.CREATEDATE,SALESUNIT.CREATOR,SALESUNIT.ENTITY_UID,SALESUNIT.MODIFIER,SALESUNIT.UPDATEDATE,SALESUNIT.OPTLOCK,SALESUNIT.CODE,SALESUNIT.NAME,SALESUNIT.SALESREGIONID,SALESUNIT.ZONALHEADID,SALESUNIT.ISDELETED 
                                        FROM SALESUNIT
                                        where SALESUNIT.ZONALHEADID = ?
                                        " />
				<!--// Queries For Salesregion -->
				<entry key="SEARCH_Salesregion"
					value="SELECT SALESREGION.ID,SALESREGION.CREATEDATE,SALESREGION.CREATOR,SALESREGION.ENTITY_UID,SALESREGION.MODIFIER,SALESREGION.UPDATEDATE,SALESREGION.OPTLOCK,SALESREGION.CODE,SALESREGION.NAME,SALESREGION.ENTERPRISEID,SALESREGION.ISDELETED , ENTERPRISEIDLkd.name as enterpriseidenterpriseLkdDesc
                                        FROM SALESREGION 
                                        LEFT JOIN enterprise ENTERPRISEIDLkd ON SALESREGION.ENTERPRISEID = ENTERPRISEIDLkd.ID 
                                        where 1=1  AND ID=?  
                                        ORDER BY SALESREGION.ID 
                                        " />
				<entry key="SELECT_ALL_Salesregion"
					value="SELECT SALESREGION.ID,SALESREGION.CREATEDATE,SALESREGION.CREATOR,SALESREGION.ENTITY_UID,SALESREGION.MODIFIER,SALESREGION.UPDATEDATE,SALESREGION.OPTLOCK,SALESREGION.CODE,SALESREGION.NAME,SALESREGION.ENTERPRISEID , enterpriseLkd.code as enterpriseidenterpriseLkdDesc 
                                        FROM SALESREGION 
                                        LEFT JOIN enterprise enterpriseLkd ON SALESREGION.ENTERPRISEID = enterpriseLkd.ID
                                        LEFT JOIN company companyLkd ON enterpriseLkd.COMPANYID = companyLkd.ID
                                        where companyLkd.ID = ?
                                        ORDER BY SALESREGION.ID
                                        " />
				<entry key="INSERT_Salesregion"
					value="INSERT INTO SALESREGION (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,CODE,NAME,ENTERPRISEID,ISDELETED)
                                         VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
                                        " />
				<entry key="DELETE_Salesregion_BY_ID"
					value="DELETE from SALESREGION where ID= ?  " />
				<entry key="UPDATE_Salesregion_BY_ID"
					value="UPDATE SALESREGION SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, CODE = ?, NAME = ?, ENTERPRISEID = ?, ISDELETED = ? 
                                        WHERE ID=? 
                                        " />
				<entry key="SELECT_Salesregion_BY_ID"
					value=" SELECT SALESREGION.ID,SALESREGION.CREATEDATE,SALESREGION.CREATOR,SALESREGION.ENTITY_UID,SALESREGION.MODIFIER,SALESREGION.UPDATEDATE,SALESREGION.OPTLOCK,SALESREGION.CODE,SALESREGION.NAME,SALESREGION.ENTERPRISEID,SALESREGION.ISDELETED , enterpriseENTERPRISEIDLkd.code as enterpriseidenterpriseLkdDesc 
                                        FROM SALESREGION 
                                        LEFT JOIN enterprise enterpriseENTERPRISEIDLkd ON SALESREGION.ENTERPRISEID = enterpriseENTERPRISEIDLkd.ID 
                                        where SALESREGION.ID= ? 
                                        ORDER BY SALESREGION.ID
                                        " />
				<entry key="SELECT_Salesregion_By_FKEnterpriseid"
					value="SELECT SALESREGION.ID,SALESREGION.CREATEDATE,SALESREGION.CREATOR,SALESREGION.ENTITY_UID,SALESREGION.MODIFIER,SALESREGION.UPDATEDATE,SALESREGION.OPTLOCK,SALESREGION.CODE,SALESREGION.NAME,SALESREGION.ENTERPRISEID,SALESREGION.ISDELETED  
                                        FROM SALESREGION 
                                        where SALESREGION.ENTERPRISEID = ? 
                                        " />
				<!-- <entry key="SELECT_Pending_order" value="Select SO.id as OrderId, 
					SO.ORDERPONUMBER, SO.WEBORDERNUMBER, CONVERT(VARCHAR(10), ol.REQUIREDDATE, 
					101) as orderDate, op.PARTNERNO as partnernumber,'Pending' as status, op.PARTNERNAME, 
					op.ID as partnerId, ol.MATERIALID, m.ARTICLENO as material, m.description 
					as description, ol.QUANTITY, oh.TRANSPORTER, c.CODE as soldTo, c.CUSTOMERNAME 
					as soldToParty,so.CUSTOMERID, so.CUSTOMERNOTES as remark, ISNULL(so.DELETED, 
					0) as reject, so.ERRORMSG as errorMsg, so.createDate from customer c Inner 
					Join SALEORDER SO ON c.ID = SO.CUSTOMERID INNER JOIN ORDERHEADER OH ON OH.ID 
					= SO.ORDERHEADERID Inner Join CUSTOMERUSER cu ON cu.CUSTOMERID = c.ID Inner 
					Join ORDERPARTNER OP ON OP.ORDERHEADERID = OH.ID Inner Join ORDERLINE OL 
					ON OL.ORDERHEADERID = OH.ID Inner Join MATERIAL m ON m.ID = ol.MATERIALID 
					left join POSTEDORDERHEADER po on OH.POSTEDORDERHEADERID = po.ID INNER JOIN 
					USER_ROLE UR ON UR.USER_ID=SO.CREATOR INNER JOIN ROLE_MASTER RM ON UR.ROLE_ID=RM.ROLE_ID 
					WHERE (OH.POSTEDORDERHEADERID IS NULL or (OH.POSTEDORDERHEADERID IS NOT NULL 
					AND (po.SALESDOCUMENT IS NULL OR po.SALESDOCUMENT = '' ) )) AND cu.ID = ? 
					AND (OH.CREATEDATE between ? and ?) AND (SO.DELETED IS NULL OR SO.DELETED 
					= 0) AND RM.ROLE_NAME NOT IN ('Delcreder') "/> -->
				<!-- <entry key="SELECT_Pending_orders_ForEmployee" value="Select distinct 
					SO.id as OrderId, SO.ORDERPONUMBER, SO.WEBORDERNUMBER, CONVERT(VARCHAR(10), 
					ol.REQUIREDDATE, 101) as orderDate, op.PARTNERNO as partnernumber,'Pending' 
					as status, op.PARTNERNAME,so.CUSTOMERID, op.ID as partnerId, ol.MATERIALID, 
					m.ARTICLENO as material, m.description as description, ol.QUANTITY, oh.TRANSPORTER, 
					c.CODE as soldTo, c.CUSTOMERNAME as soldToParty, so.CUSTOMERNOTES as remark, 
					ISNULL(so.DELETED,0) as reject, so.ERRORMSG as errorMsg, so.createDate from 
					ORDERHEADER OH Inner Join SALEORDER SO ON OH.ID = SO.ORDERHEADERID INNER 
					Join CUSTOMER c ON so.CUSTOMERID = c.ID INNER JOIN Employee e on e.SALESOFFICEID 
					= c.SALESOFFICEID INNER JOIN EMP_SALESOFFICE es on es.SALESOFFICE_ID = c.SALESOFFICEID 
					Inner Join ORDERPARTNER OP ON OP.ORDERHEADERID = OH.ID Inner Join ORDERLINE 
					OL ON OL.ORDERHEADERID = OH.ID Inner Join MATERIAL m ON m.ID = ol.MATERIALID 
					left join POSTEDORDERHEADER po on OH.POSTEDORDERHEADERID = po.ID WHERE (OH.POSTEDORDERHEADERID 
					IS NULL or (OH.POSTEDORDERHEADERID IS NOT NULL AND (po.SALESDOCUMENT IS NULL 
					OR po.SALESDOCUMENT = '') )) AND (e.ID = ? OR es.EMP_ID = ?) AND (? IS NULL 
					OR ? = '' OR SO.ORDERPONUMBER = ?) AND (? IS NULL OR OH.CREATEDATE between 
					? and ?) AND (OP.PARTNERNO like ? OR op.PARTNERNAME LIKE ?) AND (? IS NULL 
					OR m.ID = ?) AND (SO.DELETED IS NULL OR SO.DELETED = 0) AND (? IS NULL OR 
					c.CODE like ? OR c.CUSTOMERNAME like ?) Order By so.createDate desc"/> -->

				<!-- <entry key="SELECT_Pending_orders_ForEmployee" value="Select distinct 
					SO.DELETED, so.id as OrderId, so.ORDERPONUMBER, so.WEBORDERNUMBER, CONVERT(VARCHAR(10), 
					ol.REQUIREDDATE, 101) as orderDate, op.PARTNERNO as partnernumber,'Pending' 
					as status, op.PARTNERNAME,so.CUSTOMERID, op.ID as partnerId, ol.MATERIALID, 
					m.ARTICLENO as material, m.description as description, ol.QUANTITY, oh.TRANSPORTER, 
					c.CODE as soldTo, c.CUSTOMERNAME as soldToParty, so.CUSTOMERNOTES as remark, 
					ISNULL(so.DELETED,0) as reject, so.ERRORMSG as errorMsg, so.createDate from 
					EMPLOYEE E INNER JOIN EMP_SALESOFFICE ES on e.ID = es.EMP_ID INNER JOIN CUSTOMER 
					C on c.SALESOFFICEID = ES.SALESOFFICE_ID INNER JOIN SALEORDER SO on C.ID 
					= SO.CUSTOMERID INNER JOIN ORDERHEADER OH on SO.ORDERHEADERID = OH.ID INNER 
					JOIN ORDERPARTNER OP on OH.ID = OP.ORDERHEADERID INNER JOIN ORDERLINE OL 
					on OH.ID = OL.ORDERHEADERID LEFT JOIN POSTEDORDERHEADER POH on OH.POSTEDORDERHEADERID 
					= POH.ID INNER JOIN MATERIAL M on OL.MATERIALID = M.ID INNER JOIN USER_ROLE 
					UR ON UR.USER_ID=SO.CREATOR INNER JOIN ROLE_MASTER RM ON UR.ROLE_ID=RM.ROLE_ID 
					where (OH.POSTEDORDERHEADERID IS NULL or (OH.POSTEDORDERHEADERID IS NOT NULL 
					AND (POH.SALESDOCUMENT IS NULL OR POH.SALESDOCUMENT = '') )) AND e.ID = ? 
					AND (OH.CREATEDATE between ? and ?) AND RM.ROLE_NAME not in('Delcreder') 
					AND SO.DELETED is NULL "/> -->

				<entry key="SELECT_Pending_orders_ForEmployee"
					value="Select SO.DELETED, so.id as OrderId, so.ORDERPONUMBER, so.WEBORDERNUMBER, CONVERT(VARCHAR(10), ol.REQUIREDDATE, 101) as orderDate, 
													stp.SHIPTOCODE as partnernumber,'Pending' as status, stp.ADDRESS partnerName, so.customerid,
													stp.ID as partnerId, ol.MATERIALID, m.ARTICLENO as material, m.description as description, ol.QUANTITY,
													oh.TRANSPORTER, c.CODE as soldTo, c.CUSTOMERNAME as soldToParty,
													so.CUSTOMERNOTES as remark, ISNULL(so.DELETED,0) as reject, so.ERRORMSG as errorMsg, so.createDate
													from 
													EMPLOYEE E With (NOLOCK) INNER JOIN EMP_SALESOFFICE ES With (NOLOCK) on e.ID = es.EMP_ID
													INNER JOIN CUSTOMER C With (NOLOCK) on c.SALESOFFICEID = ES.SALESOFFICE_ID 
													INNER JOIN SALEORDER SO With (NOLOCK) on C.ID = SO.CUSTOMERID 
													INNER JOIN ORDERHEADER OH With (NOLOCK) on SO.ORDERHEADERID = OH.ID 
													Inner Join SHIPTOPARTY stp With (NOLOCK) ON stp.ID = OH.SHIPTOPARTY
													INNER JOIN ORDERLINE OL With (NOLOCK) on OH.ID = OL.ORDERHEADERID
													LEFT JOIN POSTEDORDERHEADER POH With (NOLOCK) on OH.POSTEDORDERHEADERID = POH.ID
													INNER JOIN MATERIAL M With (NOLOCK) on OL.MATERIALID = M.ID
													INNER JOIN USER_ROLE UR With (NOLOCK) ON UR.USER_ID=SO.CREATOR
													INNER JOIN ROLE_MASTER RM With (NOLOCK) ON UR.ROLE_ID=RM.ROLE_ID
													where 
													e.ID = ?
													AND (OH.CREATEDATE between ? and ?) 
													AND RM.ROLE_NAME not in('Delcreder')  
													AND (OH.POSTEDORDERHEADERID IS NULL or (OH.POSTEDORDERHEADERID IS NOT NULL AND (POH.SALESDOCUMENT IS NULL OR POH.SALESDOCUMENT = '') ))  
													AND SO.DELETED is NULL " />

				<entry key="SELECT_Pending_order"
					value="Select SO.id as OrderId, SO.ORDERPONUMBER, SO.WEBORDERNUMBER, CONVERT(VARCHAR(10), ol.REQUIREDDATE, 101) as orderDate, 
													stp.SHIPTOCODE as partnernumber,'Pending' as status, stp.ADDRESS partnerName, so.customerid,
													stp.ID as partnerId, ol.MATERIALID, m.ARTICLENO as material, m.description as description, ol.QUANTITY,
													oh.TRANSPORTER, c.CODE as soldTo, c.CUSTOMERNAME as soldToParty,so.CUSTOMERID,
													so.CUSTOMERNOTES as remark, ISNULL(so.DELETED, 0) as reject, so.ERRORMSG as errorMsg, so.createDate
													from customer c With (NOLOCK)
													Inner Join SALEORDER SO With (NOLOCK) ON c.ID = SO.CUSTOMERID
													INNER JOIN ORDERHEADER OH With (NOLOCK) ON OH.ID = SO.ORDERHEADERID
													Inner Join CUSTOMERUSER cu With (NOLOCK) ON cu.CUSTOMERID = c.ID
													Inner Join SHIPTOPARTY stp With (NOLOCK) ON stp.ID = OH.SHIPTOPARTY
													Inner Join ORDERLINE OL With (NOLOCK) ON OL.ORDERHEADERID = OH.ID
													Inner Join MATERIAL m With (NOLOCK) ON m.ID = ol.MATERIALID
													left join POSTEDORDERHEADER po With (NOLOCK) on OH.POSTEDORDERHEADERID = po.ID
													INNER JOIN USER_ROLE UR With (NOLOCK) ON UR.USER_ID=SO.CREATOR
													INNER JOIN ROLE_MASTER RM With (NOLOCK) ON UR.ROLE_ID=RM.ROLE_ID
													WHERE (OH.POSTEDORDERHEADERID IS NULL or (OH.POSTEDORDERHEADERID IS NOT NULL AND (po.SALESDOCUMENT IS NULL OR po.SALESDOCUMENT = '' ) )) AND cu.ID = ?
													AND (OH.CREATEDATE between ? and ?) 
													AND (SO.DELETED IS NULL OR SO.DELETED = 0)	
													AND RM.ROLE_NAME NOT IN ('Delcreder')
													" />



				<!-- <entry key="SELECT_Pending_orders_ForSalespromotor" value=" Select 
					SO.id as OrderId, SO.ORDERPONUMBER, SO.WEBORDERNUMBER, CONVERT(VARCHAR(10), 
					ol.REQUIREDDATE, 101) as orderDate, op.PARTNERNO as partnernumber,'Pending' 
					as status, op.PARTNERNAME,so.CUSTOMERID, op.ID as partnerId, ol.MATERIALID, 
					m.ARTICLENO as material, m.description as description, ol.QUANTITY, oh.TRANSPORTER, 
					c.CODE as soldTo, c.CUSTOMERNAME as soldToParty, so.CUSTOMERNOTES as remark, 
					ISNULL(so.DELETED, 0) as reject, so.ERRORMSG as errorMsg, so.createDate from 
					ORDERHEADER OH Inner Join SALEORDER SO ON OH.ID = SO.ORDERHEADERID INNER 
					Join CUSTOMER c ON so.CUSTOMERID = c.ID Inner Join CUSTOMERUSER cu ON cu.CUSTOMERID 
					= c.SALESPROMOTERID Inner Join ORDERPARTNER OP ON OP.ORDERHEADERID = OH.ID 
					Inner Join ORDERLINE OL ON OL.ORDERHEADERID = OH.ID Inner Join MATERIAL m 
					ON m.ID = ol.MATERIALID left join POSTEDORDERHEADER po on OH.POSTEDORDERHEADERID 
					= po.ID INNER JOIN USER_ROLE UR ON UR.USER_ID=SO.CREATOR INNER JOIN ROLE_MASTER 
					RM ON UR.ROLE_ID=RM.ROLE_ID WHERE (OH.POSTEDORDERHEADERID IS NULL or (OH.POSTEDORDERHEADERID 
					IS NOT NULL AND (po.SALESDOCUMENT IS NULL OR po.SALESDOCUMENT = '') )) AND 
					c.salespromoterid = ? AND (? IS NULL OR ? = '' OR SO.ORDERPONUMBER = ?) AND 
					(? IS NULL OR OH.CREATEDATE between ? and ?) AND (OP.PARTNERNO like ? OR 
					op.PARTNERNAME LIKE ?) AND (? IS NULL OR m.ID = ?) AND (SO.DELETED IS NULL 
					OR SO.DELETED = 0) AND (? IS NULL OR c.CODE like ? OR c.CUSTOMERNAME like 
					?) AND RM.ROLE_NAME NOT IN ('Delcreder') Order By so.createDate desc"/> -->

				<entry key="SELECT_Pending_orders_ForSalespromotor"
					value=" Select SO.id as OrderId, SO.ORDERPONUMBER, SO.WEBORDERNUMBER, CONVERT(VARCHAR(10), ol.REQUIREDDATE, 101) as orderDate, 
															stp.SHIPTOCODE as partnernumber,'Pending' as status, stp.ADDRESS partnerName, so.customerid,
															stp.ID as partnerId, ol.MATERIALID, m.ARTICLENO as material, m.description as description, ol.QUANTITY,
															oh.TRANSPORTER, c.CODE as soldTo, c.CUSTOMERNAME as soldToParty,
															so.CUSTOMERNOTES as remark, ISNULL(so.DELETED, 0) as reject, so.ERRORMSG as errorMsg,
															so.createDate															
															from ORDERHEADER OH 
															Inner Join SALEORDER SO ON OH.ID = SO.ORDERHEADERID
															INNER Join CUSTOMER c ON so.CUSTOMERID = c.ID
															Inner Join CUSTOMERUSER cu ON cu.CUSTOMERID = c.SALESPROMOTERID 
															Inner Join SHIPTOPARTY stp With (NOLOCK) ON stp.ID = OH.SHIPTOPARTY
															Inner Join ORDERLINE OL ON OL.ORDERHEADERID = OH.ID
															Inner Join MATERIAL m ON m.ID = ol.MATERIALID
															left join POSTEDORDERHEADER po on OH.POSTEDORDERHEADERID = po.ID
															INNER JOIN USER_ROLE UR ON UR.USER_ID=SO.CREATOR
															INNER JOIN ROLE_MASTER RM ON UR.ROLE_ID=RM.ROLE_ID
															WHERE (OH.POSTEDORDERHEADERID IS NULL or (OH.POSTEDORDERHEADERID IS NOT NULL AND (po.SALESDOCUMENT IS NULL OR po.SALESDOCUMENT = '') )) AND cu.id  = ?
															
															AND (OH.CREATEDATE between ? and ?)
															
															AND (SO.DELETED IS NULL OR  SO.DELETED = 0)
															AND (? IS NULL OR c.CODE like ? OR c.CUSTOMERNAME like ?) 
															AND RM.ROLE_NAME NOT IN ('Delcreder')
															" />


				<!-- Added by Mohsin for delcreder -->

				<!-- <entry key="SELECT_Delcreder_Pending_order" value="Select SO.id 
					as OrderId, SO.ORDERPONUMBER, SO.WEBORDERNUMBER, CONVERT(VARCHAR(10), ol.REQUIREDDATE, 
					101) as orderDate, stp.SHIPTOCODE as partnernumber,'Pending' as status, stp.ADDRESS 
					partnerName, so.customerid, stp.ID as partnerId, ol.MATERIALID, m.ARTICLENO 
					as material, m.description as description, ol.QUANTITY, oh.TRANSPORTER, customer.CODE 
					as soldTo, customer.CUSTOMERNAME as soldToParty,customer.id, so.CUSTOMERNOTES 
					as remark, ISNULL(so.DELETED, 0) as reject, so.ERRORMSG as errorMsg, so.createDate 
					from ORDERHEADER OH Inner Join SALEORDER SO ON OH.ID = SO.ORDERHEADERID Inner 
					Join CUSTOMERUSER cu ON cu.ID = SO.CREATOR INNER Join CUSTOMER c ON cu.CUSTOMERID 
					= c.ID INNER Join CUSTOMER customer ON so.CUSTOMERID = customer.ID Inner 
					Join SHIPTOPARTY stp With (NOLOCK) ON stp.ID = OH.SHIPTOPARTY Inner Join 
					ORDERLINE OL ON OL.ORDERHEADERID = OH.ID Inner Join MATERIAL m ON m.ID = 
					ol.MATERIALID left join POSTEDORDERHEADER po on OH.POSTEDORDERHEADERID = 
					po.ID INNER JOIN USER_ROLE UR ON UR.USER_ID=SO.CREATOR INNER JOIN ROLE_MASTER 
					RM ON UR.ROLE_ID=RM.ROLE_ID WHERE (OH.POSTEDORDERHEADERID IS NULL or (OH.POSTEDORDERHEADERID 
					IS NOT NULL AND (po.SALESDOCUMENT IS NULL OR po.SALESDOCUMENT = '' ) )) AND 
					cu.ID = ? AND (? IS NULL OR ? = '' OR SO.ORDERPONUMBER = ? ) AND (OH.CREATEDATE 
					between ? and ?) AND (stp.shiptocode like ? OR stp.address LIKE ?) AND (? 
					IS NULL OR m.ID = ?) AND (SO.DELETED IS NULL OR SO.DELETED = 0) AND RM.ROLE_NAME 
					IN ('Delcreder') Order By so.createDate desc "/> -->

				<entry key="SELECT_Delcreder_Pending_order"
					value="Select SO.id as OrderId, SO.ORDERPONUMBER, SO.WEBORDERNUMBER, CONVERT(VARCHAR(10), ol.REQUIREDDATE, 101) as orderDate, 
												stp.SHIPTOCODE as partnernumber,'Pending' as status, stp.ADDRESS partnerName, so.customerid,
												stp.ID as partnerId, ol.MATERIALID, m.ARTICLENO as material, m.description as description, ol.QUANTITY,
												oh.TRANSPORTER, customer.CODE as soldTo, customer.CUSTOMERNAME as soldToParty,customer.id,
												so.CUSTOMERNOTES as remark, ISNULL(so.DELETED, 0) as reject, so.ERRORMSG as errorMsg, so.createDate
																								
										from ORDERHEADER OH 
										Inner Join SALEORDER SO ON OH.ID = SO.ORDERHEADERID
										Inner Join CUSTOMERUSER cu ON cu.ID = SO.CREATOR
										INNER Join CUSTOMER c ON cu.CUSTOMERID = c.ID
										INNER Join CUSTOMER customer ON so.CUSTOMERID = customer.ID
										Inner Join SHIPTOPARTY stp With (NOLOCK) ON stp.ID = OH.SHIPTOPARTY
										Inner Join ORDERLINE OL ON OL.ORDERHEADERID = OH.ID
										Inner Join MATERIAL m ON m.ID = ol.MATERIALID
										left join POSTEDORDERHEADER po on OH.POSTEDORDERHEADERID = po.ID
										INNER JOIN USER_ROLE UR ON UR.USER_ID=SO.CREATOR
										INNER JOIN ROLE_MASTER RM ON UR.ROLE_ID=RM.ROLE_ID
										WHERE (OH.POSTEDORDERHEADERID IS NULL or 
												(OH.POSTEDORDERHEADERID IS NOT NULL AND (po.SALESDOCUMENT IS NULL OR po.SALESDOCUMENT = '') )) AND cu.ID = ?												 
												AND (OH.CREATEDATE between ? and ?)
												AND (SO.DELETED IS NULL OR  SO.DELETED = 0)
												AND RM.ROLE_NAME IN ('Delcreder')
												Order By so.createDate desc
 										" />

				<!-- <entry key="SELECT_Delcreder_Pending_orders_ForEmployee" value="Select 
					distinct SO.id as OrderId, SO.ORDERPONUMBER, SO.WEBORDERNUMBER, CONVERT(VARCHAR(10), 
					ol.REQUIREDDATE, 101) as orderDate, stp.SHIPTOCODE as partnernumber,'Pending' 
					as status, stp.ADDRESS partnerName, so.customerid, stp.ID as partnerId, ol.MATERIALID, 
					m.ARTICLENO as material, m.description as description, ol.QUANTITY, oh.TRANSPORTER, 
					customer.CODE as soldTo, customer.CUSTOMERNAME as soldToParty, so.CUSTOMERNOTES 
					as remark, ISNULL(so.DELETED,0) as reject, so.ERRORMSG as errorMsg, so.createDate, 
					c.code delcrederCode, c.customerName delCrederName from ORDERHEADER OH Inner 
					Join SALEORDER SO ON OH.ID = SO.ORDERHEADERID INNER JOIN CUSTOMERUSER CU 
					ON CU.ID = SO.CREATOR INNER Join CUSTOMER c ON CU.CUSTOMERID = c.ID INNER 
					JOIN CUSTOMER customer on customer.id=so.customerid INNER JOIN Employee e 
					on e.SALESOFFICEID = c.SALESOFFICEID INNER JOIN EMP_SALESOFFICE es on es.SALESOFFICE_ID 
					= c.SALESOFFICEID Inner Join SHIPTOPARTY stp With (NOLOCK) ON stp.ID = OH.SHIPTOPARTY 
					Inner Join ORDERLINE OL ON OL.ORDERHEADERID = OH.ID Inner Join MATERIAL m 
					ON m.ID = ol.MATERIALID left join POSTEDORDERHEADER po on OH.POSTEDORDERHEADERID 
					= po.ID INNER JOIN USER_ROLE UR ON UR.USER_ID=SO.CREATOR INNER JOIN ROLE_MASTER 
					RM ON UR.ROLE_ID=RM.ROLE_ID WHERE (OH.POSTEDORDERHEADERID IS NULL or (OH.POSTEDORDERHEADERID 
					IS NOT NULL AND (po.SALESDOCUMENT IS NULL OR po.SALESDOCUMENT = '') )) AND 
					(e.ID = ? OR es.EMP_ID = ?) AND (? IS NULL OR ? = '' OR SO.ORDERPONUMBER 
					= ?) AND (? IS NULL OR OH.CREATEDATE between ? and ?) AND (stp.shiptocode 
					like ? OR stp.address LIKE ?) AND (? IS NULL OR m.ID = ?) AND (SO.DELETED 
					IS NULL OR SO.DELETED = 0) AND (? IS NULL OR c.CODE like ? OR c.CUSTOMERNAME 
					like ?) AND RM.ROLE_NAME IN ('Delcreder') Order By so.createDate desc"/> -->

				<entry key="SELECT_Delcreder_Pending_orders_ForEmployee"
					value="Select distinct SO.id as OrderId, SO.ORDERPONUMBER, SO.WEBORDERNUMBER, CONVERT(VARCHAR(10), ol.REQUIREDDATE, 101) as orderDate, 
															stp.SHIPTOCODE as partnernumber,'Pending' as status, stp.ADDRESS partnerName, so.customerid,
															stp.ID as partnerId, ol.MATERIALID, m.ARTICLENO as material, m.description as description, ol.QUANTITY,
															oh.TRANSPORTER, customer.CODE as soldTo, customer.CUSTOMERNAME as soldToParty,
															so.CUSTOMERNOTES as remark, ISNULL(so.DELETED,0) as reject, so.ERRORMSG as errorMsg,
															so.createDate, c.code delcrederCode, c.customerName delCrederName
														from ORDERHEADER OH 
														Inner Join SALEORDER SO ON OH.ID = SO.ORDERHEADERID
														INNER JOIN CUSTOMERUSER CU ON CU.ID = SO.CREATOR
														INNER Join CUSTOMER c ON CU.CUSTOMERID = c.ID
														INNER JOIN CUSTOMER customer on customer.id=so.customerid
														INNER JOIN Employee e on e.SALESOFFICEID = c.SALESOFFICEID
														INNER JOIN EMP_SALESOFFICE es on es.SALESOFFICE_ID = c.SALESOFFICEID
														Inner Join SHIPTOPARTY stp With (NOLOCK) ON stp.ID = OH.SHIPTOPARTY
														Inner Join ORDERLINE OL ON OL.ORDERHEADERID = OH.ID
														Inner Join MATERIAL m ON m.ID = ol.MATERIALID
														left join POSTEDORDERHEADER po on OH.POSTEDORDERHEADERID = po.ID
														INNER JOIN USER_ROLE UR ON UR.USER_ID=SO.CREATOR
														INNER JOIN ROLE_MASTER RM ON UR.ROLE_ID=RM.ROLE_ID
														WHERE (OH.POSTEDORDERHEADERID IS NULL or 
																(OH.POSTEDORDERHEADERID IS NOT NULL AND (po.SALESDOCUMENT IS NULL OR po.SALESDOCUMENT = '') ))
															AND (e.ID = ? OR es.EMP_ID = ?)															 
															AND (OH.CREATEDATE between ? and ?)
															AND (SO.DELETED IS NULL OR SO.DELETED = 0)
															AND RM.ROLE_NAME IN ('Delcreder')
															Order By so.createDate desc" />

				<!-- <entry key="SELECT_WOH_Pending_orders" value="Select distinct SO.id 
					as OrderId, SO.ORDERPONUMBER, SO.WEBORDERNUMBER, CONVERT(VARCHAR(10), ol.REQUIREDDATE, 
					101) as orderDate, op.PARTNERNO as partnernumber,'Pending' as status, op.PARTNERNAME,so.CUSTOMERID, 
					op.ID as partnerId, ol.MATERIALID, m.ARTICLENO as material, m.description 
					as description, ol.QUANTITY, oh.TRANSPORTER, c.CODE as soldTo, c.CUSTOMERNAME 
					as soldToParty, so.CUSTOMERNOTES as remark, ISNULL(so.DELETED,0) as reject, 
					so.ERRORMSG as errorMsg, so.createDate, lo.district from ORDERHEADER OH Inner 
					Join SALEORDER SO ON OH.ID = SO.ORDERHEADERID INNER Join CUSTOMER c ON so.CUSTOMERID 
					= c.ID INNER JOIN Employee e on e.SALESOFFICEID = c.SALESOFFICEID INNER JOIN 
					EMP_SALESOFFICE es on es.SALESOFFICE_ID = c.SALESOFFICEID Inner Join ORDERPARTNER 
					OP ON OP.ORDERHEADERID = OH.ID Inner Join ORDERLINE OL ON OL.ORDERHEADERID 
					= OH.ID Inner Join MATERIAL m ON m.ID = ol.MATERIALID left join POSTEDORDERHEADER 
					po on OH.POSTEDORDERHEADERID = po.ID INNER JOIN USER_ROLE UR ON UR.USER_ID=SO.CREATOR 
					INNER JOIN ROLE_MASTER RM ON UR.ROLE_ID=RM.ROLE_ID inner join contact con 
					on con.ID=c.MAINCONTACTID inner join ADDRESS ad on ad.id=con.ADDRESSID inner 
					join LOCATION lo on lo.ID=ad.LOCATIONID inner join [USER] u on u.user_id 
					= e.ID inner join contact con1 on con1.ID=u.MAINCONTACTID inner join ADDRESS 
					ad1 on ad1.id=con1.ADDRESSID inner join LOCATION lo1 on lo1.ID=ad1.LOCATIONID 
					WHERE (OH.POSTEDORDERHEADERID IS NULL or (OH.POSTEDORDERHEADERID IS NOT NULL 
					AND (po.SALESDOCUMENT IS NULL OR po.SALESDOCUMENT = '') )) AND (e.ID = ? 
					OR es.EMP_ID = ?) AND (? IS NULL OR ? = '' OR SO.ORDERPONUMBER = ?) AND (? 
					IS NULL OR OH.CREATEDATE between ? and ?) AND (OP.PARTNERNO like ? OR op.PARTNERNAME 
					LIKE ?) AND (? IS NULL OR m.ID = ?) AND (SO.DELETED IS NULL OR SO.DELETED 
					= 0) AND (? IS NULL OR c.CODE like ? OR c.CUSTOMERNAME like ?) AND RM.ROLE_NAME 
					NOT IN ('Delcreder') and lo1.district=lo.district Order By so.createDate 
					desc"/> -->

				<!-- <entry key="SELECT_WOH_Pending_orders" value="Select distinct SO.id 
					as OrderId, SO.ORDERPONUMBER, SO.WEBORDERNUMBER, CONVERT(VARCHAR(10), ol.REQUIREDDATE, 
					101) as orderDate, op.PARTNERNO as partnernumber,'Pending' as status, op.PARTNERNAME,so.CUSTOMERID, 
					op.ID as partnerId, ol.MATERIALID, m.ARTICLENO as material, m.description 
					as description, ol.QUANTITY, oh.TRANSPORTER, c.CODE as soldTo, c.CUSTOMERNAME 
					as soldToParty, so.CUSTOMERNOTES as remark, ISNULL(so.DELETED,0) as reject, 
					so.ERRORMSG as errorMsg, so.createDate, lo.district from EMPLOYEE E With 
					(NOLOCK) INNER JOIN EMP_SALESOFFICE ES With (NOLOCK) on e.ID = es.EMP_ID 
					INNER JOIN CUSTOMER C With (NOLOCK) on c.SALESOFFICEID = ES.SALESOFFICE_ID 
					INNER JOIN SALEORDER SO With (NOLOCK) on C.ID = SO.CUSTOMERID INNER JOIN 
					ORDERHEADER OH With (NOLOCK) on SO.ORDERHEADERID = OH.ID INNER JOIN ORDERPARTNER 
					OP With (NOLOCK) on OH.ID = OP.ORDERHEADERID INNER JOIN ORDERLINE OL With 
					(NOLOCK) on OH.ID = OL.ORDERHEADERID LEFT JOIN POSTEDORDERHEADER POH With 
					(NOLOCK) on OH.POSTEDORDERHEADERID = POH.ID INNER JOIN MATERIAL M With (NOLOCK) 
					on OL.MATERIALID = M.ID INNER JOIN USER_ROLE UR With (NOLOCK) ON UR.USER_ID=SO.CREATOR 
					INNER JOIN ROLE_MASTER RM With (NOLOCK) ON UR.ROLE_ID=RM.ROLE_ID inner join 
					contact con With (NOLOCK) ON con.ID=c.MAINCONTACTID inner join ADDRESS ad 
					With (NOLOCK) ON ad.id=con.ADDRESSID inner join LOCATION lo With (NOLOCK) 
					ON lo.ID=ad.LOCATIONID inner join [USER] u With (NOLOCK) ON u.user_id = e.ID 
					inner join contact con1 With (NOLOCK) ON con1.ID=u.MAINCONTACTID inner join 
					ADDRESS ad1 With (NOLOCK) on ad1.id=con1.ADDRESSID inner join LOCATION lo1 
					With (NOLOCK) on lo1.ID=ad1.LOCATIONID WHERE e.ID = ? AND (OH.CREATEDATE 
					between ? and ?) AND RM.ROLE_NAME not in('Delcreder') AND (OH.POSTEDORDERHEADERID 
					IS NULL or (OH.POSTEDORDERHEADERID IS NOT NULL AND (POH.SALESDOCUMENT IS 
					NULL OR POH.SALESDOCUMENT = '') )) AND SO.DELETED is NULL and lo1.district=lo.district 
					"/> -->

				<entry key="SELECT_WOH_Pending_orders"
					value="Select distinct SO.id as OrderId, SO.ORDERPONUMBER, SO.WEBORDERNUMBER, 
														CONVERT(VARCHAR(10), ol.REQUIREDDATE, 101) as orderDate, 
														stp.SHIPTOCODE as partnernumber,'Pending' as status, stp.ADDRESS partnerName, so.customerid,
														stp.ID as partnerId, ol.MATERIALID, m.ARTICLENO as material, m.description as description, ol.QUANTITY,
														oh.TRANSPORTER, c.CODE as soldTo, c.CUSTOMERNAME as soldToParty,
														so.CUSTOMERNOTES as remark, ISNULL(so.DELETED,0) as reject, so.ERRORMSG as errorMsg,
														so.createDate
														from 
														EMPLOYEE E With (NOLOCK) INNER JOIN EMP_SALESOFFICE ES With (NOLOCK) on es.EMP_ID = e.ID 
														INNER JOIN CUSTOMER C With (NOLOCK) on ES.SALESOFFICE_ID = c.SALESOFFICEID 
														INNER JOIN SALEORDER SO With (NOLOCK) on C.ID = SO.CUSTOMERID 
														INNER JOIN ORDERHEADER OH With (NOLOCK) on SO.ORDERHEADERID = OH.ID 
														Inner Join SHIPTOPARTY stp With (NOLOCK) ON stp.ID = OH.SHIPTOPARTY
														INNER JOIN ORDERLINE OL With (NOLOCK) on OH.ID = OL.ORDERHEADERID
														LEFT JOIN POSTEDORDERHEADER POH With (NOLOCK) on OH.POSTEDORDERHEADERID = POH.ID
														INNER JOIN MATERIAL M With (NOLOCK) on OL.MATERIALID = M.ID
														INNER JOIN USER_ROLE UR With (NOLOCK) ON SO.CREATOR = UR.USER_ID
														INNER JOIN ROLE_MASTER RM With (NOLOCK) ON UR.ROLE_ID=RM.ROLE_ID	
														WHERE 
														e.ID = ?
														AND (OH.CREATEDATE between ? and ?)
														AND RM.ROLE_NAME !='Delcreder'  
														AND (OH.POSTEDORDERHEADERID IS NULL or 
														(OH.POSTEDORDERHEADERID IS NOT NULL AND (POH.SALESDOCUMENT IS NULL OR POH.SALESDOCUMENT = '') ))  
														AND SO.DELETED is NULL" />



				<entry key="GET_WAREHOUSE_DISTRICT"
					value="SELECT DISTRICT FROM LOCATION 
														INNER JOIN ADDRESS ON LOCATION.ID = ADDRESS.LOCATIONID
														INNER JOIN CONTACT ON ADDRESS.ID = CONTACT.ADDRESSID
														INNER JOIN [USER] U ON CONTACT.ID = U.MAINCONTACTID
														WHERE U.USER_ID = ?" />

				<entry key="GET_CONTACTS_BY_DISTRICT_EMPLOYEE"
					value="Select c.MAINCONTACTID id from 
														(Select lo1.district from EMPLOYEE e inner join [USER] u With (NOLOCK) ON  e.ID = u.user_id
														inner join contact con1 With (NOLOCK) ON u.MAINCONTACTID = con1.ID
														inner join ADDRESS ad1 With (NOLOCK) on con1.ADDRESSID = ad1.id
														inner join LOCATION lo1 With (NOLOCK) on ad1.LOCATIONID = lo1.ID
														where e.ID = ?) t, CUSTOMER c with (NOLOCK) 
														inner join contact con1 With (NOLOCK) ON c.MAINCONTACTID = con1.ID
														inner join ADDRESS ad1 With (NOLOCK) on con1.ADDRESSID = ad1.id
														inner join LOCATION lo1 With (NOLOCK) on ad1.LOCATIONID = lo1.ID where t.district = lo1.district" />

				<entry key="GET_CUSTOMERS_CONTACT_BY_DISTRICT"
					value="Select c.MAINCONTACTID id from CUSTOMER c with (NOLOCK) 
														inner join contact con1 With (NOLOCK) ON c.MAINCONTACTID = con1.ID
														inner join ADDRESS ad1 With (NOLOCK) on con1.ADDRESSID = ad1.id
														inner join LOCATION lo1 With (NOLOCK) on ad1.LOCATIONID = lo1.ID 
														where lo1.district = ?" />

				<!-- Code ends here -->

				<entry key="SELECT_Pending_order_by_PONO"
					value="Select SO.id as OrderId, SO.ORDERPONUMBER, CONVERT(VARCHAR(10), so.CREATEDATE, 101) as orderDate, 
													 op.PARTNERNO as partnernumber,'Pending' as status, op.PARTNERNAME,
													 op.ID as partnerId, ol.MATERIALID, m.description as Material, ol.QUANTITY, oh.TRANSPORTER
											from ORDERHEADER OH 
											Inner Join SALEORDER SO ON OH.ID = SO.ORDERHEADERID
											Inner Join ORDERPARTNER OP ON OP.ORDERHEADERID = OH.ID
											Inner Join ORDERLINE OL ON OL.ORDERHEADERID = OH.ID
											Inner Join MATERIAL m ON m.ID = ol.MATERIALID
											WHERE OH.POSTEDORDERHEADERID IS NULL AND so.CUSTOMERID = ? 
												  AND SO.ORDERPONUMBER LIKE ? AND (SO.DELETED IS NULL OR  SO.DELETED = 0)
 										" />
				<entry key="SELECT_Customer_By_EmployeeId"
					value="Select c.ID,c.CREATEDATE,c.CREATOR,c.ENTITY_UID, c.MODIFIER,c.UPDATEDATE,c.OPTLOCK,c.ACCESSKEY,
												c.ACCESSPORTAL,c.CODE,c.HEADQUARTER,c.CUSTOMERNAME,c.SINGLELOCATION,c.CUSTOMERGROUPID,c.MAINCONTACTID,
												c.PARENTHQID,c.SALESAREAID,c.SALESGROUPID,c.SALESOFFICEID,c.SALESPROMOTER,c.SALESPROMOTERID,c.ISDIRECTPOSTING,c.VIRTUALACCOUNT,
												co.MOBILE as mobileNumber,co.EMAIL as email,c.ISDELETED  
												from CUSTOMER c
												Inner Join EMPLOYEE e ON c.SALESOFFICEID = e.SALESOFFICEID
												Inner Join CONTACT co on co.ID = c.MAINCONTACTID
												Where c.ISDELETED = 0 And e.ID = ?
										" />
				<entry key="Select_Customer_By_UserId"
					value="SELECT customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,customer.UPDATEDATE,
												customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,customer.HEADQUARTER,customer.CUSTOMERNAME,
												customer.SINGLELOCATION,customer.CUSTOMERGROUPID,customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,
												customer.SALESGROUPID,customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,
												customer.VIRTUALACCOUNT,customer.ISDELETED, customer.DELCREDER, customer.showsalesdata , customergroupLkd.name as customerGroupName  , contactLkd.email as email ,
												contactLkd.mobile as mobileNumber, salesgroupLkd.name as salesGroup  , salesofficeLkd.name as salesOffice ,salesofficeLkd.code as salesOfficeCode ,
												customerLkd1.customername as salesPromoterName, salesorgLkd.CODE as salesOrgCode, salesorgLkd.name as salesOrganisation, distchannelLkd.name as distChannel,
												salesunitLkd.name as  salesUnit, salesunitLkd.CODE as  salesUnitCode, salesregionLkd.name as salesRegion,salesregionLkd.code as salesRegionCode, addressLkd.name as  addressName,
												addressLkd.streetname as streetName, addressLkd.streetside as streetSide, addressLkd.FLOOR as floor,
												addressLkd.HOUSENUMBER as houseNumber, locationLkd.city as  city, locationLkd.STATEPROV as  state,
												locationLkd.COUNTRY as  country, locationLkd.POSTALCODE as  postalCode, 
												di.CODE as divisionCode, di.name as divisionName,customer.ISSECONDARYSALESACCESS as secondarySalesAccess
											From CUSTOMERUSER cu 
											Inner Join CUSTOMER  On cu.CUSTOMERID = CUSTOMER.ID
											Inner JOIN customergroup customergroupLkd ON customer.CUSTOMERGROUPID = customergroupLkd.ID
											Inner JOIN salesarea salesareaLkd ON customer.SALESAREAID = salesareaLkd.ID 
											Inner JOIN salesgroup salesgroupLkd ON customer.SALESGROUPID = salesgroupLkd.ID 
											Inner JOIN salesoffice salesofficeLkd ON customer.SALESOFFICEID = salesofficeLkd.ID 
											Inner JOIN salesorganisation salesorgLkd ON salesareaLkd.SALESORGID = salesorgLkd.ID 
											Inner JOIN DISTRIBUTIONCHANNEL distchannelLkd ON salesareaLkd.DISTCHANNELID = distchannelLkd.ID 
											Inner JOIN salesunit salesunitLkd ON salesofficeLkd.SALESUNITID = salesunitLkd.ID 
											Inner JOIN salesregion salesregionLkd ON salesunitLkd.SALESREGIONID = salesregionLkd.ID 
											Inner Join DIVISION di on di.ID = salesareaLkd.DIVISIONID
											Inner JOIN ENTERPRISE en ON en.ID = salesregionLkd.ENTERPRISEID
											LEFT JOIN customer customerLkd1 ON customer.SALESPROMOTERID = customerLkd1.ID 
											LEFT JOIN contact contactLkd ON customer.MAINCONTACTID = contactLkd.ID 
											LEFT JOIN customer customerLkd ON customer.PARENTHQID = customerLkd.ID
											LEFT JOIN address addressLkd ON contactLkd.ADDRESSID = addressLkd.ID 
											LEFT JOIN location locationLkd ON addressLkd.LOCATIONID = locationLkd.ID
											where customer.ISDELETED = 0 and cu.ID = ?
											ORDER BY customer.ID
										" />

				<entry key="FIND_Sale_organisation_By_Cutomer_Id"
					value="select s.ID
      ,s.CREATEDATE
      ,s.CREATOR
      ,s.ENTITY_UID
      ,s.MODIFIER
      ,s.UPDATEDATE
      ,s.OPTLOCK
      ,s.CODE
      ,s.NAME
      ,s.ENTERPRISEID from SALESORGANISATION s
		inner join SALESAREA on s.ID=SALESAREA.SALESORGID inner join CUSTOMER on CUSTOMER.SALESAREAID=SALESAREA.ID where CUSTOMER.id=?" />


				<entry key="SELECT_SALEORG_COUNT_BY_CODE"
					value="SELECT Count(*) from  SALESORGANISATION s where s.CODE= ?" />
				<entry key="SELECT_SALEORG_BY_CODE"
					value="SELECT * from  SALESORGANISATION s where s.CODE= ?" />

				<entry key="FIND_Dvision_By_Cutomer_Id"
					value="select d.ID
      ,d.CREATEDATE
      ,d.CREATOR
      ,d.ENTITY_UID
      ,d.MODIFIER
      ,d.UPDATEDATE
      ,d.OPTLOCK
      ,d.CODE
      ,d.NAME from DIVISION d
		inner join SALESAREA on d.ID=SALESAREA.DIVISIONID inner join CUSTOMER on CUSTOMER.SALESAREAID=SALESAREA.ID where CUSTOMER.id=?" />
				<entry key="SELECT_Orderpartner_BY_OrderHeaderID"
					value="SELECT orderpartner.ID,orderpartner.CREATEDATE,orderpartner.CREATOR,orderpartner.ENTITY_UID,
																 orderpartner.MODIFIER,orderpartner.UPDATEDATE,orderpartner.OPTLOCK,orderpartner.PARTNERNAME,
																 orderpartner.PARTNERNO,orderpartner.PARTNERTYPE,orderpartner.ADDRESSID,orderpartner.ORDERHEADERID
														FROM orderpartner 
														where orderpartner.ORDERHEADERID= ? 
														ORDER BY orderpartner.ID
                                        " />
				<!--// Queries For RetailerOrder -->
				<!-- <entry key="SEARCH_RetailerOrder" value="SELECT retailer_order.ID,retailer_order.CREATEDATE,retailer_order.CREATOR,retailer_order.ENTITY_UID,retailer_order.MODIFIER,retailer_order.UPDATEDATE,retailer_order.OPTLOCK,retailer_order.ORDERNUMBER,retailer_order.FLOATINGSTOCK,retailer_order.MATERIALID,retailer_order.QUANTITY,retailer_order.REQUIREDDATE,retailer_order.STATUS,retailer_order.CUSTOMERID,retailer_order.RETAILERID,retailer_order.WEBORDERNUMBER 
					, CUSTOMERIDLkd.name as customeridcustomerLkdDesc , RETAILERIDLkd.name as 
					retaileridretailerLkdDesc FROM retailer_order LEFT JOIN customer CUSTOMERIDLkd 
					ON retailer_order.CUSTOMERID = CUSTOMERIDLkd.ID LEFT JOIN retailer RETAILERIDLkd 
					ON retailer_order.RETAILERID = RETAILERIDLkd.ID where 1=1 AND ID=? ORDER 
					BY retailer_order.ID "/> -->
				<!-- <entry key="SELECT_ALL_RetailerOrder" value="SELECT retailer_order.ID,retailer_order.CREATEDATE,retailer_order.CREATOR,retailer_order.ENTITY_UID,retailer_order.MODIFIER,retailer_order.UPDATEDATE,retailer_order.OPTLOCK,retailer_order.ORDERNUMBER,retailer_order.FLOATINGSTOCK,retailer_order.MATERIALID,retailer_order.QUANTITY,retailer_order.REQUIREDDATE,retailer_order.STATUS,retailer_order.CUSTOMERID,retailer_order.RETAILERID,retailer_order.WEBORDERNUMBER 
					, customerLkd.name as customeridcustomerLkdDesc , retailerLkd.name as retaileridretailerLkdDesc 
					FROM retailer_order LEFT JOIN customer customerLkd ON retailer_order.CUSTOMERID 
					= customerLkd.ID LEFT JOIN retailer retailerLkd ON retailer_order.RETAILERID 
					= retailerLkd.ID ORDER BY retailer_order.ID "/> -->
				<!-- <entry key="INSERT_RetailerOrder" value="INSERT INTO retailer_order 
					(ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,ORDERNUMBER,FLOATINGSTOCK,MATERIALID,QUANTITY,REQUIREDDATE,STATUS,CUSTOMERID,RETAILERID,WEBORDERNUMBER) 
					VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) "/> -->
				<!-- <entry key="DELETE_RetailerOrder_BY_ID" value="DELETE from retailer_order 
					where ID= ? "/> -->

				<!--Deepak -->

				<!-- Need to be changed to RP_RetialerOrder -->
				<entry key="UPDATE_RetailerOrder_BY_ID"
					value="UPDATE RP_RETAILER_ORDER SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?,
											  OPTLOCK = ?, ORDERNUMBER = ?, FLOATINGSTOCK = ?, MATERIALID = ?, QUANTITY = ?, REQUIREDDATE = ?, 
											  STATUS = ?, CUSTOMERID = ?, RETAILERID = ?, WEBORDERNUMBER = ? WHERE ID=? " />
				<entry key="SELECT_RetailerOrder_BY_ID"
					value=" SELECT * FROM rp_retailer_order where rp_retailer_order.ID= ?" />
				<!-- Commented below code to update retailer query and added new query 
					below by Mohsin -->
				<!-- <entry key="SELECT_RetailerOrder_By_FKCustomerid" value="SELECT 
					r.ID,r.CREATEDATE,r.CREATOR,r.ENTITY_UID,r.MODIFIER,r.UPDATEDATE,r.OPTLOCK 
					,r.ORDERNUMBER,r.FLOATINGSTOCK,r.MATERIALID,r.QUANTITY,r.REQUIREDDATE,r.STATUS,r.CUSTOMERID, 
					r.RETAILERID,r.WEBORDERNUMBER,rr.name as retailerName,rr.city as retailerCity,m.DESCRIPTION 
					as materialName, m.articleno as articleNo FROM RP_RETAILER_ORDER r inner 
					join RP_RETAILER rr on rr.ID = r.retailerid inner join MATERIAL m on m.ID 
					= r.materialid where r.CUSTOMERID = ? and r.STATUS ='OPEN' order by r.CREATEDATE 
					desc "/> -->
				<entry key="SELECT_RetailerOrder_By_FKCustomerid"
					value="SELECT r.ID,r.CREATEDATE,r.CREATOR,r.ENTITY_UID,r.MODIFIER,r.UPDATEDATE,r.OPTLOCK
														,r.ORDERNUMBER,r.FLOATINGSTOCK,r.MATERIALID,r.QUANTITY,r.REQUIREDDATE,r.STATUS,r.CUSTOMERID,
															r.RETAILERID,r.WEBORDERNUMBER,rr.address as retailerName,rr.cityname as retailerCity,m.DESCRIPTION as materialName,
															m.articleno as articleNo 
															FROM RP_RETAILER_ORDER r  inner join shiptoparty rr on rr.ID = r.retailerid
															inner join MATERIAL m on m.ID = r.materialid where r.CUSTOMERID = ? and r.STATUS ='OPEN' order by r.CREATEDATE desc
                                        " />
				<entry key="SELECT_RetailerOrder_By_FKRetailerid"
					value="SELECT retailer_order.ID,retailer_order.CREATEDATE,retailer_order.CREATOR,
														retailer_order.ENTITY_UID,retailer_order.MODIFIER,retailer_order.UPDATEDATE,
														retailer_order.OPTLOCK,retailer_order.ORDERNUMBER,retailer_order.FLOATINGSTOCK,
														retailer_order.MATERIALID,retailer_order.QUANTITY,retailer_order.REQUIREDDATE,
														retailer_order.STATUS,retailer_order.CUSTOMERID,retailer_order.RETAILERID,
														retailer_order.WEBORDERNUMBER  FROM rp_retailer_order as retailer_order
                                        				where retailer_order.RETAILERID = ? " />
				<!-- <entry key="SELECT_FloatingOrder_By_FKCustomerid" value="SELECT 
					r.ID,r.CREATEDATE,r.CREATOR,r.ENTITY_UID,r.MODIFIER,r.UPDATEDATE,r.OPTLOCK 
					,r.ORDERNUMBER,r.FLOATINGSTOCK,r.MATERIALID,r.QUANTITY,r.REQUIREDDATE,r.STATUS,r.CUSTOMERID, 
					r.RETAILERID,r.WEBORDERNUMBER,rr.name as retailerName,rr.city as retailerCity,m.DESCRIPTION 
					as materialName FROM RP_RETAILER_ORDER r inner join RP_RETAILER rr on rr.ID 
					= r.retailerid inner join MATERIAL m on m.ID = r.materialid where r.CUSTOMERID 
					= ? and r.FLOATINGSTOCK = 1 order by r.CREATEDATE desc "/> -->
				<entry key="SELECT_FloatingOrder_By_FKCustomerid"
					value="SELECT r.ID,r.CREATEDATE,r.CREATOR,r.ENTITY_UID,r.MODIFIER,r.UPDATEDATE,r.OPTLOCK
														,r.ORDERNUMBER,r.FLOATINGSTOCK,r.MATERIALID,r.QUANTITY,r.REQUIREDDATE,r.STATUS,r.CUSTOMERID,
															r.RETAILERID,r.WEBORDERNUMBER,rr.address as retailerName,rr.CITYNAME as retailerCity,m.DESCRIPTION as materialName
															FROM RP_RETAILER_ORDER r inner join SHIPTOPARTY rr on rr.ID = r.retailerid
															inner join MATERIAL m on m.ID = r.materialid  where r.CUSTOMERID = ? and r.FLOATINGSTOCK = 1
															order by r.CREATEDATE desc
                                        " />
				<!-- Need to be changed to RP_RetialerOrder -->
				<entry key="SELECT_Material_BY_ID"
					value=" select * from MATERIAL m where  m.ID = ?" />
				<entry key="SELECT_Material_Description_BY_ID"
					value=" select m.DESCRIPTION from MATERIAL m where  m.ID = ?" />
				<!-- Need to be changed to RP_RetialerOrder -->
				<entry key="SELECT_Retailer_BY_ID"
					value=" select * from RP_RETAILER r where  r.ID = ?" />
				<entry key="SELECT_Retailer_Name_BY_ID"
					value=" select r.NAME from RP_RETAILER r where  r.ID = ?" />
				<!-- Need to be changed to RP_RetialerOrder -->

				<!--// Queries For Postedorderheader -->
				<entry key="SEARCH_Postedorderheader"
					value="SELECT POSTEDORDERHEADER.ID,POSTEDORDERHEADER.CREATEDATE,POSTEDORDERHEADER.CREATOR,POSTEDORDERHEADER.ENTITY_UID,POSTEDORDERHEADER.MODIFIER,POSTEDORDERHEADER.UPDATEDATE,POSTEDORDERHEADER.OPTLOCK,POSTEDORDERHEADER.CONTRACTNUMBER,POSTEDORDERHEADER.DOCDATE,POSTEDORDERHEADER.DOCTYPE,POSTEDORDERHEADER.SALESDOCUMENT,POSTEDORDERHEADER.SHORTTEXT,POSTEDORDERHEADER.STATUS,POSTEDORDERHEADER.INCOMPLETIONLOGID,POSTEDORDERHEADER.PLANTID,POSTEDORDERHEADER.SHIPPINGPOINTID,POSTEDORDERHEADER.STORELOCATIONCODE , INCOMPLETIONLOGIDLkd.name as incompletionlogidorderexceptionLkdDesc , PLANTIDLkd.name as plantidplantLkdDesc 
                                        FROM POSTEDORDERHEADER  
                                        LEFT JOIN orderexception INCOMPLETIONLOGIDLkd ON POSTEDORDERHEADER.INCOMPLETIONLOGID = INCOMPLETIONLOGIDLkd.ID LEFT JOIN plant PLANTIDLkd ON POSTEDORDERHEADER.PLANTID = PLANTIDLkd.ID  
                                        where 1=1  AND ID=?
                                        ORDER BY POSTEDORDERHEADER.ID  
                                        " />
				<entry key="SELECT_ALL_Postedorderheader"
					value="SELECT POSTEDORDERHEADER.ID,POSTEDORDERHEADER.CREATEDATE,POSTEDORDERHEADER.CREATOR,POSTEDORDERHEADER.ENTITY_UID,POSTEDORDERHEADER.MODIFIER,POSTEDORDERHEADER.UPDATEDATE,POSTEDORDERHEADER.OPTLOCK,POSTEDORDERHEADER.CONTRACTNUMBER,POSTEDORDERHEADER.DOCDATE,POSTEDORDERHEADER.DOCTYPE,POSTEDORDERHEADER.SALESDOCUMENT,POSTEDORDERHEADER.SHORTTEXT,POSTEDORDERHEADER.STATUS,POSTEDORDERHEADER.INCOMPLETIONLOGID,POSTEDORDERHEADER.PLANTID,POSTEDORDERHEADER.SHIPPINGPOINTID,POSTEDORDERHEADER.STORELOCATIONCODE , orderexceptionLkd.name as incompletionlogidorderexceptionLkdDesc  , plantLkd.name as plantidplantLkdDesc  
                                        FROM POSTEDORDERHEADER  
                                        LEFT JOIN orderexception orderexceptionLkd ON POSTEDORDERHEADER.INCOMPLETIONLOGID = orderexceptionLkd.ID LEFT JOIN plant plantLkd ON POSTEDORDERHEADER.PLANTID = plantLkd.ID  
                                        ORDER BY POSTEDORDERHEADER.ID 
                                        " />
				<entry key="INSERT_Postedorderheader"
					value="INSERT INTO POSTEDORDERHEADER (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,CONTRACTNUMBER,DOCDATE,DOCTYPE,SALESDOCUMENT,SHORTTEXT,STATUS,INCOMPLETIONLOGID,PLANTID,SHIPPINGPOINTID,STORELOCATIONCODE)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)  
                                        " />
				<entry key="DELETE_Postedorderheader_BY_ID"
					value="DELETE from POSTEDORDERHEADER where ID= ?  " />
				<entry key="UPDATE_Postedorderheader_BY_ID"
					value="UPDATE POSTEDORDERHEADER SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, CONTRACTNUMBER = ?, DOCDATE = ?, DOCTYPE = ?, SALESDOCUMENT = ?, SHORTTEXT = ?, STATUS = ?, INCOMPLETIONLOGID = ?, PLANTID = ?, SHIPPINGPOINTID = ?, STORELOCATIONCODE = ?  
                                        WHERE ID=?  
                                        " />
				<entry key="SELECT_Postedorderheader_BY_ID"
					value=" SELECT POSTEDORDERHEADER.ID,POSTEDORDERHEADER.CREATEDATE,POSTEDORDERHEADER.CREATOR,POSTEDORDERHEADER.ENTITY_UID,POSTEDORDERHEADER.MODIFIER,POSTEDORDERHEADER.UPDATEDATE,POSTEDORDERHEADER.OPTLOCK,POSTEDORDERHEADER.CONTRACTNUMBER,POSTEDORDERHEADER.DOCDATE,POSTEDORDERHEADER.DOCTYPE,POSTEDORDERHEADER.SALESDOCUMENT,POSTEDORDERHEADER.SHORTTEXT,POSTEDORDERHEADER.STATUS,POSTEDORDERHEADER.INCOMPLETIONLOGID,POSTEDORDERHEADER.PLANTID,POSTEDORDERHEADER.SHIPPINGPOINTID,POSTEDORDERHEADER.STORELOCATIONCODE , orderexceptionINCOMPLETIONLOGIDLkd.name as incompletionlogidorderexceptionLkdDesc  , plantPLANTIDLkd.name as plantidplantLkdDesc  
                                        FROM POSTEDORDERHEADER  
                                        LEFT JOIN orderexception orderexceptionINCOMPLETIONLOGIDLkd ON POSTEDORDERHEADER.INCOMPLETIONLOGID = orderexceptionINCOMPLETIONLOGIDLkd.ID LEFT JOIN plant plantPLANTIDLkd ON POSTEDORDERHEADER.PLANTID = plantPLANTIDLkd.ID  
                                        where POSTEDORDERHEADER.ID= ?  
                                        ORDER BY POSTEDORDERHEADER.ID 
                                        " />
				<entry key="SELECT_Postedorderheader_By_FKIncompletionlogid"
					value="SELECT POSTEDORDERHEADER.ID,POSTEDORDERHEADER.CREATEDATE,POSTEDORDERHEADER.CREATOR,POSTEDORDERHEADER.ENTITY_UID,POSTEDORDERHEADER.MODIFIER,POSTEDORDERHEADER.UPDATEDATE,POSTEDORDERHEADER.OPTLOCK,POSTEDORDERHEADER.CONTRACTNUMBER,POSTEDORDERHEADER.DOCDATE,POSTEDORDERHEADER.DOCTYPE,POSTEDORDERHEADER.SALESDOCUMENT,POSTEDORDERHEADER.SHORTTEXT,POSTEDORDERHEADER.STATUS,POSTEDORDERHEADER.INCOMPLETIONLOGID,POSTEDORDERHEADER.PLANTID,POSTEDORDERHEADER.SHIPPINGPOINTID,POSTEDORDERHEADER.STORELOCATIONCODE
                                        FROM POSTEDORDERHEADER  
                                        where POSTEDORDERHEADER.INCOMPLETIONLOGID = ?  
                                        " />
				<entry key="SELECT_Postedorderheader_By_FKPlantid"
					value="SELECT POSTEDORDERHEADER.ID,POSTEDORDERHEADER.CREATEDATE,POSTEDORDERHEADER.CREATOR,POSTEDORDERHEADER.ENTITY_UID,POSTEDORDERHEADER.MODIFIER,POSTEDORDERHEADER.UPDATEDATE,POSTEDORDERHEADER.OPTLOCK,POSTEDORDERHEADER.CONTRACTNUMBER,POSTEDORDERHEADER.DOCDATE,POSTEDORDERHEADER.DOCTYPE,POSTEDORDERHEADER.SALESDOCUMENT,POSTEDORDERHEADER.SHORTTEXT,POSTEDORDERHEADER.STATUS,POSTEDORDERHEADER.INCOMPLETIONLOGID,POSTEDORDERHEADER.PLANTID,POSTEDORDERHEADER.SHIPPINGPOINTID,POSTEDORDERHEADER.STORELOCATIONCODE
                                        FROM POSTEDORDERHEADER  
                                        where POSTEDORDERHEADER.PLANTID = ?  
                                        " />
				<!--// Queries For Postedorderline -->
				<entry key="SEARCH_Postedorderline"
					value="SELECT POSTEDORDERLINE.ID,POSTEDORDERLINE.CREATEDATE,POSTEDORDERLINE.CREATOR,POSTEDORDERLINE.ENTITY_UID,POSTEDORDERLINE.MODIFIER,POSTEDORDERLINE.UPDATEDATE,POSTEDORDERLINE.OPTLOCK,POSTEDORDERLINE.CURRENCY,POSTEDORDERLINE.DELIVEREDQTY,POSTEDORDERLINE.NETPRICE,POSTEDORDERLINE.NETVALUE,POSTEDORDERLINE.REQUIREDATE,POSTEDORDERLINE.REQUIREQTY,POSTEDORDERLINE.UOM,POSTEDORDERLINE.MATERIALID,POSTEDORDERLINE.POSTEDORDERHEADERID , MATERIALIDLkd.name as materialidmaterialLkdDesc , POSTEDORDERHEADERIDLkd.name as postedorderheaderidpostedorderheaderLkdDesc  
                                        FROM POSTEDORDERLINE
                                        LEFT JOIN material MATERIALIDLkd ON POSTEDORDERLINE.MATERIALID = MATERIALIDLkd.ID LEFT JOIN postedorderheader POSTEDORDERHEADERIDLkd ON POSTEDORDERLINE.POSTEDORDERHEADERID = POSTEDORDERHEADERIDLkd.ID
                                        where 1=1  AND ID=? 
                                        ORDER BY POSTEDORDERLINE.ID
                                        " />
				<entry key="SELECT_ALL_Postedorderline"
					value="SELECT POSTEDORDERLINE.ID,POSTEDORDERLINE.CREATEDATE,POSTEDORDERLINE.CREATOR,POSTEDORDERLINE.ENTITY_UID,POSTEDORDERLINE.MODIFIER,POSTEDORDERLINE.UPDATEDATE,POSTEDORDERLINE.OPTLOCK,POSTEDORDERLINE.CURRENCY,POSTEDORDERLINE.DELIVEREDQTY,POSTEDORDERLINE.NETPRICE,POSTEDORDERLINE.NETVALUE,POSTEDORDERLINE.REQUIREDATE,POSTEDORDERLINE.REQUIREQTY,POSTEDORDERLINE.UOM,POSTEDORDERLINE.MATERIALID,POSTEDORDERLINE.POSTEDORDERHEADERID , materialLkd.name as materialidmaterialLkdDesc  , postedorderheaderLkd.name as postedorderheaderidpostedorderheaderLkdDesc
                                        FROM POSTEDORDERLINE
                                        LEFT JOIN material materialLkd ON POSTEDORDERLINE.MATERIALID = materialLkd.ID LEFT JOIN postedorderheader postedorderheaderLkd ON POSTEDORDERLINE.POSTEDORDERHEADERID = postedorderheaderLkd.ID
                                        ORDER BY POSTEDORDERLINE.ID  
                                        " />
				<entry key="INSERT_Postedorderline"
					value="INSERT INTO POSTEDORDERLINE (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,CURRENCY,DELIVEREDQTY,NETPRICE,NETVALUE,REQUIREDATE,REQUIREQTY,UOM,MATERIALID,POSTEDORDERHEADERID) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                        " />
				<entry key="DELETE_Postedorderline_BY_ID"
					value="DELETE from POSTEDORDERLINE where ID= ?  " />
				<entry key="UPDATE_Postedorderline_BY_ID"
					value="UPDATE POSTEDORDERLINE SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, CURRENCY = ?, DELIVEREDQTY = ?, NETPRICE = ?, NETVALUE = ?, REQUIREDATE = ?, REQUIREQTY = ?, UOM = ?, MATERIALID = ?, POSTEDORDERHEADERID = ?
                                        WHERE ID=?
                                        " />
				<entry key="SELECT_Postedorderline_BY_ID"
					value=" SELECT POSTEDORDERLINE.ID,POSTEDORDERLINE.CREATEDATE,POSTEDORDERLINE.CREATOR,POSTEDORDERLINE.ENTITY_UID,POSTEDORDERLINE.MODIFIER,POSTEDORDERLINE.UPDATEDATE,POSTEDORDERLINE.OPTLOCK,POSTEDORDERLINE.CURRENCY,POSTEDORDERLINE.DELIVEREDQTY,POSTEDORDERLINE.NETPRICE,POSTEDORDERLINE.NETVALUE,POSTEDORDERLINE.REQUIREDATE,POSTEDORDERLINE.REQUIREQTY,POSTEDORDERLINE.UOM,POSTEDORDERLINE.MATERIALID,POSTEDORDERLINE.POSTEDORDERHEADERID , materialMATERIALIDLkd.name as materialidmaterialLkdDesc  , postedorderheaderPOSTEDORDERHEADERIDLkd.name as postedorderheaderidpostedorderheaderLkdDesc
                                        FROM POSTEDORDERLINE
                                        LEFT JOIN material materialMATERIALIDLkd ON POSTEDORDERLINE.MATERIALID = materialMATERIALIDLkd.ID LEFT JOIN postedorderheader postedorderheaderPOSTEDORDERHEADERIDLkd ON POSTEDORDERLINE.POSTEDORDERHEADERID = postedorderheaderPOSTEDORDERHEADERIDLkd.ID
                                        where POSTEDORDERLINE.ID= ?
                                        ORDER BY POSTEDORDERLINE.ID  
                                        " />
				<entry key="SELECT_Postedorderline_By_FKMaterialid"
					value="SELECT POSTEDORDERLINE.ID,POSTEDORDERLINE.CREATEDATE,POSTEDORDERLINE.CREATOR,POSTEDORDERLINE.ENTITY_UID,POSTEDORDERLINE.MODIFIER,POSTEDORDERLINE.UPDATEDATE,POSTEDORDERLINE.OPTLOCK,POSTEDORDERLINE.CURRENCY,POSTEDORDERLINE.DELIVEREDQTY,POSTEDORDERLINE.NETPRICE,POSTEDORDERLINE.NETVALUE,POSTEDORDERLINE.REQUIREDATE,POSTEDORDERLINE.REQUIREQTY,POSTEDORDERLINE.UOM,POSTEDORDERLINE.MATERIALID,POSTEDORDERLINE.POSTEDORDERHEADERID 
                                        FROM POSTEDORDERLINE
                                        where POSTEDORDERLINE.MATERIALID = ?
                                        " />
				<entry key="SELECT_Postedorderline_By_FKPostedorderheaderid"
					value="SELECT POSTEDORDERLINE.ID,POSTEDORDERLINE.CREATEDATE,POSTEDORDERLINE.CREATOR,POSTEDORDERLINE.ENTITY_UID,POSTEDORDERLINE.MODIFIER,POSTEDORDERLINE.UPDATEDATE,POSTEDORDERLINE.OPTLOCK,POSTEDORDERLINE.CURRENCY,POSTEDORDERLINE.DELIVEREDQTY,POSTEDORDERLINE.NETPRICE,POSTEDORDERLINE.NETVALUE,POSTEDORDERLINE.REQUIREDATE,POSTEDORDERLINE.REQUIREQTY,POSTEDORDERLINE.UOM,POSTEDORDERLINE.MATERIALID,POSTEDORDERLINE.POSTEDORDERHEADERID 
                                        FROM POSTEDORDERLINE
                                        where POSTEDORDERLINE.POSTEDORDERHEADERID = ?
                                        " />
				<!--// Queries For Postedorderlineship -->
				<entry key="SEARCH_Postedorderlineship"
					value="SELECT POSTEDORDERLINESHIP.ID,POSTEDORDERLINESHIP.CREATEDATE,POSTEDORDERLINESHIP.CREATOR,POSTEDORDERLINESHIP.ENTITY_UID,POSTEDORDERLINESHIP.MODIFIER,POSTEDORDERLINESHIP.UPDATEDATE,POSTEDORDERLINESHIP.OPTLOCK,POSTEDORDERLINESHIP.CUMMDELIVEREDQTY,POSTEDORDERLINESHIP.CURRENCY,POSTEDORDERLINESHIP.DELIVEREDQTY,POSTEDORDERLINESHIP.DELIVARYDATE,POSTEDORDERLINESHIP.DELIVERYNO,POSTEDORDERLINESHIP.DELIVERYQTY,POSTEDORDERLINESHIP.NETPRICE,POSTEDORDERLINESHIP.NETVALUE,POSTEDORDERLINESHIP.REQUIREDATE,POSTEDORDERLINESHIP.REQUIREQTY,POSTEDORDERLINESHIP.POSTEDORDERLINEID , POSTEDORDERLINEIDLkd.name as postedorderlineidpostedorderlineLkdDesc
                                        FROM POSTEDORDERLINESHIP 
                                        LEFT JOIN postedorderline POSTEDORDERLINEIDLkd ON POSTEDORDERLINESHIP.POSTEDORDERLINEID = POSTEDORDERLINEIDLkd.ID 
                                        where 1=1  AND ID=?  
                                        ORDER BY POSTEDORDERLINESHIP.ID 
                                        " />
				<entry key="SELECT_ALL_Postedorderlineship"
					value="SELECT POSTEDORDERLINESHIP.ID,POSTEDORDERLINESHIP.CREATEDATE,POSTEDORDERLINESHIP.CREATOR,POSTEDORDERLINESHIP.ENTITY_UID,POSTEDORDERLINESHIP.MODIFIER,POSTEDORDERLINESHIP.UPDATEDATE,POSTEDORDERLINESHIP.OPTLOCK,POSTEDORDERLINESHIP.CUMMDELIVEREDQTY,POSTEDORDERLINESHIP.CURRENCY,POSTEDORDERLINESHIP.DELIVEREDQTY,POSTEDORDERLINESHIP.DELIVARYDATE,POSTEDORDERLINESHIP.DELIVERYNO,POSTEDORDERLINESHIP.DELIVERYQTY,POSTEDORDERLINESHIP.NETPRICE,POSTEDORDERLINESHIP.NETVALUE,POSTEDORDERLINESHIP.REQUIREDATE,POSTEDORDERLINESHIP.REQUIREQTY,POSTEDORDERLINESHIP.POSTEDORDERLINEID , postedorderlineLkd.name as postedorderlineidpostedorderlineLkdDesc 
                                        FROM POSTEDORDERLINESHIP 
                                        LEFT JOIN postedorderline postedorderlineLkd ON POSTEDORDERLINESHIP.POSTEDORDERLINEID = postedorderlineLkd.ID 
                                        ORDER BY POSTEDORDERLINESHIP.ID
                                        " />
				<entry key="INSERT_Postedorderlineship"
					value="INSERT INTO POSTEDORDERLINESHIP (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,CUMMDELIVEREDQTY,CURRENCY,DELIVEREDQTY,DELIVARYDATE,DELIVERYNO,DELIVERYQTY,NETPRICE,NETVALUE,REQUIREDATE,REQUIREQTY,POSTEDORDERLINEID)
                                         VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
                                        " />
				<entry key="DELETE_Postedorderlineship_BY_ID"
					value="DELETE from POSTEDORDERLINESHIP where ID= ?  " />
				<entry key="UPDATE_Postedorderlineship_BY_ID"
					value="UPDATE POSTEDORDERLINESHIP SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, CUMMDELIVEREDQTY = ?, CURRENCY = ?, DELIVEREDQTY = ?, DELIVARYDATE = ?, DELIVERYNO = ?, DELIVERYQTY = ?, NETPRICE = ?, NETVALUE = ?, REQUIREDATE = ?, REQUIREQTY = ?, POSTEDORDERLINEID = ? 
                                        WHERE ID=? 
                                        " />
				<entry key="SELECT_Postedorderlineship_BY_ID"
					value=" SELECT POSTEDORDERLINESHIP.ID,POSTEDORDERLINESHIP.CREATEDATE,POSTEDORDERLINESHIP.CREATOR,POSTEDORDERLINESHIP.ENTITY_UID,POSTEDORDERLINESHIP.MODIFIER,POSTEDORDERLINESHIP.UPDATEDATE,POSTEDORDERLINESHIP.OPTLOCK,POSTEDORDERLINESHIP.CUMMDELIVEREDQTY,POSTEDORDERLINESHIP.CURRENCY,POSTEDORDERLINESHIP.DELIVEREDQTY,POSTEDORDERLINESHIP.DELIVARYDATE,POSTEDORDERLINESHIP.DELIVERYNO,POSTEDORDERLINESHIP.DELIVERYQTY,POSTEDORDERLINESHIP.NETPRICE,POSTEDORDERLINESHIP.NETVALUE,POSTEDORDERLINESHIP.REQUIREDATE,POSTEDORDERLINESHIP.REQUIREQTY,POSTEDORDERLINESHIP.POSTEDORDERLINEID , postedorderlinePOSTEDORDERLINEIDLkd.name as postedorderlineidpostedorderlineLkdDesc 
                                        FROM POSTEDORDERLINESHIP 
                                        LEFT JOIN postedorderline postedorderlinePOSTEDORDERLINEIDLkd ON POSTEDORDERLINESHIP.POSTEDORDERLINEID = postedorderlinePOSTEDORDERLINEIDLkd.ID 
                                        where POSTEDORDERLINESHIP.ID= ? 
                                        ORDER BY POSTEDORDERLINESHIP.ID
                                        " />
				<entry key="SELECT_Postedorderlineship_By_FKPostedorderlineid"
					value="SELECT POSTEDORDERLINESHIP.ID,POSTEDORDERLINESHIP.CREATEDATE,POSTEDORDERLINESHIP.CREATOR,POSTEDORDERLINESHIP.ENTITY_UID,POSTEDORDERLINESHIP.MODIFIER,POSTEDORDERLINESHIP.UPDATEDATE,POSTEDORDERLINESHIP.OPTLOCK,POSTEDORDERLINESHIP.CUMMDELIVEREDQTY,POSTEDORDERLINESHIP.CURRENCY,POSTEDORDERLINESHIP.DELIVEREDQTY,POSTEDORDERLINESHIP.DELIVARYDATE,POSTEDORDERLINESHIP.DELIVERYNO,POSTEDORDERLINESHIP.DELIVERYQTY,POSTEDORDERLINESHIP.NETPRICE,POSTEDORDERLINESHIP.NETVALUE,POSTEDORDERLINESHIP.REQUIREDATE,POSTEDORDERLINESHIP.REQUIREQTY,POSTEDORDERLINESHIP.POSTEDORDERLINEID  
                                        FROM POSTEDORDERLINESHIP 
                                        where POSTEDORDERLINESHIP.POSTEDORDERLINEID = ? 
                                        " />
				<!-- Incident Escalation Queries -->
				<entry key="SEARCH_IncidentEscalation"
					value="SELECT incidentescalation.ID,incidentescalation.CREATEDATE,incidentescalation.CREATOR,incidentescalation.ENTITY_UID,
													incidentescalation.MODIFIER,incidentescalation.UPDATEDATE,incidentescalation.OPTLOCK,
													incidentescalation.ACTIVE,incidentescalation.EMAIL1,incidentescalation.EMAIL2,
													incidentescalation.ESCALATIONLEVEL,incidentescalation.EMAIL3, incidentescalation.SALESOFFICEID,
													 salesOfficeLkd.NAME as salesOfficeName, incidentescalation.ISDELETED 
											FROM incidentescalation
											INNER JOIN SALESOFFICE salesOfficeLkd ON incidentescalation.SALESOFFICEID = salesOfficeLkd.ID 
	                                        INNER JOIN SALESUNIT salesUnitLkd ON salesOfficeLkd.SALESUNITID = salesUnitLkd.ID 
											INNER JOIN SALESREGION salesRegionLkd ON salesUnitLkd.SALESREGIONID = salesRegionLkd.ID 
											INNER JOIN ENTERPRISE enterpriseLkd ON salesRegionLkd.ENTERPRISEID = enterpriseLkd.ID 
											INNER JOIN COMPANY companyLkd ON enterpriseLkd.COMPANYID = companyLkd.ID 
											where incidentescalation.ISDELETED=0 AND (? IS NULL OR incidentescalation.ESCALATIONLEVEL = ?)
													AND salesOfficeLkd.NAME LIKE ?
													AND (? IS NULL OR incidentescalation.ACTIVE = ?)
													AND companyLkd.ID=?
											ORDER BY incidentescalation.ID
                                        " />
				<entry key="SELECT_ALL_IncidentEscalations"
					value="SELECT incidentescalation.ID,incidentescalation.CREATEDATE,incidentescalation.CREATOR,incidentescalation.ENTITY_UID,incidentescalation.MODIFIER,incidentescalation.UPDATEDATE,incidentescalation.OPTLOCK,incidentescalation.ACTIVE,incidentescalation.EMAIL1,incidentescalation.EMAIL2,incidentescalation.ESCALATIONLEVEL,incidentescalation.EMAIL3, incidentescalation.SALESOFFICEID, salesOfficeLkd.NAME as salesOfficeName, incidentescalation.ISDELETED 
                                        FROM incidentescalation
                                        INNER JOIN SALESOFFICE salesOfficeLkd ON incidentescalation.SALESOFFICEID = salesOfficeLkd.ID 
                                        INNER JOIN SALESUNIT salesUnitLkd ON salesOfficeLkd.SALESUNITID = salesUnitLkd.ID 
										INNER JOIN SALESREGION salesRegionLkd ON salesUnitLkd.SALESREGIONID = salesRegionLkd.ID 
										INNER JOIN ENTERPRISE enterpriseLkd ON salesRegionLkd.ENTERPRISEID = enterpriseLkd.ID 
										INNER JOIN COMPANY companyLkd ON enterpriseLkd.COMPANYID = companyLkd.ID 
										where incidentescalation.ISDELETED=0 
										and companyLkd.ID=? 
                                        ORDER BY incidentescalation.ID
                                        " />
				<entry key="INSERT_IncidentEscalation"
					value="INSERT INTO INCIDENTESCALATION (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,ACTIVE,EMAIL1,EMAIL2,ESCALATIONLEVEL,SALESOFFICEID,EMAIL3)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                        " />
				<entry key="UPDATE_IncidentEscalation_BY_ID"
					value="UPDATE INCIDENTESCALATION SET MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, ACTIVE = ?, EMAIL1 = ?, EMAIL2 = ?, ESCALATIONLEVEL = ?, SALESOFFICEID = ?, EMAIL3 = ?
                                        WHERE ID=?" />
				<entry key="DELETE_IncidentEscalation_BY_ID"
					value="UPDATE INCIDENTESCALATION SET MODIFIER = ?, UPDATEDATE = ?, ISDELETED = ?
                                        WHERE ID=?" />
				<entry key="SELECT_IncidentEscalation_BY_ID"
					value="SELECT incidentescalation.ID,incidentescalation.CREATEDATE,incidentescalation.CREATOR,incidentescalation.ENTITY_UID,incidentescalation.MODIFIER,incidentescalation.UPDATEDATE,incidentescalation.OPTLOCK,incidentescalation.ACTIVE,incidentescalation.EMAIL1,incidentescalation.EMAIL2,incidentescalation.ESCALATIONLEVEL,incidentescalation.EMAIL3, incidentescalation.SALESOFFICEID, incidentescalation.ISDELETED 
                                        FROM incidentescalation
                                        where incidentescalation.ID=? AND incidentescalation.ISDELETED=0 
                                        " />
				<entry key="SELECT_IncidentEscalation_BY_SALESOFFICEID"
					value="SELECT incidentescalation.ID,incidentescalation.CREATEDATE,incidentescalation.CREATOR,incidentescalation.ENTITY_UID,incidentescalation.MODIFIER,incidentescalation.UPDATEDATE,incidentescalation.OPTLOCK,incidentescalation.ACTIVE,incidentescalation.EMAIL1,incidentescalation.EMAIL2,incidentescalation.ESCALATIONLEVEL,incidentescalation.EMAIL3, incidentescalation.SALESOFFICEID, incidentescalation.ISDELETED 
                                        FROM incidentescalation
                                        where incidentescalation.SALESOFFICEID=? AND incidentescalation.ISDELETED=0 
                                        " />
				<!-- Incident Rating Queries -->
				<entry key="SEARCH_IncidentRating"
					value="SELECT cms_incidentrating.ID, cms_incidentrating.CREATEDATE,cms_incidentrating.CREATOR,
											cms_incidentrating.ENTITY_UID,cms_incidentrating.MODIFIER,cms_incidentrating.UPDATEDATE,
											cms_incidentrating.OPTLOCK,cms_incidentrating.ACTIVE,cms_incidentrating.RATING,cms_incidentrating.COMPANYID 
										FROM cms_incidentrating
										LEFT JOIN company companyLkd ON cms_incidentrating.COMPANYID = companyLkd.ID
										where cms_incidentrating.ISDELETED=0 AND (? IS NULL OR cms_incidentrating.RATING like ?)
										and companyLkd.ID=?
										ORDER BY cms_incidentrating.ID
                                        " />
				<entry key="SELECT_ALL_IncidentRatings"
					value="SELECT cms_incidentrating.ID, cms_incidentrating.CREATEDATE,cms_incidentrating.CREATOR,cms_incidentrating.ENTITY_UID,cms_incidentrating.MODIFIER,cms_incidentrating.UPDATEDATE,cms_incidentrating.OPTLOCK,cms_incidentrating.ACTIVE,cms_incidentrating.RATING,cms_incidentrating.COMPANYID 
                                        FROM cms_incidentrating
                                        LEFT JOIN company companyLkd ON cms_incidentrating.COMPANYID = companyLkd.ID 
                                        where cms_incidentrating.ISDELETED=0 
                                        and companyLkd.ID=?
                                        ORDER BY cms_incidentrating.ID
                                        " />
				<entry key="INSERT_IncidentRating"
					value="INSERT INTO cms_incidentrating (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,ACTIVE,RATING,COMPANYID)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                        " />
				<entry key="UPDATE_IncidentRating_BY_ID"
					value="UPDATE cms_incidentrating SET MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, ACTIVE = ?, RATING = ?, COMPANYID = ?
                                        WHERE ID=?" />
				<entry key="DELETE_IncidentRating_BY_ID"
					value="UPDATE cms_incidentrating SET MODIFIER = ?, UPDATEDATE = ?, ISDELETED = ?
                                        WHERE ID=?" />
				<entry key="SELECT_IncidentRating_BY_ID"
					value="SELECT cms_incidentrating.ID, cms_incidentrating.CREATEDATE,cms_incidentrating.CREATOR,cms_incidentrating.ENTITY_UID,cms_incidentrating.MODIFIER,cms_incidentrating.UPDATEDATE,cms_incidentrating.OPTLOCK,cms_incidentrating.ACTIVE,cms_incidentrating.RATING,cms_incidentrating.COMPANYID 
                                        FROM cms_incidentrating
                                        where cms_incidentrating.ID=? AND cms_incidentrating.ISDELETED=0 
                                        " />

				<!--// Queries For Secondarysales -->
				<entry key="SEARCH_Secondarysales"
					value="SELECT secondarysales.ID,secondarysales.CREATEDATE,secondarysales.CREATOR,secondarysales.ENTITY_UID,secondarysales.MODIFIER,secondarysales.UPDATEDATE,secondarysales.OPTLOCK,secondarysales.ACTUALQTY,secondarysales.ASSIGNEDQTY,secondarysales.CITY,secondarysales.CODE,secondarysales.DELIVERYNO,secondarysales.MATERIALTYPE,secondarysales.MOVEDATE,secondarysales.CUSTOMERNAME,secondarysales.PACKINGTYPE,secondarysales.REMAININGQTY,secondarysales.RETAILERCODE,secondarysales.RETAILERNAME,secondarysales.PLANTNAME,secondarysales.SALESOFFICEID  
                                        FROM secondarysales
                                        where 1=1  AND ID=? AND ISDELTED=0 
                                        ORDER BY secondarysales.ID
                                        " />
				<entry key="SELECT_ALL_Secondarysales"
					value="SELECT secondarysales.ID,secondarysales.CREATEDATE,secondarysales.CREATOR,secondarysales.ENTITY_UID,
											 secondarysales.MODIFIER,secondarysales.UPDATEDATE,secondarysales.OPTLOCK,secondarysales.ACTUALQTY,
											 secondarysales.ASSIGNEDQTY,secondarysales.CITY,secondarysales.CODE,secondarysales.DELIVERYNO,
											 secondarysales.MATERIALTYPE,secondarysales.MOVEDATE,secondarysales.CUSTOMERNAME,
											 secondarysales.PACKINGTYPE,secondarysales.REMAININGQTY,secondarysales.RETAILERCODE,
											 secondarysales.RETAILERNAME,secondarysales.PLANTNAME,secondarysales.SALESOFFICEID  
                                        	FROM secondarysales WHERE ISDELETED=0
                                        	ORDER BY secondarysales.ID  
                                        " />
				<entry key="INSERT_Secondarysales"
					value="INSERT INTO secondarysales (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,ACTUALQTY,ASSIGNEDQTY,CITY,CODE,DELIVERYNO,MATERIALTYPE,MOVEDATE,CUSTOMERNAME,PACKINGTYPE,REMAININGQTY,RETAILERCODE,RETAILERNAME,PLANTNAME,SALESOFFICEID)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                        " />
				<entry key="DELETE_Secondarysales_BY_ID"
					value="DELETE from secondarysales where ID= ?  " />
				<entry key="UPDATE_Secondarysales_BY_ID"
					value="UPDATE secondarysales SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, 
												OPTLOCK = ?, ACTUALQTY = ?, ASSIGNEDQTY = ?, CITY = ?, CODE = ?, DELIVERYNO = ?, MATERIALTYPE = ?, 
												MOVEDATE = ?, CUSTOMERNAME = ?, PACKINGTYPE = ?, REMAININGQTY = ?, RETAILERCODE = ?, RETAILERNAME = ?,
												PLANTNAME = ?, SALESOFFICEID = ?,ISDELETED=?
                                        		WHERE ID=?
                                        " />
				<entry key="SELECT_Secondarysales_BY_ID"
					value=" SELECT secondarysales.ID,secondarysales.CREATEDATE,secondarysales.CREATOR,secondarysales.ENTITY_UID,secondarysales.MODIFIER,secondarysales.UPDATEDATE,secondarysales.OPTLOCK,secondarysales.ACTUALQTY,secondarysales.ASSIGNEDQTY,secondarysales.CITY,secondarysales.CODE,secondarysales.DELIVERYNO,secondarysales.MATERIALTYPE,secondarysales.MOVEDATE,secondarysales.CUSTOMERNAME,secondarysales.PACKINGTYPE,secondarysales.REMAININGQTY,secondarysales.RETAILERCODE,secondarysales.RETAILERNAME,secondarysales.PLANTNAME,secondarysales.SALESOFFICEID  
                                        FROM secondarysales
                                        where secondarysales.ID= ? and secondarysales.ISDELETED=0
                                        ORDER BY secondarysales.ID  
                                        " />
				<entry key="SELECT_SECONDARY_SALES_BY_DELIVERYNUMBER"
					value=" SELECT s.ID,s.CREATEDATE,s.CREATOR,s.ENTITY_UID,s.MODIFIER,s.UPDATEDATE,
															  s.OPTLOCK,s.ACTUALQTY,s.ASSIGNEDQTY,s.CITY,s.CODE,s.DELIVERYNO,s.MATERIALTYPE,
															  s.MOVEDATE,s.CUSTOMERNAME,s.PACKINGTYPE,s.REMAININGQTY,s.RETAILERCODE,s.RETAILERNAME,
															  s.PLANTNAME,s.SALESOFFICEID FROM SECONDARYSALES s where s.DELIVERYNO= ?
															  AND s.ISDELETED=0 ORDER BY s.ID asc" />

				<entry key="SELECT_SECONDARY_SALES_BY_DELIVERYNUMBER_AND_CODE"
					value=" SELECT s.ID,s.CREATEDATE,s.CREATOR,s.ENTITY_UID,s.MODIFIER,s.UPDATEDATE,
															  s.OPTLOCK,s.ACTUALQTY,s.ASSIGNEDQTY,s.CITY,s.CODE,s.DELIVERYNO,s.MATERIALTYPE,
															  s.MOVEDATE,s.CUSTOMERNAME,s.PACKINGTYPE,s.REMAININGQTY,s.RETAILERCODE,s.RETAILERNAME,
															  s.PLANTNAME,s.SALESOFFICEID FROM SECONDARYSALES s where s.DELIVERYNO= ? 
															  and s.CODE = ? AND s.ISDELETED=0 ORDER BY s.ID asc" />
				<entry key="GET_ALL_SECONDARY_SALES_BY_CUSTOMER_CODE"
					value=" SELECT s.ID,s.CREATEDATE,s.CREATOR,s.ENTITY_UID,s.MODIFIER,s.UPDATEDATE,
															  s.OPTLOCK,s.ACTUALQTY,s.ASSIGNEDQTY,s.CITY,s.CODE,s.DELIVERYNO,s.MATERIALTYPE,
															  s.MOVEDATE,s.CUSTOMERNAME,s.PACKINGTYPE,s.REMAININGQTY,s.RETAILERCODE,s.RETAILERNAME,
															  s.PLANTNAME,s.SALESOFFICEID FROM SECONDARYSALES s where s.CODE = ?
															  AND s.ISDELETED=0 ORDER BY s.ID asc" />

				<entry key="SELECT_SECONDARY_SALES_COUNT_BY_DELIVERYNUMBER"
					value=" SELECT count(*) FROM SECONDARYSALES s where s.DELIVERYNO= ? AND s.ISDELETED = 0" />


				<entry key="INSERT_Secondarysales"
					value="INSERT INTO SECONDARYSALES (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,ACTUALQTY,
																	  ASSIGNEDQTY,CITY,CODE,DELIVERYNO,MATERIALTYPE,MOVEDATE,CUSTOMERNAME,PACKINGTYPE
																	  ,REMAININGQTY,RETAILERCODE,RETAILERNAME,PLANTNAME,SALESOFFICEID)VALUES(?, ?, ?, ?
																	  , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)" />

				<!--// Queries For Proofdispatch -->
				<entry key="SEARCH_Proofdispatch"
					value="SELECT proofdispatch.ID,proofdispatch.CREATEDATE,proofdispatch.CREATOR,proofdispatch.ENTITY_UID,proofdispatch.MODIFIER,proofdispatch.UPDATEDATE,proofdispatch.OPTLOCK,proofdispatch.DELIVERYNO,proofdispatch.RECEIVEDDATE,proofdispatch.RECEIVEDTIME,proofdispatch.RECIEVEDQTY,proofdispatch.REMARKS
                                        FROM proofdispatch 
                                        where 1=1  AND ID=?  
                                        ORDER BY proofdispatch.ID 
                                        " />
				<entry key="SELECT_ALL_Proofdispatch"
					value="SELECT proofdispatch.ID,proofdispatch.CREATEDATE,proofdispatch.CREATOR,proofdispatch.ENTITY_UID,proofdispatch.MODIFIER,proofdispatch.UPDATEDATE,proofdispatch.OPTLOCK,proofdispatch.DELIVERYNO,proofdispatch.RECEIVEDDATE,proofdispatch.RECEIVEDTIME,proofdispatch.RECIEVEDQTY,proofdispatch.REMARKS
                                        FROM proofdispatch 
                                        ORDER BY proofdispatch.ID
                                        " />
				<entry key="INSERT_Proofdispatch"
					value="INSERT INTO PROOFDISPATCH (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,DELIVERYNO,RECEIVEDDATE,RECEIVEDTIME,RECIEVEDQTY,REMARKS)
                                         VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
                                        " />
				<entry key="DELETE_Proofdispatch_BY_ID"
					value="DELETE from proofdispatch where ID= ?  " />
				<entry key="UPDATE_Proofdispatch_BY_ID"
					value="UPDATE proofdispatch SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, DELIVERYNO = ?, RECEIVEDDATE = ?, RECEIVEDTIME = ?, RECIEVEDQTY = ?, REMARKS = ? 
                                        WHERE ID=? 
                                        " />
				<entry key="SELECT_PROOFDISPATCH_BY_DELIVERYNO"
					value=" SELECT p.ID,p.CREATEDATE,p.CREATOR,p.ENTITY_UID,p.MODIFIER,p.UPDATEDATE,p.OPTLOCK,p.DELIVERYNO,
												p.RECEIVEDDATE,p.RECEIVEDTIME,p.RECIEVEDQTY,p.REMARKS FROM PROOFDISPATCH p where p.DELIVERYNO= ?" />
				<entry key="SELECT_PROOFDISPATCH_COUNT_BY_DELIVERYNO"
					value=" SELECT count(p.DELIVERYNO) FROM PROOFDISPATCH p where p.DELIVERYNO= ?" />
				<!-- Queries For Materialpacking (deepaks26) -->
				<entry key="SELECT_MATERIALPACKING_BY_MATERIALID"
					value=" SELECT m.ID,m.CREATEDATE,m.CREATOR,m.ENTITY_UID,m.MODIFIER,m.UPDATEDATE,
														  m.OPTLOCK,m.MATERIALCODE,m.PACKINGTYPE,m.MATERIALTYPE FROM MATERIALPACKING m
                                        					where m.MATERIALCODE= ? " />
				<entry key="SELECT_MATERIALPACKING_COUNT_BY_MATERIALID"
					value=" SELECT count(*) FROM MATERIALPACKING m
                        					where m.MATERIALCODE= ? " />



				<!-- Queries for Vendor Management -->
				<entry key="SEARCH_Vendor1"
					value="SELECT vendor.ID,vendor.CREATEDATE,vendor.CREATOR,vendor.ENTITY_UID,vendor.MODIFIER,vendor.UPDATEDATE,vendor.OPTLOCK,vendor.ACCESSKEY,vendor.ACCESSPORTAL,vendor.CODE,vendor.NAME,vendor.MAINCONTACTID,vendor.PLANTID,vendor.VENDORGROUPID, contactLkd.mobile as contactNumber, plantLkd.name as plantName
										FROM vendor
										INNER Join contact contactLkd ON contactLkd.ID =vendor.MAINCONTACTID
										INNER Join plant plantLkd ON plantLkd.ID =vendor.PLANTID
										where 1=1 AND  vendor.CODE like ? AND vendor.NAME like ? AND vendor.ISDELETED=0
										ORDER BY vendor.ID
                                        " />


				<entry key="SELECT_ALL_Vendor"
					value="SELECT vendor.ID,vendor.CREATEDATE,vendor.CREATOR,vendor.ENTITY_UID,vendor.MODIFIER,vendor.UPDATEDATE,vendor.OPTLOCK,vendor.ACCESSKEY,vendor.ACCESSPORTAL,vendor.CODE,vendor.NAME,vendor.MAINCONTACTID,vendor.PLANTID,vendor.VENDORGROUPID, contactLkd.mobile as contactNumber, plantLkd.name as plantName 
                                        FROM vendor
                                        INNER Join contact contactLkd ON contactLkd.ID =vendor.MAINCONTACTID
                                        INNER Join plant plantLkd ON plantLkd.ID =vendor.PLANTID 
                                        where 1=1 and vendor.ISDELETED=0
                                        ORDER BY vendor.ID
                                        " />
				<entry key="INSERT_Vendor"
					value="INSERT INTO vendor (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,ACCESSKEY,ACCESSPORTAL,CODE,NAME,MAINCONTACTID,PLANTID,VENDORGROUPID)
                                         VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
                                         " />

				<entry key="DELETE_Vendor_BY_ID"
					value="DELETE from vendor where ID= ?" />

				<entry key="UPDATE_Vendor_BY_ID"
					value="UPDATE vendor SET CREATEDATE = ?, CREATOR = ?, ENTITY_UID = ?, MODIFIER = ?, UPDATEDATE = ?, OPTLOCK = ?, ACCESSKEY = ?, ACCESSPORTAL = ?, CODE = ?, NAME = ?, MAINCONTACTID = ?, PLANTID = ? , VENDORGROUPID = ?
                                        WHERE ID=? 
                                        " />
				<entry key="SELECT_Vendor_BY_Name"
					value=" SELECT vendor.ID,vendor.CREATEDATE,vendor.CREATOR,vendor.ENTITY_UID,vendor.MODIFIER,vendor.UPDATEDATE,vendor.OPTLOCK,vendor.ACCESSKEY,vendor.ACCESSPORTAL,vendor.CODE,vendor.NAME,vendor.MAINCONTACTID,vendor.PLANTID,vendor.VENDORGROUPID, contactLkd.mobile as contactNumber, plantLkd.name as plantName 
                                        FROM vendor
                                        INNER Join contact contactLkd ON contactLkd.ID =vendor.MAINCONTACTID
                                        INNER Join plant plantLkd ON plantLkd.ID =vendor.PLANTID 
                                        where vendor.NAME= ? and vendor.ISDELETED=0
                                        ORDER BY vendor.ID
                                        " />
				<entry key="SELECT_Vendor_BY_CODE"
					value=" SELECT vendor.ID,vendor.CREATEDATE,vendor.CREATOR,vendor.ENTITY_UID,vendor.MODIFIER,vendor.UPDATEDATE,vendor.OPTLOCK,vendor.ACCESSKEY,vendor.ACCESSPORTAL,vendor.CODE,vendor.NAME,vendor.MAINCONTACTID,vendor.PLANTID,vendor.VENDORGROUPID, contactLkd.mobile as contactNumber, plantLkd.name as plantName 
                                        FROM vendor
                                        INNER Join contact contactLkd ON contactLkd.ID =vendor.MAINCONTACTID
                                        INNER Join plant plantLkd ON plantLkd.ID =vendor.PLANTID
                                        where vendor.CODE= ? and vendor.ISDELETED=0
                                        ORDER BY vendor.ID
                                        " />
				<entry key="SELECT_Vendor_BY_ID"
					value=" SELECT vendor.ID,vendor.CREATEDATE,vendor.CREATOR,vendor.ENTITY_UID,vendor.MODIFIER,vendor.UPDATEDATE,vendor.OPTLOCK,vendor.ACCESSKEY,vendor.ACCESSPORTAL,vendor.CODE,vendor.NAME,vendor.MAINCONTACTID,vendor.PLANTID,vendor.VENDORGROUPID, contactLkd.mobile as contactNumber, plantLkd.name as plantName 
                                        FROM vendor
                                        INNER Join contact contactLkd ON contactLkd.ID =vendor.MAINCONTACTID
                                        INNER Join plant plantLkd ON plantLkd.ID =vendor.PLANTID 
                                        where vendor.ID= ? and vendor.ISDELETED=0
                                        ORDER BY vendor.ID
                                        " />
				<entry key="SELECT_ALL_Contacts"
					value="SELECT *  
                                        FROM contact 
                                        where contact.ISDELETED=0 and contact.ID not IN (SELECT vendor.MAINCONTACTID from vendor)
                                        " />

				<entry key="SELECT_ALL_Plants"
					value="SELECT *  
                                        FROM plant 
                                        " />

				<entry key="SELECT_ALL_VendorDetails_ByVendorId"
					value="SELECT vendor.ID,vendor.CREATEDATE,vendor.CREATOR,vendor.ENTITY_UID,vendor.MODIFIER,vendor.UPDATEDATE,vendor.OPTLOCK,vendor.ACCESSKEY,vendor.ACCESSPORTAL,vendor.CODE,vendor.NAME,vendor.MAINCONTACTID,vendor.PLANTID,vendor.VENDORGROUPID, contactLkd.name as contactName, plantLkd.name as plantName 
                                        FROM vendor
                                        INNER Join contact contactLkd ON contactLkd.ID =vendor.MAINCONTACTID
                                        INNER Join plant plantLkd ON plantLkd.ID =vendor.PLANTID
										WHERE vendor.ID= ? and vendor.ISDELETED=0
									" />
				<!-- Edit Employee sales Office -->
				<entry key="SEARCH_Employee_SalaesOffice_serach"
					value="Select e.EMPLOYEECODE as code, u.givenName as name,e.SALESOFFICEID as primarySalesOffice,  
										u.loginId as loginId, u.DateOfBirth, 
										c.EMAIL as emailId, c.MOBILE as mobileNumber, so.NAME as salesOfficeName, so.CODE as salesOfficeCode,
										su.NAME as salesUnitName, su.CODE as salesUnitCode ,su.ID as salesUnitId
									from [EMPLOYEE] e
									INNER Join [USER] u ON e.ID = u.user_id
									Inner join [SALESOFFICE] so ON so.ID = e.SALESOFFICEID
									INNER Join [SALESUNIT] su ON su.ID = so.SALESUNITID
									Left Join  [CONTACT] c on c.ID = u.mainContactId
									where e.ISDELETED = 0 and e.EMPLOYEECODE like ? and u.givenName like ? 
										  and u.loginId like ? and c.EMAIL Like ? and e.SALESOFFICEID Like ? and so.SALESUNITID like ?  
                                    Order By EMPLOYEECODE
                                        " />
				<entry key="SELECT_ALL_SALES_OFFICE"
					value="Select so.ID, so.CREATEDATE, so.CREATOR, so.ENTITY_UID, so.MODIFIER, so.UPDATEDATE, so.NAME, so.SALESUNITID
											from salesOffice so
											Inner join salesunit su ON su.ID = so.SALESUNITID
											Inner join salesregion sr ON sr.ID = su.SALESREGIONID
											Inner join enterprise e ON e.ID = sr.ENTERPRISEID
											Inner join company c ON c.ID = e.COMPANYID
											where c.ID=?
                                        " />
				<entry key="SELECT_mapped_salesoffice_by_employee_id"
					value="select * from SALESOFFICE where id in (select salesoffice_id from emp_salesoffice where emp_Id=?) " />
				<entry key="SELECT_unmapped_salesoffice_by_employee_id"
					value="select so.ID, so.CREATEDATE, so.CREATOR, so.MODIFIER, so.UPDATEDATE, so.SALESUNITID, so.CODE, so.NAME 
														from SALESOFFICE  so
														Inner join salesunit su ON su.ID = so.SALESUNITID
														Inner join salesregion sr ON sr.ID = su.SALESREGIONID
														Inner join enterprise e ON e.ID = sr.ENTERPRISEID
														Inner join company c ON c.ID = e.COMPANYID
														where so.ID not in (select salesoffice_id from emp_salesoffice where emp_Id=?) and c.ID=?
										" />
				<entry key="SELECT_emp_salesoffice_by_employee_id"
					value="select emp_id as empId, salesoffice_id as salesOfficeId from emp_salesoffice where emp_id=?                                        
                                        " />
				<entry key="INSERT_emp_salesOffice"
					value="INSERT INTO emp_salesoffice (emp_id, salesoffice_id)VALUES(?, ?)
                                        " />

				<entry key="DELETE_emp_salesOffice"
					value="DELETE from emp_salesoffice where emp_salesoffice.emp_id= ?  and emp_salesoffice.salesoffice_id=? " />


				<!-- Bank Details -->
				<entry key="SELECT_ALL_BankDetails"
					value="SELECT bankdetails.ID, bankdetails.BANKNAME, bankdetails.BANKURL, bankdetails.COMPANYCODE
														FROM bankdetails 
														ORDER BY bankdetails.ID  
														" />
				<entry key="SELECT_CMS_ActualVsTargetData"
					value="SELECT  CUSTOMER_CODE as companyCode, 
											year, DATENAME(month, CONCAT([Year],'-', [Month],'-','1')) as month,
											Concat([Year],'-', DATENAME(month, CONCAT([Year],'-', [Month],'-','1'))) as YearMonth,
											SUM(TRGT_SLS) as TRGTSLS, SUM(ACTL_SLS) ACTLSLS, SUM(TRGT_SLS_VAL ) as TRGTSLSVAL, SUM(ACTL_SLS_VAL) as ACTLSLSVAL 
											FROM CRM_MONTHLY_SALES cms
											Inner Join CUSTOMER  c ON c.CODE = cms.CUSTOMER_CODE
											Where c.ID = ?
											GROUP BY CUSTOMER_CODE, [Year],[Month]
											Order by CONVERT ( datetime , CONCAT([Year],'-', [Month],'-','1'), 102 )  
									  " />
				<entry key="SELECT_ALL_SalesDocumentType"
					value="Select od.CODE as Value, od.NAME as Label from ORDERDOCUMENTTYPE od 
 												 inner join ENTERPRISE e on od.enterpriseId=e.ID inner join COMPANY c
 												  on c.ID=e.COMPANYID where c.ID=? Order By od.CODE" />

				<entry key="INSERT_Plant"
					value="INSERT INTO PLANT (ID, CREATEDATE, CREATOR, ENTITY_UID, MODIFIER, UPDATEDATE, OPTLOCK, CODE, NAME, ENTERPRISEID)
				 							VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) " />
				<entry key="GetTableFromSystem"
					value="SELECT t.name as tableName FROM sys.tables AS t WHERE t.name = ? OR t.name = ?" />



				<!-- Lookup queries -->

				<entry
					key="SELECT_Lookup_Details_from_Master_Name_For_LabelValue"
					value="select ld.lookupd_id as value, ld.lookup_value as label from lookup_details ld 
															inner join lookup_master lm on ld.lookup_id=lm.lookup_id where lm.lookup_name = ?
														" />

				<entry key="SELECT_lookup_details_BY_DId"
					value="select lookup_details.lookupd_id
                                        from lookup_details
                                        where lookup_details.lookup_value=?  
                                        " />
				<entry key="COUNT_lookup_details_BY_DId"
					value="select count(*) from lookup_details where lookup_details.lookup_value=?  
                                        " />
				<entry key="Get_Plant_By_Code"
					value="select * from PLANT Where code = ? " />

				<entry key="Get_CustomerUser_For_Profile"
					value="Select u.givenName, u.MiddleName, u.FamilyName, u.loginId as loginId,
													u.mainContactId as ContactId, u.last_login_time as lastLoginTime,
													u.gender, cu.USERFUNCTION,cu.married as maritalStatus ,cu.POSITION, cu.SPOUSEID, cu.WEDDINGANNIVERSARY, co.landline as phone,
													co.MOBILE as mobile,co.EMAIL as email,c.ISDELETED, u.DateOfBirth,
													a.FLOOR, a.HOUSENUMBER, a.STREETNAME, a.STREETSIDE, u.user_id as userId, r.GIVEN as SpouseGivenName,
													a.ID as addressId, l.id as LocationId, i.imagePath,	 
													l.CITY, l.STATEPROV as state, l.COUNTRY, l.POSTALCODE, ul.LASTLOGINFAILURE as lastLoginTime
												From CUSTOMERUSER cu 
												Inner Join CUSTOMER c On cu.CUSTOMERID = c.ID
												INNER JOIN [USER] u ON u.user_id = cu.ID
												LEFT JOIN USERLOGINDETAILS ul on ul.USER_ID = u.user_id
												LEFT JOIN IGIMAGE i ON i.id = u.imageId
												LEFT Join CONTACT co On co.ID = u.MAINCONTACTID
												LEFT Join ADDRESS a on a.ID = co.ADDRESSID
												LEFT Join LOCATION l ON l.ID = a.LOCATIONID 
												LEFT Join RELATION r On r.ID = cu.SPOUSEID
												Where c.ISDELETED = 0 and cu.ID = ?
										" />

				<!-- enterprise -->
				<entry key="FIND_ENTERPRISE_BY_CUSTOMER_ID"
					value="select e.ID,e.CREATEDATE,e.CREATOR,e.ENTITY_UID,e.MODIFIER,e.UPDATEDATE,e.OPTLOCK
      ,e.CODE,e.CONTROLLINGAREA,e.COUNTRY,e.COUNTRYISO,e.COMPANYID,e.ISDELETED from ENTERPRISE e inner join  CUSTOMERGROUP cg
      on e.ID  = cg.ENTERPRISEID inner join CUSTOMER c on c.CUSTOMERGROUPID = cg.id where c.id = ? and e.ISDELETED=0" />


				<entry key="FIND_CONTROLLING_AREA_BY_CUSTOMER_ID"
					value="select e.CONTROLLINGAREA from ENTERPRISE e inner join  CUSTOMERGROUP cg
on e.ID  = cg.ENTERPRISEID inner join CUSTOMER c on c.CUSTOMERGROUPID = cg.id where c.id = ? and e.ISDELETED=0" />


				<!--// Queries For Invoice -->
				<!-- <entry key="SEARCH_Invoice" value="SELECT INVOICE.ID,INVOICE.BILLINGDOC,INVOICE.BILL_TYPE,INVOICE.BILL_TYPE_TEXT,INVOICE.BILLCATEG,INVOICE.BILLCATEG_TEXT,INVOICE.SD_DOC_CAT,INVOICE.SD_DOC_CAT_TEXT,INVOICE.CURRENCY,INVOICE.CURRENCY_ISO,INVOICE.NET_VALUE,INVOICE.SOLD_TO,INVOICE.PAYER,INVOICE.TAX_AMOUNT,INVOICE.CANCELLED,INVOICE.BILL_DATE,INVOICE.INCOTERMS1,INVOICE.INCOTERMS1_TEXT,INVOICE.INCOTERMS2,INVOICE.PMNTTRMS,INVOICE.PMNTTRMS_TEXT,INVOICE.COMP_CODE,INVOICE.COMP_NAME,INVOICE.REFERENCE,INVOICE.BLINE_DATE,INVOICE.DSCT_DATE1,INVOICE.DSCT_DATE2,INVOICE.NET_DATE,INVOICE.DSCT_PCT1,INVOICE.DSCT_PCT2,INVOICE.QNTY,INVOICE.GROSS_VAL,INVOICE.CUST_PO,INVOICE.VBELV,INVOICE.KIDNO 
					FROM INVOICE where 1=1 AND ID=? ORDER BY INVOICE.ID "/> -->
				<entry key="SEARCH_Invoice"
					value="select INVOICE.ID,INVOICE.BILLINGDOC,INVOICE.BILL_TYPE,INVOICE.BILL_TYPE_TEXT,
									INVOICE.BILLCATEG,INVOICE.BILLCATEG_TEXT,INVOICE.SD_DOC_CAT,INVOICE.SD_DOC_CAT_TEXT,
									INVOICE.CURRENCY,INVOICE.CURRENCY_ISO,INVOICE.NET_VALUE,INVOICE.SOLD_TO,INVOICE.PAYER,
									INVOICE.TAX_AMOUNT,INVOICE.CANCELLED,INVOICE.BILL_DATE,INVOICE.INCOTERMS1,
									INVOICE.INCOTERMS1_TEXT,INVOICE.INCOTERMS2,INVOICE.PMNTTRMS,INVOICE.PMNTTRMS_TEXT,
									INVOICE.COMP_CODE,INVOICE.COMP_NAME,INVOICE.REFERENCE,INVOICE.BLINE_DATE,
									INVOICE.DSCT_DATE1,INVOICE.DSCT_DATE2,INVOICE.NET_DATE,INVOICE.DSCT_PCT1,
									INVOICE.DSCT_PCT2,INVOICE.QNTY,INVOICE.GROSS_VAL,INVOICE.CUST_PO,INVOICE.VBELV,
									INVOICE.KIDNO, INVOICE.SHIPTOPARTYCODE, INVOICE.CGST_RATE, INVOICE.CGST_VAL,
									INVOICE.SGST_RATE,INVOICE.SGST_VAL,INVOICE.IGST_RATE,INVOICE.IGST_VAL,
									INVOICE.DELIVERYDOC,INVOICE.TRUCKNO,INVOICE.MATDESC as materialDesc
									from INVOICE 
									LEFT JOIN CUSTOMER c ON c.code=INVOICE.SOLD_TO
									where   
									(INVOICE.BILLINGDOC like ?)
									and (INVOICE.BILL_DATE between ? and ?)
									and (invoice.SOLD_TO = ?)
									and (INVOICE.KIDNO like ?)
									and INVOICE.SHIPTOPARTYCODE like ?
									ORDER BY INVOICE.BILL_DATE desc
                                    " />
				<entry key="SELECT_ALL_Invoice"
					value="SELECT INVOICE.ID,INVOICE.BILLINGDOC,INVOICE.BILL_TYPE,INVOICE.BILL_TYPE_TEXT,INVOICE.BILLCATEG,INVOICE.BILLCATEG_TEXT,INVOICE.SD_DOC_CAT,INVOICE.SD_DOC_CAT_TEXT,INVOICE.CURRENCY,INVOICE.CURRENCY_ISO,INVOICE.NET_VALUE,INVOICE.SOLD_TO,INVOICE.PAYER,INVOICE.TAX_AMOUNT,INVOICE.CANCELLED,INVOICE.BILL_DATE,INVOICE.INCOTERMS1,INVOICE.INCOTERMS1_TEXT,INVOICE.INCOTERMS2,INVOICE.PMNTTRMS,INVOICE.PMNTTRMS_TEXT,INVOICE.COMP_CODE,INVOICE.COMP_NAME,INVOICE.REFERENCE,INVOICE.BLINE_DATE,INVOICE.DSCT_DATE1,INVOICE.DSCT_DATE2,INVOICE.NET_DATE,INVOICE.DSCT_PCT1,INVOICE.DSCT_PCT2,INVOICE.QNTY,INVOICE.GROSS_VAL,INVOICE.CUST_PO,INVOICE.VBELV,INVOICE.KIDNO
                                        FROM INVOICE 
                                        ORDER BY INVOICE.ID
                                        " />
				<entry key="INSERT_Invoice"
					value="INSERT INTO INVOICE (BILLINGDOC,BILL_TYPE,BILL_TYPE_TEXT,BILLCATEG,BILLCATEG_TEXT,SD_DOC_CAT,SD_DOC_CAT_TEXT,CURRENCY,CURRENCY_ISO,NET_VALUE,SOLD_TO,PAYER,TAX_AMOUNT,CANCELLED,BILL_DATE,INCOTERMS1,INCOTERMS1_TEXT,INCOTERMS2,PMNTTRMS,PMNTTRMS_TEXT,COMP_CODE,COMP_NAME,REFERENCE,BLINE_DATE,DSCT_DATE1,DSCT_DATE2,NET_DATE,DSCT_PCT1,DSCT_PCT2,QNTY,GROSS_VAL,CUST_PO,VBELV,KIDNO,shiptopartycode)
                                         VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?) 
                                        " />
				<entry key="DELETE_Invoice_BY_ID"
					value="DELETE from INVOICE where ID= ?  " />
				<entry key="UPDATE_Invoice_BY_ID"
					value="UPDATE INVOICE SET CANCELLED = ?  
                                        WHERE ID=? 
                                        " />
				<entry key="SELECT_Invoice_BY_ID"
					value=" SELECT INVOICE.ID,INVOICE.BILLINGDOC,INVOICE.BILL_TYPE,INVOICE.BILL_TYPE_TEXT,INVOICE.BILLCATEG,INVOICE.BILLCATEG_TEXT,INVOICE.SD_DOC_CAT,INVOICE.SD_DOC_CAT_TEXT,INVOICE.CURRENCY,INVOICE.CURRENCY_ISO,INVOICE.NET_VALUE,INVOICE.SOLD_TO,INVOICE.PAYER,INVOICE.TAX_AMOUNT,INVOICE.CANCELLED,INVOICE.BILL_DATE,INVOICE.INCOTERMS1,INVOICE.INCOTERMS1_TEXT,INVOICE.INCOTERMS2,INVOICE.PMNTTRMS,INVOICE.PMNTTRMS_TEXT,INVOICE.COMP_CODE,INVOICE.COMP_NAME,INVOICE.REFERENCE,INVOICE.BLINE_DATE,INVOICE.DSCT_DATE1,INVOICE.DSCT_DATE2,INVOICE.NET_DATE,INVOICE.DSCT_PCT1,INVOICE.DSCT_PCT2,INVOICE.QNTY,INVOICE.GROSS_VAL,INVOICE.CUST_PO,INVOICE.VBELV,INVOICE.KIDNO
                                        FROM INVOICE 
                                        where INVOICE.ID= ? 
                                        ORDER BY INVOICE.ID
                                        " />

				<entry key="Inesrt_IGImage"
					value=" INSERT INTO IGIMAGE (ID, CREATEDATE, CREATOR, ENTITY_UID, MODIFIER, UPDATEDATE, OPTLOCK, IMAGEPATH, Description,URL)
    								 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?,?) " />
				<entry key="Get_Igimage_By_ImageId"
					value=" SELECT * FROM IGIMAGE image where image.ID= ? " />
				<entry key="UPDATE_IgImage_BY_ID"
					value="UPDATE IGIMAGE SET MODIFIER = ?, UPDATEDATE = ?,DESCRIPTION = ? ,URL=?
                                        WHERE ID=? 
                                        " />

				<!-- User log in details -->

				<entry key="GET_ENTRY_COUNT_FOR_USER_ID"
					value=" SELECT count(*) FROM USERLOGINDETAILS u where u.USER_ID= ? " />
				<entry key="GET_USER_LOGIN_DETAILS_BY_USER_ID"
					value=" SELECT * FROM USERLOGINDETAILS u where u.USER_ID= ? " />
				<entry key="UPDATE_USER_LOGIN_DETAILS"
					value=" UPDATE USERLOGINDETAILS SET LASTLOGINSUCCESS = ? ,LASTLOGINFAILURE = ?,WRONGPASSWORDATTEMPTS = ?,
											ACTIVE = ?,LOCKED = ?,SOURCE = ?,PASSWORD_CHANGED = ?  where USER_ID= ? " />
				<entry key="SAVE_USER_LOGIN_DETAILS"
					value="INSERT INTO USERLOGINDETAILS (ID,USER_ID,LASTLOGINSUCCESS,LASTLOGINFAILURE,WRONGPASSWORDATTEMPTS,
											ACTIVE,LOCKED,SOURCE,PASSWORD_CHANGED) VALUES (?, ?, ?, ?, ?, ?, ?,?,?)" />

				<entry key="GET_USERPROFILE_FOR_EMPLOYEE"
					value="Select u.givenName, u.MiddleName, u.FamilyName, u.loginId as loginId,
													u.mainContactId as ContactId, u.last_login_time as lastLoginTime,
													u.gender,co.LANDLINE as phone ,co.MOBILE as mobile,co.EMAIL as email, u.DateOfBirth,
													a.FLOOR, a.HOUSENUMBER, a.STREETNAME, a.STREETSIDE, u.user_id as userId,
													a.ID as addressId, l.id as LocationId, i.imagePath,	 
													l.CITY, l.STATEPROV as state, l.COUNTRY, l.POSTALCODE, ul.LASTLOGINFAILURE as lastLoginTime
												FROM [USER] u 
												LEFT JOIN USERLOGINDETAILS ul on ul.USER_ID = u.user_id
												LEFT JOIN IGIMAGE i ON i.id = u.imageId
												LEFT Join CONTACT co On co.ID = u.MAINCONTACTID
												LEFT Join ADDRESS a on a.ID = co.ADDRESSID
												LEFT Join LOCATION l ON l.ID = a.LOCATIONID 
												Where u.user_id = ?" />

				<entry key="INSERT_CUSTOMER"
					value="INSERT INTO CUSTOMER(ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,ACCESSKEY,ACCESSPORTAL,
											            CODE,HEADQUARTER,CUSTOMERNAME,SINGLELOCATION,CUSTOMERGROUPID,MAINCONTACTID,PARENTHQID,
											            SALESAREAID,SALESGROUPID,SALESOFFICEID,SALESPROMOTER,SALESPROMOTERID,ISDIRECTPOSTING
											           ,VIRTUALACCOUNT,ISSECONDARYSALESACCESS,ISDELETED, DELCREDER, SHOWSALESDATA,ACTIVATION_DATE,DEACTIVATION_DATE,STATUSUPDATEDBY)
											     VALUES  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,? )" />
				<entry key="GET_EMAIL_ID_BY_USER_ID"
					value="select c.EMAIL from CONTACT c inner join [user] u on c.ID= u.mainContactId  where u.user_id=?" />
				<entry key="GET_EMAIL_ID_BY_CUSTOMER_ID"
					value="select c.EMAIL from CONTACT c inner join CUSTOMER cu on c.ID=cu.MAINCONTACTID where cu.id=?" />
				<entry key="GET_PHONE_NUMBER_BY_CUSTOMER_ID"
					value="select c.MOBILE from CONTACT c inner join CUSTOMER cu on c.ID=cu.MAINCONTACTID where cu.id=?" />
				<entry key="GET_PHONE_NUMBER_BY_USER_ID"
					value="select c.MOBILE from CONTACT c inner join [USER] u on c.ID=u.MAINCONTACTID where u.user_id =?" />

				<entry key="INSERT_SALESGROUP"
					value="INSERT INTO SALESGROUP (ID,CREATEDATE,CREATOR,ENTITY_UID,MODIFIER,UPDATEDATE,OPTLOCK,CODE,NAME)
     								VALUES (?,?,?,?,?,?,?,?,?)" />
				<entry key="GET_CustomerUserCount"
					value="SELECT COUNT(*) 
											FROM CUSTOMERUSER cu
											INNER JOIN CUSTOMER c ON c.ID = CU.CUSTOMERID
											WHERE c.CODE = ?  " />

				<entry key="GET_SalesPromotors"
					value="SELECT DISTINCT	customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,
											customer.UPDATEDATE,customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,
											customer.HEADQUARTER,customer.CUSTOMERNAME,customer.SINGLELOCATION,customer.CUSTOMERGROUPID,
											customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,customer.SALESGROUPID,
											customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,
											customer.VIRTUALACCOUNT,customer.ISDELETED , customergroupLkd.name as customerGroupName  ,
											contactLkd.email as email , contactLkd.mobile as mobileNumber, salesgroupLkd.name as salesGroup  ,
											salesofficeLkd.name as salesOffice ,
											salesorgLkd.name as salesOrganisation, distchannelLkd.name as distChannel, salesunitLkd.name as  salesUnit ,
											salesregionLkd.name as salesRegion, addressLkd.name as  addressName, addressLkd.streetname as streetName,
											addressLkd.streetside as streetSide, addressLkd.FLOOR as floor, addressLkd.HOUSENUMBER as houseNumber,
											locationLkd.city as  city, locationLkd.STATEPROV as  state, locationLkd.COUNTRY as  country,
											locationLkd.POSTALCODE as  postalCode,salesorgLkd.CODE as salesOrgCode, salesofficeLkd.CODE as salesOfficeCode,  salesunitLkd.CODE as salesUnitCode
									FROM customer
									LEFT JOIN customergroup customergroupLkd ON customer.CUSTOMERGROUPID = customergroupLkd.ID 
									LEFT JOIN contact contactLkd ON customer.MAINCONTACTID = contactLkd.ID 
									LEFT JOIN customer customerLkd ON customer.PARENTHQID = customerLkd.ID 
									LEFT JOIN salesarea salesareaLkd ON customer.SALESAREAID = salesareaLkd.ID 
									LEFT JOIN salesgroup salesgroupLkd ON customer.SALESGROUPID = salesgroupLkd.ID 
									LEFT JOIN salesoffice salesofficeLkd ON customer.SALESOFFICEID = salesofficeLkd.ID 
									LEFT JOIN salesorganisation salesorgLkd ON salesareaLkd.SALESORGID = salesorgLkd.ID 
									LEFT JOIN DISTRIBUTIONCHANNEL distchannelLkd ON salesareaLkd.DISTCHANNELID = distchannelLkd.ID 
									LEFT JOIN salesunit salesunitLkd ON salesofficeLkd.SALESUNITID = salesunitLkd.ID 
									LEFT JOIN salesregion salesregionLkd ON salesunitLkd.SALESREGIONID = salesregionLkd.ID
									LEFT JOIN ENTERPRISE e ON e.ID = salesregionLkd.ENTERPRISEID
									LEFT JOIN COMPANY c ON c.ID = e.COMPANYID
									LEFT JOIN address addressLkd ON contactLkd.ADDRESSID = addressLkd.ID 
									LEFT JOIN location locationLkd ON addressLkd.LOCATIONID = locationLkd.ID
									where customer.ISDELETED = 0 and customer.SALESPROMOTER = 1  " />

				<entry key="GET_CustomerOfSalesPromotorUserId"
					value="SELECT distinct customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,
															customer.UPDATEDATE,customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,
															customer.HEADQUARTER,customer.CUSTOMERNAME,customer.SINGLELOCATION,customer.CUSTOMERGROUPID,
															customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,customer.SALESGROUPID,
															customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,
															customer.VIRTUALACCOUNT,customer.ISDELETED , customergroupLkd.name as customerGroupName  ,
															contactLkd.email as email , contactLkd.mobile as mobileNumber, salesgroupLkd.name as salesGroup  ,
															salesofficeLkd.name as salesOffice , customerLkd1.customername as salesPromoterName,
															salesorgLkd.name as salesOrganisation,salesorgLkd.code as salesOrgCode, distchannelLkd.name as distChannel, salesunitLkd.name as  salesUnit ,
															salesregionLkd.name as salesRegion, addressLkd.name as  addressName, addressLkd.streetname as streetName,
															addressLkd.streetside as streetSide, addressLkd.FLOOR as floor, addressLkd.HOUSENUMBER as houseNumber,
															locationLkd.city as  city, locationLkd.STATEPROV as  state, locationLkd.COUNTRY as  country,
															locationLkd.POSTALCODE as  postalCode ,di.CODE as divisionCode, di.name as divisionName
													FROM customer
													Inner JOIN customergroup customergroupLkd ON customer.CUSTOMERGROUPID = customergroupLkd.ID 
													Inner JOIN salesarea salesareaLkd ON customer.SALESAREAID = salesareaLkd.ID 
													Inner JOIN salesgroup salesgroupLkd ON customer.SALESGROUPID = salesgroupLkd.ID 
													Inner JOIN salesoffice salesofficeLkd ON customer.SALESOFFICEID = salesofficeLkd.ID 
													Inner JOIN salesorganisation salesorgLkd ON salesareaLkd.SALESORGID = salesorgLkd.ID 
													Inner JOIN DISTRIBUTIONCHANNEL distchannelLkd ON salesareaLkd.DISTCHANNELID = distchannelLkd.ID 
													Inner JOIN salesunit salesunitLkd ON salesofficeLkd.SALESUNITID = salesunitLkd.ID 
													Inner JOIN salesregion salesregionLkd ON salesunitLkd.SALESREGIONID = salesregionLkd.ID 
													Inner Join DIVISION di ON di.id = salesareaLkd.DIVISIONID
													LEFT JOIN contact contactLkd ON customer.MAINCONTACTID = contactLkd.ID 
													LEFT JOIN customer customerLkd ON customer.PARENTHQID = customerLkd.ID 
													LEFT JOIN customer customerLkd1 ON customer.SALESPROMOTERID = customerLkd1.ID 
													LEFT JOIN customeruser customeruserLkd1 ON customer.SALESPROMOTERID = customeruserLkd1.CUSTOMERID 
													LEFT JOIN address addressLkd ON contactLkd.ADDRESSID = addressLkd.ID 
													LEFT JOIN location locationLkd ON addressLkd.LOCATIONID = locationLkd.ID
													where customer.ISDELETED = 0" />
				<entry key="GET_CustomerOfSalesPromotor"
					value="SELECT	customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,
														customer.UPDATEDATE,customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,
														customer.HEADQUARTER,customer.CUSTOMERNAME,customer.SINGLELOCATION,customer.CUSTOMERGROUPID,
														customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,customer.SALESGROUPID,
														customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,
														customer.VIRTUALACCOUNT,customer.ISDELETED , customergroupLkd.name as customerGroupName  ,
														contactLkd.email as email , contactLkd.mobile as mobileNumber, salesgroupLkd.name as salesGroup  ,
														salesofficeLkd.name as salesOffice , customerLkd1.customername as salesPromoterName,
														salesorgLkd.name as salesOrganisation, distchannelLkd.name as distChannel, salesunitLkd.name as  salesUnit ,
														salesregionLkd.name as salesRegion, addressLkd.name as  addressName, addressLkd.streetname as streetName,
														addressLkd.streetside as streetSide, addressLkd.FLOOR as floor, addressLkd.HOUSENUMBER as houseNumber,
														locationLkd.city as  city, locationLkd.STATEPROV as  state, locationLkd.COUNTRY as  country,
														locationLkd.POSTALCODE as  postalCode,salesorgLkd.CODE as salesOrgCode, salesofficeLkd.CODE as salesOfficeCode,  salesunitLkd.CODE as salesUnitCode 
												FROM customer
												LEFT JOIN customergroup customergroupLkd ON customer.CUSTOMERGROUPID = customergroupLkd.ID 
												LEFT JOIN contact contactLkd ON customer.MAINCONTACTID = contactLkd.ID 
												LEFT JOIN customer customerLkd ON customer.PARENTHQID = customerLkd.ID 
												LEFT JOIN salesarea salesareaLkd ON customer.SALESAREAID = salesareaLkd.ID 
												LEFT JOIN salesgroup salesgroupLkd ON customer.SALESGROUPID = salesgroupLkd.ID 
												LEFT JOIN salesoffice salesofficeLkd ON customer.SALESOFFICEID = salesofficeLkd.ID 
												LEFT JOIN customer customerLkd1 ON customer.SALESPROMOTERID = customerLkd1.ID 
												LEFT JOIN salesorganisation salesorgLkd ON salesareaLkd.SALESORGID = salesorgLkd.ID 
												LEFT JOIN DISTRIBUTIONCHANNEL distchannelLkd ON salesareaLkd.DISTCHANNELID = distchannelLkd.ID 
												LEFT JOIN salesunit salesunitLkd ON salesofficeLkd.SALESUNITID = salesunitLkd.ID 
												LEFT JOIN salesregion salesregionLkd ON salesunitLkd.SALESREGIONID = salesregionLkd.ID 
												LEFT JOIN address addressLkd ON contactLkd.ADDRESSID = addressLkd.ID 
												LEFT JOIN location locationLkd ON addressLkd.LOCATIONID = locationLkd.ID
												where customer.ISDELETED = 0 and (customer.SALESPROMOTER IS NULL OR customer.SALESPROMOTER = 0) AND customer.salespromoterId = ? 
												ORDER BY customer.CUSTOMERNAME  " />


				<entry key="GET_ALL_ROLE_FOR_ADMIN"
					value=" select rm.role_id as roleId,rm.role_name as roleName,rm.description as description,
											rm.created_by as createdBy,rm.created_time as createdTime,rm.updated_by as updatedBy, 
											rm.updated_time as updatedTime,rm.ISDELETED as isDeleted,rm.ENTITY_UID as entityUid,
											rm.SUPERROLE as roleTypeId,rm.COMPANYID as companyId,ld.lookup_value as roleTypes  from  
											role_master rm inner join lookup_details ld on rm.SUPERROLE = ld.lookupd_id
											where 1=1  and isDeleted = 0 and rm.role_name !='Admin' and rm.role_name !='SuperAdmin' and rm.COMPANYID = ?
                                       		ORDER BY rm.role_id" />

				<entry key="GET_ALL_ROLE_FOR_Customer"
					value="SELECT * FROM role_master rm
											  LEFT JOIN lookup_details ld ON rm.superrole = ld.lookupd_id
												WHERE lookup_value = 'Customer' AND rm.ISDELETED = 0												
                                       		  ORDER BY rm.role_id" />


				<entry key="GET_ALL_FILTERED_USER"
					value="SELECT DISTINCT  u.user_id,RM.role_id,RM.role_name,
		   CASE WHEN cu.id IS NOT NULL then  cu.ACCESSPORTAL  
		   else  u.user_status END as active,
		   CASE WHEN cu.id IS NOT NULL then  uld.LOCKED  
		   else  u.EMPLOYEELOCKED
		   END as locked,
		  CASE WHEN u.middleName IS NOT NULL AND u.FAMILYNAME IS NOT NULL THEN Concat(u.givenName,' ',u.middleName,' ', u.FamilyName)
				WHEN u.middleName IS NULL AND u.familyName IS NOT NULL THEN Concat(u.givenName,' ', u.FamilyName) 
				WHEN u.middleName IS NOT NULL AND u.familyName IS NULL THEN Concat(u.givenName,' ', u.middleName) 	
				ELSE u.givenName END as name,
		   u.loginId as userName,c.EMAIL as emailId,c.MOBILE as mobile,a.NAME as addressName,a.HOUSENUMBER houseNumber,a.FLOOR as floor,
		   a.STREETNAME as streetName,a.STREETSIDE as streetSide,l.CITY as city,l.STATEPROV as state,l.COUNTRY as country,l.POSTALCODE postalCode,
		   u.COMPANYID as companyId,
		    CASE WHEN cu.id IS NOT NULL then 
		   cu.CODE ELSE e.EMPLOYEECODE END as customerCode,CASE WHEN cu.id IS NOT NULL then cu.CUSTOMERNAME ELSE 'EMPLOYEE' END as customerName
		   FROM [user] u
		   LEFT JOIN CONTACT c ON u.maincontactid=c.id
           INNER JOIN user_role ur on u.user_id = ur.user_id
		   inner join role_master RM ON RM.role_id = ur.role_id
		   LEFT join ADDRESS a on c.ADDRESSID = a.ID
		   LEFT join location l on a.LOCATIONID = l.ID 
		   left join CUSTOMERUSER csu on csu.ID = u.user_id
		   left join CUSTOMER cu on cu.ID = csu.CUSTOMERID
		   left join EMPLOYEE e on e.ID= u.user_id
		   LEFT JOIN USERLOGINDETAILS uld on uld.USER_ID = u.user_id
		   left join CUSTOMER_REP_GROUP_MAPPING crgm on crgm.CUSTOMER_ID=cu.ID
	 	 left join CREDIT_REP_GROUP crg on crg.id=crgm.CREDIT_REP_GROUP_ID
	 	 Inner JOIN salesarea salesareaLkd ON cu.SALESAREAID = salesareaLkd.ID 
Inner JOIN salesorganisation salesorgLkd ON salesareaLkd.SALESORGID = salesorgLkd.ID 
	 	 
	 
		   where u.ISDELETED = 0" />
				<entry key="GET_ALL_FILTERED_USER_EMPLOYEE"
					value="SELECT DISTINCT  u.user_id,RM.role_id,RM.role_name,
		   CASE WHEN cu.id IS NOT NULL then  cu.ACCESSPORTAL  
		   else  u.user_status END as active,
		   CASE WHEN cu.id IS NOT NULL then  uld.LOCKED  
		   else  u.EMPLOYEELOCKED
		   END as locked,
		  CASE WHEN u.middleName IS NOT NULL AND u.FAMILYNAME IS NOT NULL THEN Concat(u.givenName,' ',u.middleName,' ', u.FamilyName)
				WHEN u.middleName IS NULL AND u.familyName IS NOT NULL THEN Concat(u.givenName,' ', u.FamilyName) 
				WHEN u.middleName IS NOT NULL AND u.familyName IS NULL THEN Concat(u.givenName,' ', u.middleName) 	
				ELSE u.givenName END as name,
		   u.loginId as userName,c.EMAIL as emailId,c.MOBILE as mobile,a.NAME as addressName,a.HOUSENUMBER houseNumber,a.FLOOR as floor,
		   a.STREETNAME as streetName,a.STREETSIDE as streetSide,l.CITY as city,l.STATEPROV as state,l.COUNTRY as country,l.POSTALCODE postalCode,
		   u.COMPANYID as companyId,
		    CASE WHEN cu.id IS NOT NULL then 
		   cu.CODE ELSE e.EMPLOYEECODE END as customerCode,CASE WHEN cu.id IS NOT NULL then cu.CUSTOMERNAME ELSE 'EMPLOYEE' END as customerName
		   FROM [user] u
		   LEFT JOIN CONTACT c ON u.maincontactid=c.id
           INNER JOIN user_role ur on u.user_id = ur.user_id
		   inner join role_master RM ON RM.role_id = ur.role_id
		   LEFT join ADDRESS a on c.ADDRESSID = a.ID
		   LEFT join location l on a.LOCATIONID = l.ID 
		   left join CUSTOMERUSER csu on csu.ID = u.user_id
		   left join CUSTOMER cu on cu.ID = csu.CUSTOMERID
		   left join EMPLOYEE e on e.ID= u.user_id
		   LEFT JOIN USERLOGINDETAILS uld on uld.USER_ID = u.user_id
 where u.ISDELETED = 0" />
				<!-- INNER Join EMP_SALESOFFICE es ON es.SALESOFFICE_ID = customer.SALESOFFICEID -->
				<entry key="GET_ALL_FILTERED_CUSTOMER_BY_EMOPLOYEE_ID"
					value="SELECT distinct customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,customer.UPDATEDATE,
														customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,customer.HEADQUARTER,customer.CUSTOMERNAME,
														customer.SINGLELOCATION,customer.CUSTOMERGROUPID,customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,
														customer.SALESGROUPID,customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,
														customer.VIRTUALACCOUNT,customer.ISDELETED , customergroupLkd.name as customerGroupName  , contactLkd.email as email ,
														contactLkd.mobile as mobileNumber, salesgroupLkd.name as salesGroup  , salesofficeLkd.name as salesOffice ,
														customerLkd1.customername as salesPromoterName, salesorgLkd.name as salesOrganisation, salesorgLkd.code as salesOrgCode, distchannelLkd.name as distChannel,
														salesunitLkd.name as  salesUnit , salesregionLkd.name as salesRegion, addressLkd.name as  addressName,
														addressLkd.streetname as streetName, addressLkd.streetside as streetSide, addressLkd.FLOOR as floor,
														addressLkd.HOUSENUMBER as houseNumber, locationLkd.city as  city, locationLkd.STATEPROV as  state,
														locationLkd.COUNTRY as  country, locationLkd.POSTALCODE as  postalCode ,di.CODE as divisionCode, di.name as divisionName
													FROM customer
													inner join CUSTOMER_REP_GROUP_MAPPING crgm on crgm.CUSTOMER_id=customer.id
													inner join EMP_CRD_REP_GRP_MPG ergm on ergm.CREDIT_REP_GROUP_ID=crgm.CREDIT_REP_GROUP_ID
													INNER JOIN customergroup customergroupLkd ON customer.CUSTOMERGROUPID = customergroupLkd.ID
													INNER JOIN salesgroup salesgroupLkd ON customer.SALESGROUPID = salesgroupLkd.ID 
													INNER JOIN salesarea salesareaLkd ON customer.SALESAREAID = salesareaLkd.ID 
													INNER JOIN salesoffice salesofficeLkd ON customer.SALESOFFICEID = salesofficeLkd.ID 
													INNER JOIN salesorganisation salesorgLkd ON salesareaLkd.SALESORGID = salesorgLkd.ID 
													INNER JOIN DISTRIBUTIONCHANNEL distchannelLkd ON salesareaLkd.DISTCHANNELID = distchannelLkd.ID 
													INNER JOIN salesunit salesunitLkd ON salesofficeLkd.SALESUNITID = salesunitLkd.ID 
													INNER JOIN salesregion salesregionLkd ON salesunitLkd.SALESREGIONID = salesregionLkd.ID 
													INNER JOIN DIVISION di ON di.id = salesareaLkd.DIVISIONID
													LEFT JOIN contact contactLkd ON customer.MAINCONTACTID = contactLkd.ID 
													LEFT JOIN customer customerLkd ON customer.PARENTHQID = customerLkd.ID
													LEFT JOIN customer customerLkd1 ON customer.SALESPROMOTERID = customerLkd1.ID 
													LEFT JOIN address addressLkd ON contactLkd.ADDRESSID = addressLkd.ID 
													LEFT JOIN location locationLkd ON addressLkd.LOCATIONID = locationLkd.ID
																											
													where customer.ISDELETED = 0 and (customer.SALESPROMOTER IS NULL OR customer.SALESPROMOTER = 0)
													and (customer.delcreder is NULL OR customer.delcreder = 0)
													" />
				<!-- e.ID = ? OR -->
				<entry key="GET_ALL_FILTERED_CUSTOMER_BY_DELCREDER_ID"
					value="SELECT distinct customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,customer.UPDATEDATE,
														customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,customer.HEADQUARTER,customer.CUSTOMERNAME,
														customer.SINGLELOCATION,customer.CUSTOMERGROUPID,customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,
														customer.SALESGROUPID,customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,
														customer.VIRTUALACCOUNT,customer.ISDELETED , 
														customergroupLkd.name as customerGroupName  , contactLkd.email as email ,
														contactLkd.mobile as mobileNumber, salesgroupLkd.name as salesGroup  , salesofficeLkd.name as salesOffice ,
														customerLkd1.customername as salesPromoterName, salesorgLkd.name as salesOrganisation, distchannelLkd.name as distChannel,
														salesunitLkd.name as  salesUnit , salesregionLkd.name as salesRegion, addressLkd.name as  addressName,
														addressLkd.streetname as streetName, addressLkd.streetside as streetSide, addressLkd.FLOOR as floor,
														addressLkd.HOUSENUMBER as houseNumber, locationLkd.city as  city, locationLkd.STATEPROV as  state,
														locationLkd.COUNTRY as  country, locationLkd.POSTALCODE as  postalCode ,di.CODE as divisionCode, di.name as divisionName
													FROM customer
													INNER JOIN DELCREDER_CUSTOMER DC ON DC.CUSTOMERID=customer.id	
													INNER JOIN customergroup customergroupLkd ON customer.CUSTOMERGROUPID = customergroupLkd.ID
													INNER JOIN salesgroup salesgroupLkd ON customer.SALESGROUPID = salesgroupLkd.ID 
													INNER JOIN salesarea salesareaLkd ON customer.SALESAREAID = salesareaLkd.ID 
													INNER JOIN salesoffice salesofficeLkd ON customer.SALESOFFICEID = salesofficeLkd.ID 
													INNER JOIN salesorganisation salesorgLkd ON salesareaLkd.SALESORGID = salesorgLkd.ID 
													INNER JOIN DISTRIBUTIONCHANNEL distchannelLkd ON salesareaLkd.DISTCHANNELID = distchannelLkd.ID 
													INNER JOIN salesunit salesunitLkd ON salesofficeLkd.SALESUNITID = salesunitLkd.ID 
													INNER JOIN salesregion salesregionLkd ON salesunitLkd.SALESREGIONID = salesregionLkd.ID 
													INNER JOIN DIVISION di ON di.id = salesareaLkd.DIVISIONID
													LEFT JOIN contact contactLkd ON customer.MAINCONTACTID = contactLkd.ID 
													LEFT JOIN customer customerLkd ON customer.PARENTHQID = customerLkd.ID
													LEFT JOIN customer customerLkd1 ON customer.SALESPROMOTERID = customerLkd1.ID 
													LEFT JOIN address addressLkd ON contactLkd.ADDRESSID = addressLkd.ID 
													LEFT JOIN location locationLkd ON addressLkd.LOCATIONID = locationLkd.ID
																																						
													where customer.ISDELETED = 0 and (customer.SALESPROMOTER IS NULL OR customer.SALESPROMOTER = 0)
													AND customer.CUSTOMERNAME like ? 
													and customer.CODE like ?		
													and (? IS NULL OR customer.ACCESSPORTAL = ?) 
													and (DC.DELCREDERID = ? )
													ORDER BY customer.ID" />
				<entry key="SELECT_USER_PASSWORD_COUNT_BY_USER_ID"
					value="SELECT Count(*) 
                                        from user_password 
                                        where user_password.user_id= ? and user_password.ISDELETED=0
                                        " />

				<entry key="get_PendingAdditionalUser_For_Admin"
					value="Select c.CUSTOMERNAME, c.CODE as customerCode, u.loginId,u.GIVENNAME, u.FAMILYNAME, co.EMAIL,rm.role_id, rm.role_name, u.user_id 
														FROM CUSTOMERUSER cu 
														INNER JOIN [USER] u on u.user_id = cu.ID
														INNER JOIN CUSTOMER c on c.ID = cu.CUSTOMERID
														INNER JOIN user_role ur ON u.user_id = ur.user_id
														INNER JOIN role_master rm ON rm.role_id = ur.role_id
														INNER JOIN CONTACT co on co.ID = u.mainContactId
														WHERE cu.ISDELETED = 0 AND cu.ISADDITIONALUSER = 1 AND cu.ISPENDING = 1 AND u.COMPANYID = ?
                                        " />
				<entry key="get_PendingAdditionalUser_For_Employee"
					value="Select c.CUSTOMERNAME, c.CODE as customerCode, u.loginId,u.GIVENNAME, u.FAMILYNAME, co.EMAIL,rm.role_id, rm.role_name, u.user_id 
														FROM CUSTOMERUSER cu 
														INNER JOIN [USER] u on u.user_id = cu.ID
														INNER JOIN CUSTOMER c on c.ID = cu.CUSTOMERID
														INNER JOIN EMPLOYEE e on e.SALESOFFICEID = c.SALESOFFICEID
														INNER JOIN user_role ur ON u.user_id = ur.user_id
														INNER JOIN role_master rm ON rm.role_id = ur.role_id
														INNER JOIN CONTACT co on co.ID = u.mainContactId
														WHERE e.ID = ? AND cu.ISDELETED = 0 AND cu.ISADDITIONALUSER = 1 AND cu.ISPENDING = 1 AND u.COMPANYID = ?
                                        " />

				<!--// Queries For Userlogintracker -->
				<entry key="SEARCH_Userlogintracker"
					value="SELECT USERLOGINTRACKER.ID,USERLOGINTRACKER.USERID,USERLOGINTRACKER.LOGINTIME , USERIDLkd.name as useriduserLkdDesc
                                        FROM USERLOGINTRACKER 
                                        LEFT JOIN user USERIDLkd ON USERLOGINTRACKER.USERID = USERIDLkd.user_id 
                                        where 1=1  AND ID=?  
                                        ORDER BY USERLOGINTRACKER.ID 
                                        " />
				<entry key="SELECT_ALL_Userlogintracker"
					value="SELECT USERLOGINTRACKER.ID,USERLOGINTRACKER.USERID,USERLOGINTRACKER.LOGINTIME , userLkd.name as useriduserLkdDesc 
                                        FROM USERLOGINTRACKER 
                                        LEFT JOIN user userLkd ON USERLOGINTRACKER.USERID = userLkd.user_id 
                                        ORDER BY USERLOGINTRACKER.ID
                                        " />
				<entry key="INSERT_Userlogintracker"
					value="INSERT INTO USERLOGINTRACKER (ID,USERID,LOGINTIME,ISMOBILE) VALUES(?, ?, ?, ?) " />
				<entry key="DELETE_Userlogintracker_BY_ID"
					value="DELETE from USERLOGINTRACKER where ID= ?  " />
				<entry key="UPDATE_Userlogintracker_BY_ID"
					value="UPDATE USERLOGINTRACKER SET USERID = ?, LOGINTIME = ? WHERE ID=? " />
				<entry key="SELECT_Userlogintracker_BY_ID"
					value=" SELECT USERLOGINTRACKER.ID,USERLOGINTRACKER.USERID,USERLOGINTRACKER.LOGINTIME , userUSERIDLkd.name as useriduserLkdDesc 
                                        FROM USERLOGINTRACKER 
                                        LEFT JOIN user userUSERIDLkd ON USERLOGINTRACKER.USERID = userUSERIDLkd.user_id 
                                        where USERLOGINTRACKER.ID= ? 
                                        ORDER BY USERLOGINTRACKER.ID
                                        " />
				<entry key="SELECT_Userlogintracker_By_FKUserid"
					value="SELECT USERLOGINTRACKER.ID,USERLOGINTRACKER.USERID,USERLOGINTRACKER.LOGINTIME  
                                        FROM USERLOGINTRACKER 
                                        where USERLOGINTRACKER.USERID = ? " />

				<entry key="Update_CUSTOMER_AccessKey"
					value="Update Customer Set ACCESSKEY = ? where id = ?" />
				<entry key="INSERT_DIVISION"
					value="INSERT INTO DIVISION (ID, CREATEDATE, CREATOR, ENTITY_UID, MODIFIER, UPDATEDATE, OPTLOCK, CODE, NAME)
     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ? )" />
				<entry key="Select_Customer_For_Salespromoter_By_Code"
					value="SELECT customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,customer.UPDATEDATE,
										customer.OPTLOCK,customer.ACCESSKEY,customer.ACCESSPORTAL,customer.CODE,customer.HEADQUARTER,customer.CUSTOMERNAME,
										customer.SINGLELOCATION,customer.CUSTOMERGROUPID,customer.MAINCONTACTID,customer.PARENTHQID,customer.SALESAREAID,
										customer.SALESGROUPID,customer.SALESOFFICEID,customer.SALESPROMOTER,customer.SALESPROMOTERID,customer.ISDIRECTPOSTING,
										customer.VIRTUALACCOUNT,customer.ISDELETED , customergroupLkd.name as customerGroupName  , contactLkd.email as email ,
										contactLkd.mobile as mobileNumber, salesgroupLkd.name as salesGroup  , salesofficeLkd.name as salesOffice ,
										customerLkd1.customername as salesPromoterName, salesorgLkd.name as salesOrganisation, distchannelLkd.name as distChannel,
										salesunitLkd.name as  salesUnit , salesregionLkd.name as salesRegion, addressLkd.name as  addressName,
										addressLkd.streetname as streetName, addressLkd.streetside as streetSide, addressLkd.FLOOR as floor,
										addressLkd.HOUSENUMBER as houseNumber, locationLkd.city as  city, locationLkd.STATEPROV as  state,
										locationLkd.COUNTRY as  country, locationLkd.POSTALCODE as  postalCode 
									FROM customer
										LEFT JOIN customergroup customergroupLkd ON customer.CUSTOMERGROUPID = customergroupLkd.ID
										LEFT JOIN contact contactLkd ON customer.MAINCONTACTID = contactLkd.ID 
										LEFT JOIN customer customerLkd ON customer.PARENTHQID = customerLkd.ID
										LEFT JOIN salesarea salesareaLkd ON customer.SALESAREAID = salesareaLkd.ID 
										LEFT JOIN salesgroup salesgroupLkd ON customer.SALESGROUPID = salesgroupLkd.ID 
										LEFT JOIN salesoffice salesofficeLkd ON customer.SALESOFFICEID = salesofficeLkd.ID 
										LEFT JOIN customer customerLkd1 ON customer.SALESPROMOTERID = customerLkd1.ID 
										LEFT JOIN salesorganisation salesorgLkd ON salesareaLkd.SALESORGID = salesorgLkd.ID 
										LEFT JOIN DISTRIBUTIONCHANNEL distchannelLkd ON salesareaLkd.DISTCHANNELID = distchannelLkd.ID 
										LEFT JOIN salesunit salesunitLkd ON salesofficeLkd.SALESUNITID = salesunitLkd.ID 
										LEFT JOIN salesregion salesregionLkd ON salesunitLkd.SALESREGIONID = salesregionLkd.ID 
										LEFT JOIN address addressLkd ON contactLkd.ADDRESSID = addressLkd.ID 
										LEFT JOIN location locationLkd ON addressLkd.LOCATIONID = locationLkd.ID
									where customer.ISDELETED = 0 and (customer.SALESPROMOTER IS NULL OR customer.SALESPROMOTER = 0) AND customer.CODE = ?
									ORDER BY customer.ID " />



				<!--// Queries For Ledger -->
				<!-- <entry key="SEARCH_Ledger" value="SELECT LEDGER.ID,LEDGER.Customerid,LEDGER.Month,LEDGER.DOCNO,LEDGER.DOCDATE,LEDGER.DOCTYPE1,LEDGER.DOCTYPE2,LEDGER.DOCTEXT,LEDGER.INVOICENO,LEDGER.PLANTNAME,LEDGER.CMULOCATION,LEDGER.SOPYMTNO,LEDGER.DESTINATION,LEDGER.INVOICEDATE,LEDGER.MATERIAL,LEDGER.QUANTITY,LEDGER.AMOUNT,LEDGER.CREDITDEBITIND,LEDGER.DEBIT,LEDGER.CREDIT,LEDGER.SECURITYBALANCE,LEDGER.OPENINGBALANCE1,LEDGER.TAXAMOUNT,LEDGER.CLOSINGBALANCE,LEDGER.OPENINGBALANCE2,LEDGER.CREATEDATE 
					FROM LEDGER where LEDGER.DOCDATE between ? and ? and LEDGER.Customerid=? 
					ORDER BY LEDGER.DOCDATE desc "/> -->
				<entry key="SELECT_ALL_Ledger"
					value="SELECT LEDGER.ID,LEDGER.Customerid,LEDGER.Month,LEDGER.DOCNO,LEDGER.DOCDATE,LEDGER.DOCTYPE1,LEDGER.DOCTYPE2,LEDGER.DOCTEXT,LEDGER.INVOICENO,LEDGER.PLANTNAME,LEDGER.CMULOCATION,LEDGER.SOPYMTNO,LEDGER.DESTINATION,LEDGER.INVOICEDATE,LEDGER.MATERIAL,LEDGER.QUANTITY,LEDGER.AMOUNT,LEDGER.CREDITDEBITIND,LEDGER.DEBIT,LEDGER.CREDIT,LEDGER.SECURITYBALANCE,LEDGER.OPENINGBALANCE1,LEDGER.TAXAMOUNT,LEDGER.CLOSINGBALANCE,LEDGER.OPENINGBALANCE2,LEDGER.CREATEDATE
                                        FROM LEDGER 
                                        ORDER BY LEDGER.ID
                                        " />
				<entry key="INSERT_Ledger"
					value="INSERT INTO LEDGER (Customerid,Month,DOCNO,DOCDATE,DOCTYPE1,DOCTYPE2,DOCTEXT,INVOICENO,PLANTNAME,CMULOCATION,SOPYMTNO,DESTINATION,INVOICEDATE,MATERIAL,QUANTITY,AMOUNT,CREDITDEBITIND,DEBIT,CREDIT,SECURITYBALANCE,OPENINGBALANCE1,TAXAMOUNT,CLOSINGBALANCE,OPENINGBALANCE2,CREATEDATE)
                                         VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, GETDATE()) 
                                        " />
				<entry key="DELETE_Ledger_BY_ID"
					value="DELETE from LEDGER where ID= ?  " />
				<entry key="UPDATE_Ledger_BY_ID"
					value="UPDATE LEDGER SET Customerid = ?, Month = ?, DOCNO = ?, DOCDATE = ?, DOCTYPE1 = ?, DOCTYPE2 = ?, DOCTEXT = ?, INVOICENO = ?, PLANTNAME = ?, CMULOCATION = ?, SOPYMTNO = ?, DESTINATION = ?, INVOICEDATE = ?, MATERIAL = ?, QUANTITY = ?, AMOUNT = ?, CREDITDEBITIND = ?, DEBIT = ?, CREDIT = ?, SECURITYBALANCE = ?, OPENINGBALANCE1 = ?, TAXAMOUNT = ?, CLOSINGBALANCE = ?, OPENINGBALANCE2 = ?, CREATEDATE = ? 
                                        WHERE ID=? 
                                        " />
				<entry key="SELECT_Ledger_BY_ID"
					value=" SELECT LEDGER.ID,LEDGER.Customerid,LEDGER.Month,LEDGER.DOCNO,LEDGER.DOCDATE,LEDGER.DOCTYPE1,LEDGER.DOCTYPE2,LEDGER.DOCTEXT,LEDGER.INVOICENO,LEDGER.PLANTNAME,LEDGER.CMULOCATION,LEDGER.SOPYMTNO,LEDGER.DESTINATION,LEDGER.INVOICEDATE,LEDGER.MATERIAL,LEDGER.QUANTITY,LEDGER.AMOUNT,LEDGER.CREDITDEBITIND,LEDGER.DEBIT,LEDGER.CREDIT,LEDGER.SECURITYBALANCE,LEDGER.OPENINGBALANCE1,LEDGER.TAXAMOUNT,LEDGER.CLOSINGBALANCE,LEDGER.OPENINGBALANCE2,LEDGER.CREATEDATE
                                        FROM LEDGER 
                                        where LEDGER.ID= ? 
                                        ORDER BY LEDGER.ID
                                        " />

				<entry key="SELECT_LEDGER_FOR_GET_DUPLICATE"
					value="SELECT LEDGER.ID,LEDGER.Customerid,LEDGER.Month,LEDGER.DOCNO,LEDGER.DOCDATE,LEDGER.DOCTYPE1,LEDGER.DOCTYPE2,LEDGER.DOCTEXT,LEDGER.INVOICENO,LEDGER.PLANTNAME,LEDGER.CMULOCATION,LEDGER.SOPYMTNO,LEDGER.DESTINATION,LEDGER.INVOICEDATE,LEDGER.MATERIAL,LEDGER.QUANTITY,LEDGER.AMOUNT,LEDGER.CREDITDEBITIND,LEDGER.DEBIT,LEDGER.CREDIT,LEDGER.SECURITYBALANCE,LEDGER.OPENINGBALANCE1,LEDGER.TAXAMOUNT,LEDGER.CLOSINGBALANCE,LEDGER.OPENINGBALANCE2,LEDGER.CREATEDATE
                                        FROM LEDGER 
                                        where LEDGER.CUSTOMERID= ? AND LEDGER.MONTH = ? AND LEDGER.DOCNO=? AND LEDGER.DOCDATE=? AND LEDGER.INVOICENO = ? AND LEDGER.SOPYMTNO = ?" />

				<entry key="REMOVE_PREVIOUS_USER_PASSWORD"
					value="update user_password set ISDELETED = 1 where user_password.user_password_id = 
												  (select u1.user_password_id from user_password u1 inner join (select max(user_password_id)
												  upMax from user_password where user_password.user_id = ? ) u2
												  on u1.user_password_id = u2.upMax)" />

				<entry key="GET_LAST_FIVE_PASSWORD_BY_USER_ID"
					value="select top 5 user_password.user_password from user_password where user_password.user_id= ?
													  order by user_password.user_password_id desc" />
				<entry key="GET_COMPANY_ID_BY_URL"
					value="SELECT distinct c.ID FROM COMPANY c
											INNER JOIN INTRANETCOMPANY ic ON c.ID = ic.ID
											where (c.PORTALURL = ? OR ic.PORTALURL = ?)" />
				<entry key="GET_PORTAL_URL_BY_COMPANY_ID"
					value="select PORTALURL from COMPANY where ID = ?" />

				<entry key="GET_CUSTOMER_USERS"
					value=" SELECT ISNULL(ud.LOCKED,0) as ACCESSPORTAL, u.user_Id , u.loginId, contactLkd.EMAIL, contactLkd.MOBILE, contactLkd.ID as contactId,u.user_status as userStatus,
										CASE WHEN u.middleName IS NOT NULL AND u.FAMILYNAME IS NOT NULL THEN Concat(u.givenName,' ',u.middleName,' ', u.FamilyName)
														WHEN u.middleName IS NULL AND u.familyName IS NOT NULL THEN Concat(u.givenName,' ', u.FamilyName) 
														WHEN u.middleName IS NOT NULL AND u.familyName IS NULL THEN Concat(u.givenName,' ', u.middleName) 	
														ELSE u.givenName END as name,cu.POSITION as position,ld.lookup_value as positionValue
																				
										FROM customeruser cu
										Inner Join CUSTOMER c ON c.ID = cu.CUSTOMERID
										Inner Join [USER] u ON u.user_id = cu.ID
										LEFT JOIN [USERLOGINDETAILS] ud on ud.USER_ID = u.user_id
										LEFT JOIN contact contactLkd ON u.MAINCONTACTID = contactLkd.ID 
										LEFT JOIN address addressLkd ON contactLkd.ADDRESSID = addressLkd.ID 
										LEFT JOIN location locationLkd ON addressLkd.LOCATIONID = locationLkd.ID
										inner join lookup_details ld on cu.POSITION = ld.lookupd_id
										where cu.CUSTOMERID = ? order by name" />
				<entry key="GET_ALL_ROLE_NAME_BY_USER_ID"
					value="select rm.role_name from role_master rm  inner join user_role ur  on rm.role_id = ur.role_id
													 where ur.user_id=? and (rm.ISDELETED=0 or rm.ISDELETED is null) "></entry>
				<!-- Queries for Help Details -->
				<entry key="INSERT_helpDetails"
					value="INSERT INTO HELPDETAILS (ID, CREATEDATE, CREATOR, ENTITY_UID, MODIFIER, UPDATEDATE, OPTLOCK, DESCRIPTION, EMAIL, NAME, PHONE, ALT_PHONE, SUMMARY, HELPFUNCTION, PROBLEMTYPE, COMPANYID, SAPCODE)
                                         VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"></entry>
				<entry key="getUserType"
					value="Select CASE WHEN e.ID IS NOT NULL THEN 'Employee'
													WHEN cu.ID IS NOT NULL AND (c.SALESPROMOTER IS NULL OR  c.SALESPROMOTER = 0) THEN 'Customer'
													When cu.ID IS NOT NULL AND c.SALESPROMOTER = 1 THEN 'MultiAccount'
												END userType
										from [USER] u 
										LEFT Join  EMPLOYEE e ON e.ID = u.user_id
										Left Join CUSTOMERUSER cu ON cu.ID = u.user_id
										Left Join CUSTOMER c ON c.ID = cu.CUSTOMERID
										WHERE u.user_ID = ?" />
				<!--// Queries For Shiptoparty -->

				<entry key="INSERT_Shiptoparty_old"
					value="INSERT INTO shiptoparty (id,SOLDTOCODE,SHIPTOCODE,ADDRESS,STREETSIDE,HOUSENUMBER,CITYCODE,CITYNAME,STREETNAME,DISTRICT,POSTALCODE,STATE,SALESORG,DISTCHANNEL,DIVISION,PARTNERFUNCTION,BLOCKSTATUS,CREATEDATE,UPDATEDATE)
                                         VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,? ) 
                                        " />
				<entry key="INSERT_Shiptoparty"
					value="INSERT INTO shiptoparty (SOLDTOCODE,SHIPTOCODE,ADDRESS,STREETSIDE,HOUSENUMBER,CITYCODE,CITYNAME,STREETNAME,DISTRICT,POSTALCODE,STATE,SALESORG,DISTCHANNEL,DIVISION,PARTNERFUNCTION,BLOCKSTATUS,CREATEDATE,UPDATEDATE)
                                         VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,? ) 
                                        " />
				<entry key="UPDATE_SHIPTOPARTY"
					value="update shiptoparty set address = ?, streetside = ?, housenumber = ?, citycode = ?, cityname =?, 
										streetname = ?, district = ?, postalcode = ?, state = ?, salesorg = ?, distchannel = ?, division = ?, partnerfunction = ?,
										blockstatus = ?, updatedate = ? where soldtocode = ? and shiptocode = ?
										and salesorg = ? and distchannel = ? and division = ? and partnerfunction = ?" />

				<entry key="DELETE_Shiptoparty_BY_ID"
					value="DELETE from shiptoparty where id= ?  " />
				<entry key="DELETE_Shiptoparty_BY_SoldToParty"
					value="DELETE from shiptoparty where soldtocode= ?  " />
				<entry key="update_Shiptoparty_BY_SoldToParty"
					value="DELETE from shiptoparty where soldtocode= ?  " />

				<!-- <entry key="GET_SHIP_TO_PARTY_LIST_FOR_CUSTOMER" value="SELECT shiptoparty.id,shiptoparty.SOLDTOCODE,shiptoparty.SHIPTOCODE,shiptoparty.ADDRESS,shiptoparty.STREETSIDE,shiptoparty.HOUSENUMBER,shiptoparty.CITYCODE,shiptoparty.CITYNAME,shiptoparty.STREETNAME,shiptoparty.DISTRICT,shiptoparty.POSTALCODE,shiptoparty.STATE,shiptoparty.SALESORG,shiptoparty.DISTCHANNEL,shiptoparty.DIVISION,shiptoparty.PARTNERFUNCTION,shiptoparty.BLOCKSTATUS,shiptoparty.CREATEDATE,shiptoparty.UPDATEDATE 
					FROM shiptoparty where shiptoparty.SOLDTOCODE = ? AND shiptoparty.PARTNERFUNCTION 
					= ? AND shiptoparty.DIVISION = ? AND shiptoparty.SALESORG = ? AND shiptoparty.DISTCHANNEL=? 
					AND shiptoparty.BLOCKSTATUS=1 ORDER BY shiptoparty.id "/> -->
				<entry key="GET_SHIP_TO_PARTY_LIST_FOR_CUSTOMER"
					value="SELECT shiptoparty.id,shiptoparty.SOLDTOCODE,shiptoparty.SHIPTOCODE,shiptoparty.ADDRESS,shiptoparty.STREETSIDE,shiptoparty.HOUSENUMBER,shiptoparty.CITYCODE,shiptoparty.CITYNAME,shiptoparty.STREETNAME,shiptoparty.DISTRICT,shiptoparty.POSTALCODE,shiptoparty.STATE,shiptoparty.SALESORG,shiptoparty.DISTCHANNEL,shiptoparty.DIVISION,shiptoparty.PARTNERFUNCTION,shiptoparty.BLOCKSTATUS,shiptoparty.CREATEDATE,shiptoparty.UPDATEDATE
                                        FROM shiptoparty 
                                        where shiptoparty.SOLDTOCODE = ? AND shiptoparty.PARTNERFUNCTION = ? AND
                                        shiptoparty.DIVISION = ? AND shiptoparty.SALESORG = ? AND shiptoparty.BLOCKSTATUS=1
                                        ORDER BY shiptoparty.id 
                                        " />

				<entry key="GET_ALL_SHIP_TO_PARTY_LIST_FOR_CUSTOMER"
					value="SELECT shiptoparty.id,shiptoparty.SOLDTOCODE,shiptoparty.SHIPTOCODE,shiptoparty.ADDRESS,shiptoparty.STREETSIDE,shiptoparty.HOUSENUMBER,shiptoparty.CITYCODE,shiptoparty.CITYNAME,shiptoparty.STREETNAME,shiptoparty.DISTRICT,shiptoparty.POSTALCODE,shiptoparty.STATE,shiptoparty.SALESORG,shiptoparty.DISTCHANNEL,shiptoparty.DIVISION,shiptoparty.PARTNERFUNCTION,shiptoparty.BLOCKSTATUS,shiptoparty.CREATEDATE,shiptoparty.UPDATEDATE
                                        FROM shiptoparty 
                                        where shiptoparty.SOLDTOCODE = ?
                                        ORDER BY shiptoparty.id 
                                        " />

				<entry key="GET_SHIP_TO_PARTY_BY_ID"
					value="SELECT shiptoparty.id,shiptoparty.SOLDTOCODE,shiptoparty.SHIPTOCODE,shiptoparty.ADDRESS,shiptoparty.STREETSIDE,shiptoparty.HOUSENUMBER,shiptoparty.CITYCODE,shiptoparty.CITYNAME,shiptoparty.STREETNAME,shiptoparty.DISTRICT,shiptoparty.POSTALCODE,shiptoparty.STATE,shiptoparty.SALESORG,shiptoparty.DISTCHANNEL,shiptoparty.DIVISION,shiptoparty.PARTNERFUNCTION,shiptoparty.BLOCKSTATUS,shiptoparty.CREATEDATE,shiptoparty.UPDATEDATE
                                        FROM shiptoparty 
                                        where shiptoparty.ID = ?
                                        " />
				<!-- Need to be changed to RP_RetialerOrder -->
				<entry key="GET_ALL_RETAILER_ORDER_COUNT_FOR_CUSTOMER"
					value="SELECT count(*) FROM RP_RETAILER_ORDER r where r.CUSTOMERID = ? and r.STATUS ='OPEN'" />
				<!-- Need to be changed to RP_RetialerOrder -->

				<entry key="FIND_CUSTOMER_CODE_BY_ID"
					value="SELECT c.CODE FROM CUSTOMER c where c.ID = ?" />

				<entry key="FIND_SALES_ORGANISATION_CODE_BY_CUSTOMER_ID"
					value="select s.CODE  from SALESORGANISATION s
																inner join SALESAREA on s.ID=SALESAREA.SALESORGID 
																inner join CUSTOMER on CUSTOMER.SALESAREAID=SALESAREA.ID
															    where CUSTOMER.id=?" />

				<entry key="FIND_DIST_CHANNEL_CODE_BY_CUSTOMER_ID"
					value="select  d.code from DISTRIBUTIONCHANNEL d
														 inner join SALESAREA on d.ID=SALESAREA.DISTCHANNELID 
														 inner join CUSTOMER on CUSTOMER.SALESAREAID=SALESAREA.ID 
														 where CUSTOMER.id=?" />
				<entry key="FIND_DIVISION_CODE_BY_CUSTOMER_ID"
					value="select d.CODE from DIVISION d
													  inner join SALESAREA on d.ID=SALESAREA.DIVISIONID inner join
													  CUSTOMER on CUSTOMER.SALESAREAID=SALESAREA.ID where CUSTOMER.id=?" />


				<entry key="GET_FINAL_REMAINING_QTY"
					value="SELECT top 1 s.REMAININGQTY
  											FROM SECONDARYSALES s where s.CODE = ?
											AND s.ISDELETED=0 AND DELIVERYNO = ? ORDER BY s.ID desc"></entry>
				<!-- <entry key="GET_LEDGER_FOR_CUSTOMER" value="SELECT l.Customerid 
					as customerid,c.CUSTOMERNAME as customerName,customergroupLkd.NAME as customerGroup, 
					l.Month as month,l.doctype1 as doctype1,c.ACCESSPORTAL as status,DATEPART(yyyy, 
					l.docdate) as year FROM LEDGER l inner join CUSTOMER c on l.Customerid = 
					c.CODE Inner JOIN customergroup customergroupLkd ON c.CUSTOMERGROUPID = customergroupLkd.ID 
					Inner JOIN salesoffice salesofficeLkd ON c.SALESOFFICEID = salesofficeLkd.ID 
					Inner JOIN salesunit salesunitLkd ON salesofficeLkd.SALESUNITID = salesunitLkd.ID 
					Inner JOIN salesregion salesregionLkd ON salesunitLkd.SALESREGIONID = salesregionLkd.ID 
					Inner JOIN ENTERPRISE en ON en.ID = salesregionLkd.ENTERPRISEID LEFT JOIN 
					Employee e on e.SALESOFFICEID = c.SALESOFFICEID LEFT JOIN EMP_SALESOFFICE 
					es on es.SALESOFFICE_ID = c.SALESOFFICEID where c.ISDELETED = 0 and c.SALESPROMOTER 
					= 0 AND c.CODE like ? and c.CUSTOMERNAME like ? AND (? IS NULL or customergroupLkd.name 
					LIKE ?) AND (? is NULL or l.MONTH = ?) and (? IS NULL OR c.ACCESSPORTAL = 
					?) AND salesofficeLkd.name like ? and salesunitLkd.name like ? and en.COMPANYID 
					= ? and (? is NULL or DATEPART(yyyy, l.docdate) = ?) AND (e.ID = ? OR es.EMP_ID 
					= ?) group by l.Customerid,l.Month,DATEPART(yyyy, l.docdate),c.CUSTOMERNAME,customergroupLkd.NAME,c.ACCESSPORTAL,l.doctype1"></entry> -->

				<entry key="GET_LEDGER_FOR_EMPLOYEE"
					value="SELECT 	l.Customerid as customerid,c.CUSTOMERNAME as customerName,customergroupLkd.NAME as customerGroup,
											l.Month as month,l.doctype1 as doctype1,c.ACCESSPORTAL as status,DATEPART(yyyy, l.docdate) as year
											FROM  LEDGER l inner join CUSTOMER c  on l.Customerid  = c.CODE
											Inner JOIN customergroup customergroupLkd ON c.CUSTOMERGROUPID = customergroupLkd.ID
											Inner JOIN salesoffice salesofficeLkd ON c.SALESOFFICEID = salesofficeLkd.ID 
											Inner JOIN salesunit salesunitLkd ON salesofficeLkd.SALESUNITID = salesunitLkd.ID 
											Inner JOIN salesregion salesregionLkd ON salesunitLkd.SALESREGIONID = salesregionLkd.ID 
											Inner JOIN ENTERPRISE en ON en.ID = salesregionLkd.ENTERPRISEID
											LEFT JOIN Employee e on e.SALESOFFICEID = c.SALESOFFICEID
											LEFT JOIN EMP_SALESOFFICE es on es.SALESOFFICE_ID = c.SALESOFFICEID
											where c.ISDELETED = 0 and c.SALESPROMOTER = 0 AND c.CODE like ? and c.CUSTOMERNAME like ?  
											AND (? IS NULL or customergroupLkd.name LIKE ?) AND (? is NULL or l.MONTH = ?) and 
											(? IS NULL OR c.ACCESSPORTAL = ?) AND  salesofficeLkd.name like ? and salesunitLkd.name like ?
											and en.COMPANYID = ? and (? is NULL or DATEPART(yyyy, l.docdate) = ?)
											AND (e.ID = ? OR es.EMP_ID = ?)
											group by l.Customerid,l.Month,DATEPART(yyyy, l.docdate),c.CUSTOMERNAME,customergroupLkd.NAME,c.ACCESSPORTAL,l.doctype1"></entry>

				<entry key="GET_LEDGER_FOR_CUSTOMER"
					value="select l.Customerid as customerid,c.CUSTOMERNAME,DATEPART(mm, l.docdate)  as month,c.ACCESSPORTAL as status,DATEPART(yyyy, l.docdate) as year 
											FROM LEDGER l  inner join CUSTOMER c  on l.Customerid  = c.CODE 
											where l.customerid=?
											and convert(datetime, l.docdate, 101) &gt; convert(datetime, DateAdd(mm, -12,getDate() ) , 101) 
											and convert(datetime, l.docdate, 101) &lt;  convert(datetime, getdate(), 101)
											group by l.Customerid, c.CUSTOMERNAME, DATEPART(mm, l.docdate), c.ACCESSPORTAL, DATEPART(yyyy, l.docdate)
											order by l.customerid, year desc, month desc" />

				<entry key="SEARCH_Ledger"
					value="SELECT LEDGER.ID,LEDGER.Customerid,LEDGER.Month,LEDGER.DOCNO,LEDGER.DOCDATE,LEDGER.DOCTYPE1,LEDGER.DOCTYPE2,LEDGER.DOCTEXT,LEDGER.INVOICENO,LEDGER.PLANTNAME,LEDGER.CMULOCATION,LEDGER.SOPYMTNO,LEDGER.DESTINATION,LEDGER.INVOICEDATE,LEDGER.MATERIAL,LEDGER.QUANTITY,LEDGER.AMOUNT,LEDGER.CREDITDEBITIND,LEDGER.DEBIT,LEDGER.CREDIT,LEDGER.SECURITYBALANCE,LEDGER.OPENINGBALANCE1,LEDGER.TAXAMOUNT,LEDGER.CLOSINGBALANCE,LEDGER.OPENINGBALANCE2,LEDGER.CREATEDATE
											FROM LEDGER where LEDGER.Customerid=? and DATEPART(yyyy, LEDGER.docdate)=? and  LEDGER.month=? 
											ORDER BY LEDGER.DOCDATE desc " />

				<entry key="GET_LEDGER_EXCEL"
					value="SELECT LEDGER.Customerid,LEDGER.Month,LEDGER.DOCNO,LEDGER.DOCDATE,LEDGER.DOCTYPE1,invoiceno,plantname,cmulocation,sopymtno,invoicedate,destination,material,quantity,
											LEDGER.DOCTEXT,LEDGER.DEBIT,LEDGER.CREDIT from ledger where LEDGER.Month = ?
									        and DATEPART(yyyy, docdate) =? and LEDGER.Customerid=? ORDER BY LEDGER.DOCDATE desc " />

				<entry key="GET_LEDGER_ClOSING_BALANCE"
					value="SELECT CONVERT(DECIMAL(10,2),sum(credit))credit,CONVERT(DECIMAL(10,2),sum(debit))debit,CONVERT(DECIMAL(10,2),(sum(LEDGER.DEBIT)-sum(LEDGER.CREDIT))) closingBalanace from ledger where LEDGER.Month = ?
                                       		and DATEPART(yyyy, docdate) =? and LEDGER.Customerid=? group by LEDGER.Customerid " />

				<entry key="GET_LEDGER_OPENING_BALANCE"
					value="select distinct amount  openingBalanace from ledger_openingbalance where customer_code=? 
											and  DATEPART(yyyy, opening_date)=? and DATEPART(mm, opening_date)=? " />

				<entry key="FIND_ENTERPRISE_CODE_BY_CUSTOMER_CODE"
					value="select e.CODE from ENTERPRISE e inner join CUSTOMERGROUP cg on e.ID  = cg.ENTERPRISEID 
														  inner join CUSTOMER c on c.CUSTOMERGROUPID = cg.id where c.CODE = ? and e.ISDELETED=0" />

				<entry key="GET_USER_LAST_LOGIN_TIME_BY_USER_ID"
					value="SELECT u.LASTLOGINSUCCESS FROM USERLOGINDETAILS u where u.USER_ID= ?" />

				<entry key="GET_CUSTOMER_DETAILS_FOR_SHIP_TO_PARTY"
					value="select c.CODE as customerCode,dv.CODE as divisionCode
															,so.CODE as salesOrgCode,dc.code as distChannelCode from CUSTOMER c
															inner join SALESAREA sa on sa.ID = c.SALESAREAID
															inner join SALESORGANISATION so on so.ID  = sa.SALESORGID
															inner join DISTRIBUTIONCHANNEL dc on dc.ID = sa.DISTCHANNELID
															inner join DIVISION dv on dv.ID = sa.DIVISIONID
															where c.ID = ?" />
				<entry key="SELECT_SALES_OFFICE_BY_REGIONID"
					value="SELECT salesoffice.ID,salesoffice.CREATEDATE,salesoffice.CREATOR,salesoffice.ENTITY_UID,salesoffice.MODIFIER,salesoffice.UPDATEDATE,salesoffice.OPTLOCK,salesoffice.CODE,salesoffice.NAME,salesoffice.SALESUNITID, salesunitLkd.name as salesunitidsalesunitLkdDesc  
												FROM salesoffice  
												LEFT JOIN salesunit salesunitLkd ON salesoffice.SALESUNITID = salesunitLkd.ID  
												LEFT JOIN salesRegion salesRegionLkd ON salesunitLkd.SALESREGIONID = salesRegionLkd.ID 
												LEFT JOIN enterprise enterpriseLkd ON salesRegionLkd.ENTERPRISEID = enterpriseLkd.ID 
												LEFT JOIN company companyLkd ON enterpriseLkd.COMPANYID = companyLkd.ID 
												where salesRegionLkd.ID= ? AND companyLkd.ID=? 
												ORDER BY salesoffice.ID
                                        		" />

				<entry key="GET_CUSTOMER_SALES_OFFICE_AND_REGION"
					value="SELECT so.ID as salesOfficeId,
										sr.ID as salesRegionId  
										FROM [user]
										INNER Join customeruser cu ON [USER].user_id = cu.ID
										INNER Join customer cus ON cu.CUSTOMERID = cus.ID
										INNER Join salesoffice so ON cus.SALESOFFICEID = so.ID
										INNER Join SALESUNIT su ON su.id = so.salesunitId
										Left Join SALESREGION sr on sr.id= su.SALESREGIONID
                                        where [user].user_id= ?
                                        		" />
				<entry key="GET_EMPLOYEE_SALES_OFFICE_AND_REGION"
					value="select so.id as salesOfficeId  ,sr.id as salesRegionId from EMPLOYEE e inner join SALESOFFICE so on e.SALESOFFICEID =so.ID 
													  inner join SALESUNIT su on su.ID = so.SALESUNITID
													  inner join SALESREGION sr on su.SALESREGIONID = sr.id  where e.id = ?
                                        		" />
				<entry key="SEARCH_SHIP_TO_PARTY_LIST_FOR_CUSTOMER"
					value="SELECT shiptoparty.id,shiptoparty.SOLDTOCODE,shiptoparty.SHIPTOCODE,shiptoparty.ADDRESS,shiptoparty.STREETSIDE,shiptoparty.HOUSENUMBER,shiptoparty.CITYCODE,shiptoparty.CITYNAME,shiptoparty.STREETNAME,shiptoparty.DISTRICT,shiptoparty.POSTALCODE,shiptoparty.STATE,shiptoparty.SALESORG,shiptoparty.DISTCHANNEL,shiptoparty.DIVISION,shiptoparty.PARTNERFUNCTION,shiptoparty.BLOCKSTATUS,shiptoparty.CREATEDATE,shiptoparty.UPDATEDATE
                                        FROM shiptoparty 
                                        where shiptoparty.SOLDTOCODE = ? AND shiptoparty.PARTNERFUNCTION = ? AND
                                        shiptoparty.DIVISION = ? AND shiptoparty.SALESORG = ? AND shiptoparty.DISTCHANNEL=?
                                        AND (shiptoparty.SHIPTOCODE like ? OR shiptoparty.ADDRESS like ? OR shiptoparty.CITYNAME like ? OR shiptoparty.CITYCODE like ? ) AND shiptoparty.BLOCKSTATUS=1
                                        ORDER BY shiptoparty.id  
                                        " />

				<!-- Added by Mohsin for RetailPos -->
				<entry key="SELECT_Retailer_BY_MOBILE"
					value="select * from RP_RETAILER r where r.mobile=?" />
				<entry key="SELECT_Retailer_Customers"
					value="SELECT cust.ID, cust.CODE, cust.CUSTOMERNAME name FROM CUSTOMER cust, RP_RETAILER_CUSTOMER retail where
					retail.CUSTOMERID=cust.ID AND retail.RETAILERID=?" />
				<entry key="SELECT_Child_Retailers"
					value="select * FROM RP_RETAILER WHERE PARENTID = ? AND ACTIVE=1" />

				<entry key="GET_RETAILER_MOBILE_DETAILS"
					value="select ID, RETAILERID, IMEI_NUMBER IMEI, PIN from RP_PHONE_AUTHENTICATION where RETAILERID=?" />

				<entry key="GET_MAX_RETAILER_MOBILE"
					value="Select MAX(ID) from RP_PHONE_AUTHENTICATION" />

				<entry key="INSERT_RETAILER_MOBILE_DETAILS"
					value="INSERT INTO RP_PHONE_AUTHENTICATION(ID, RETAILERID, IMEI_NUMBER, PIN, CREATOR, CREATEDATE, ENTITY_UID) values(?,?,?,?,?,?,?)" />

				<entry key="UPDATE_RETAILER_MOBILE_DETAILS"
					value="update RP_PHONE_AUTHENTICATION set IMEI_NUMBER=?, PIN=?, UPDATEDATE=? where RETAILERID=?" />

				<entry key="GET_RETAILER_ORDERS_BY_SEARCH"
					value="select ORD.ID, ORD.CREATEDATE, ORD.UPDATEDATE, ORD.ORDERNUMBER, ORD.MATERIALID, ORD.QUANTITY, ORD.REQUIREDDATE, ORD.CUSTOMERID, ORD.RETAILERID, CUST.CUSTOMERNAME, RETAIL.NAME retailername, ORD.STATUS, ORD.WEBORDERNUMBER documentNumber, ORD.FLOATINGSTOCK floating
					FROM RP_RETAILER_ORDER ORD, CUSTOMER CUST, RP_RETAILER RETAIL
					WHERE ORD.RETAILERID in (select id from RP_RETAILER where id = ? or parentid = ?)
					AND ORD.STATUS LIKE ?
					AND ORD.CREATEDATE between CONVERT(VARCHAR, ?, 103) and CONVERT(VARCHAR, ?, 103)
					AND ORD.ID>=?
					AND ORD.ID LIKE ?
					AND CUST.ID=ORD.CUSTOMERID AND RETAIL.ID=ORD.RETAILERID" />

				<entry key="SET_RETAILER_OTP"
					value="insert into RP_RETAILER_OTP (RETAILERID, OTP, CREATEDATE, UPDATEDATE, ISUSED)
					VALUES (?,?,?,?,?)" />

				<entry key="UPDATE_RETAILER_OTP"
					value="UPDATE RP_RETAILER_OTP SET OTP=?, UPDATEDATE=?, ISUSED=? WHERE RETAILERID=?" />

				<entry key="GET_RETAILER_OTP"
					value="SELECT * FROM RP_RETAILER_OTP WHERE RETAILERID=?" />

				<entry key="DISABLE_RETAILER_OTP"
					value="UPDATE RP_RETAILER_OTP SET UPDATEDATE=?, ISUSED=? WHERE RETAILERID=?" />

				<entry key="RETAILER_REGISTRATION"
					value="insert into RP_RETAILER_REGISTRATION(CREATEDATE, ENTITY_UID, NAME, MOBILE, EMAIL, SHOPNAME, SHOPCONTACT, SHOPADDRESS, CREATOR, ID) 
					values(?,?,?,?,?,?,?,?,?,?)" />

				<entry key="GET_MAX_RETAILER_REGISTRATION"
					value="Select MAX(ID) from RP_RETAILER_REGISTRATION" />

				<entry key="GET_MAX_RETAILER_ORDER"
					value="Select MAX(ID) from RP_RETAILER_ORDER" />
				<entry key="PLACE_RETAILER_ORDER"
					value="insert into RP_RETAILER_ORDER(CREATEDATE,CREATOR, ENTITY_UID, ORDERNUMBER, FLOATINGSTOCK, MATERIALID,QUANTITY, REQUIREDDATE, STATUS, CUSTOMERID,RETAILERID) 
										values(?,?,?,?,?,?,?,?,?,?,?)" />
				<entry key="UPDATE_RETAILER_ORDER_BY_RETAILER"
					value="update RP_RETAILER_ORDER set MATERIALID=?, QUANTITY=?, UPDATEDATE=?, STATUS=? WHERE ID=?" />

				<entry key="GET_CUSTOMER_MOBILE_BY_ID"
					value="select CO.MOBILE from CUSTOMER CU, CONTACT CO where CU.ID=? and CU.MAINCONTACTID=CO.ID" />

				<entry key="GET_MAX_STOCK_UPDATE"
					value="Select MAX(ID) from RP_RETAILER_STOCKUPDATE" />

				<entry key="UPDATE_RETAILER_STOCK"
					value="insert into RP_RETAILER_STOCKUPDATE(ID, CREATEDATE,CREATOR, ENTITY_UID, RETAILERID, TOTAL_CEMENT_STOCK, AMBUJA_CEMENT_STOCK, STOCK_DATE) values (?,?,?,?,?,?,?,?)" />

				<entry key="GET_RETAILER_STOCK"
					value="SELECT ID, TOTAL_CEMENT_STOCK totalStock, AMBUJA_CEMENT_STOCK productStock, STOCK_DATE stockDate FROM RP_RETAILER_STOCKUPDATE WHERE RETAILERID=?
										AND CREATEDATE between CONVERT(VARCHAR, ?, 103) and CONVERT(VARCHAR, ?, 103)
										AND ID>=?" />
				<entry key="GET_DOCUMENT_NUMBER_BY_WEB_ORDER_NUMBER"
					value="select POH.SALESDOCUMENT FROM POSTEDORDERHEADER POH, ORDERHEADER OH, SALEORDER SO WHERE
					POH.ID=OH.POSTEDORDERHEADERID AND OH.ID=SO.ORDERHEADERID AND SO.WEBORDERNUMBER=?" />

				<entry key="GET_RETAILER_ORDER_REPORT_BY_SALES_OFFICE_ID"
					value="Select r.CODE retailerCode, r.NAME retailerName, ro.ORDERNUMBER, ro.CREATEDATE, m.DESCRIPTION material, c.CODE customerCode, 
									c.CUSTOMERNAME, QUANTITY, ro.REQUIREDDATE, ro.STATUS, sg.NAME salesGroupName, sg.code salesGroupCode FROM
									CUSTOMER C, MATERIAL M, RP_RETAILER_ORDER RO, RP_RETAILER R, SALESGROUP sg, RP_RETAILER_SALESGROUP rsg
									 where sg.ID=rsg.SALESGROUPID and 
									rsg.RETAILERID = ro.RETAILERID and ro.RETAILERID = r.ID and ro.MATERIALID = m.ID  and ro.CUSTOMERID=c.ID and c.salesofficeid=? order 
									by ro.CREATEDATE Desc" />

				<entry key="GET_RETAILER_STOCK_REPORT_BY_SALES_OFFICE"
					value="Select r.CODE retailerCode, r.NAME retailerName, rs.STOCK_DATE stockDate, rs.TOTAL_CEMENT_STOCK totalStock,
										 rs.AMBUJA_CEMENT_STOCK productStock, sg.name tsoName
										from SALESGROUP sg, RP_RETAILER_SALESGROUP rsg, RP_RETAILER r, RP_RETAILER_STOCKUPDATE rs 
										where sg.ID =rsg.SALESGROUPID and r.ID = rs.RETAILERID and rs.id=rsg.retailerid and r.salesofficeid=? order by STOCK_DATE DESC" />
				<entry key="INSERT_CUSTOMER_LOYALTY_POINTS"
					value="INSERT INTO CUSTOMER_LOYALTY_POINTS (CUSTOMER_CODE, COMPANY, CUMULATIVE_POINTS, LAST_UPDATED,CREATEDATE, CREATEDBY)
													VALUES (?,?,?,?,?,?)" />

				<entry key="INSERT_BATCH_RUN_LOG"
					value="INSERT INTO BATCH_RUN_LOG (CREATEDATE, UPDATEDATE, BATCH_START_DATE, BATCH_END_DATE, BATCH_TYPE, RUN_STEP, 
											BATCH_STATUS, BATCH_COMMENTS) VALUES (?,?,?,?,?,?,?,?)" />
				<entry key="GET_CUSTOMER_LOYALTY_POINTS_BY_CODE"
					value="SELECT CUMULATIVE_POINTS CUMULATIVEPOINTS, UPDATEDATE updatedDate, createdate createdDate 
										FROM CUSTOMER_LOYALTY_POINTS
										WHERE CUSTOMER_CODE=?" />
				<entry key="UPDATE_CUSTOMER_LOYALTY_POINTS"
					value="UPDATE CUSTOMER_LOYALTY_POINTS SET CUMULATIVE_POINTS=?, LAST_UPDATED=?, UPDATEDATE=? WHERE CUSTOMER_CODE=?" />

				<entry key="GET_CUSTOMER_ACTIVE_INACTIVE_COUNT"
					value="select count(cu.id) from CUSTOMER cu
													LEFT JOIN CUSTOMERGROUP cg ON cg.ID = cu.CUSTOMERGROUPID
													LEFT JOIN ENTERPRISE enterprise ON enterprise.id = cg.enterpriseid
													LEFT JOIN Company companyLkd ON companyLkd.ID = enterprise.companyId
													WHERE companyLkd.ID=? AND cu.ACCESSPORTAL=? and cu.ISDELETED = 0 and cu.SALESPROMOTER = 0" />

				<entry key="GET_ACL_ACTIVE_CUSTOMERS_COUNT_BY_LOGIN_DURATION"
					value="select count(DISTINCT(CODE)) from GET_ACL_ACTIVE_CUSTOMERS 
													" />

				<entry key="GET_ACC_ACTIVE_CUSTOMERS_COUNT_BY_LOGIN_DURATION"
					value="select count(DISTINCT(CODE)) from GET_ACC_ACTIVE_CUSTOMERS 
													" />

				<entry
					key="GET_ACL_INACTIVE_CUSTOMERS_COUNT_BY_LOGIN_DURATION"
					value="select count(DISTINCT(CODE)) from GET_ACL_CUSTOMERS 
													WHERE CODE NOT IN (SELECT DISTINCT(CODE) FROM GET_ACL_ACTIVE_CUSTOMERS)" />

				<entry
					key="GET_ACC_INACTIVE_CUSTOMERS_COUNT_BY_LOGIN_DURATION"
					value="select count(DISTINCT(CODE)) from GET_ACC_CUSTOMERS 
													WHERE CODE NOT IN (SELECT DISTINCT(CODE) FROM GET_ACC_ACTIVE_CUSTOMERS)" />

				<entry key="GET_ACL_ACTIVE_CUSTOMERS_BY_DURATION"
					value="select DISTINCT(CODE), CUSTOMERNAME, CREATEDATE,
													salesOfficeCode, salesOffice,
													salesUnitCode, salesUnit,
													salesRegionCode, salesRegion,
													city, state,
													distChannel FROM GET_ACL_ACTIVE_CUSTOMERS" />

				<entry key="GET_ACC_ACTIVE_CUSTOMERS_BY_DURATION"
					value="select DISTINCT(CODE), CUSTOMERNAME, CREATEDATE,
													salesOfficeCode, salesOffice,
													salesUnitCode, salesUnit,
													salesRegionCode, salesRegion,
													city, state,
													distChannel FROM GET_ACC_ACTIVE_CUSTOMERS" />

				<entry key="GET_ACL_INACTIVE_CUSTOMERS_BY_DURATION"
					value="select DISTINCT(CODE), CUSTOMERNAME, CREATEDATE,
													salesOfficeCode, salesOffice,
													salesUnitCode, salesUnit,
													salesRegionCode, salesRegion,
													city, state,
													distChannel FROM GET_ACL_CUSTOMERS WHERE CODE NOT IN (
														SELECT DISTINCT(CODE) FROM GET_ACL_ACTIVE_CUSTOMERS
													)" />

				<entry key="GET_ACC_INACTIVE_CUSTOMERS_BY_DURATION"
					value="select DISTINCT(CODE), CUSTOMERNAME, CREATEDATE,
													salesOfficeCode, salesOffice,
													salesUnitCode, salesUnit,
													salesRegionCode, salesRegion,
													city, state,
													distChannel FROM GET_ACC_CUSTOMERS WHERE CODE NOT IN (
														SELECT DISTINCT(CODE) FROM GET_ACC_ACTIVE_CUSTOMERS
													)" />

				<entry key="GET_TOTAL_CUSTOMERS_COUNT"
					value="SELECT COUNT(DISTINCT(CU.CODE)) FROM CUSTOMER CU where  cu.ISDELETED = 0 and cu.SALESPROMOTER = 0" />

				<!-- <entry key="GET_REGISTERED_CUSTOMERS_COUNT" value="select count(distinct(custuser.customerid)) 
					FROM CUSTOMER cu LEFT JOIN customeruser custuser ON cu.ID = custuser.CUSTOMERID 
					LEFT JOIN CUSTOMERGROUP cg on cg.ID = cu.CUSTOMERGROUPID LEFT JOIN ENTERPRISE 
					enterprise ON enterprise.id = cg.enterpriseid LEFT JOIN Company companyLkd 
					ON companyLkd.ID = enterprise.companyId where companyLkd.id=? and cu.ISDELETED 
					= 0 and cu.SALESPROMOTER = 0 AND cu.CREATEDATE > '2017-06-26'"/> -->

				<entry key="GET_ACL_CUSTOMERS_REGISTERED_COUNT"
					value="SELECT COUNT(DISTINCT(CODE)) FROM GET_ACL_REGISTERED_USERS" />

				<entry key="GET_ACC_CUSTOMERS_REGISTERED_COUNT"
					value="SELECT COUNT(DISTINCT(CODE)) FROM GET_ACC_REGISTERED_USERS" />

				<entry key="GET_ACL_REGISTERED_CUSTOMERS"
					value="SELECT DISTINCT(CODE), CUSTOMERNAME,
													salesOfficeCode, salesOffice,
													salesUnitCode, salesUnit,
													salesRegionCode, salesRegion,
													city, state,
													customerType FROM GET_ACL_REGISTERED_USERS" />

				<entry key="GET_ACC_REGISTERED_CUSTOMERS"
					value="SELECT DISTINCT(CODE), CUSTOMERNAME,
													salesOfficeCode, salesOffice,
													salesUnitCode, salesUnit,
													salesRegionCode, salesRegion,
													city, state,
													customerType FROM GET_ACC_REGISTERED_USERS" />

				<entry key="GET_CUSTOMER_LOGIN_COUNT_CURRENT_DAY"
					value="select COUNT(DISTINCT(CU.ID)) FROM CUSTOMER CU
													LEFT JOIN CUSTOMERUSER cuser ON cuser.CUSTOMERID=CU.ID
													LEFT JOIN USERLOGINTRACKER ult ON ult.USERID = cuser.ID
													LEFT JOIN CUSTOMERGROUP cg on cg.ID = cu.CUSTOMERGROUPID
													LEFT JOIN ENTERPRISE enterprise ON enterprise.id = cg.enterpriseid
													LEFT JOIN Company companyLkd ON companyLkd.ID = enterprise.companyId
													WHERE companyLkd.id= ? and ult.LOGINTIME > ?" />

				<entry key="GET_CUSTOMER_BY_CURRENT_DAY_LOGIN"
					value="select DISTINCT(cu.CODE), cu.CUSTOMERNAME,
													soffice.code as salesOfficeCode, soffice.name as salesOffice,
													sUnit.code as salesUnitCode, sUnit.name as salesUnit,
													sRegion.code as salesRegionCode, sRegion.name as salesRegion,
													location.city, location.STATEPROV state,
													cg.code as customerType
													FROM CUSTOMER CU
													LEFT JOIN CUSTOMERUSER cuser ON cuser.CUSTOMERID=CU.ID
													LEFT JOIN USERLOGINTRACKER ult ON ult.USERID = cuser.ID
													LEFT JOIN CUSTOMERGROUP cg on cg.ID = cu.CUSTOMERGROUPID
													LEFT JOIN ENTERPRISE enterprise ON enterprise.id = cg.enterpriseid
													LEFT JOIN Company companyLkd ON companyLkd.ID = enterprise.companyId
													LEFT JOIN CONTACT contact ON cu.MAINCONTACTID=contact.ID
													LEFT JOIN ADDRESS address ON contact.ADDRESSID=address.ID
													LEFT JOIN LOCATION location ON address.LOCATIONID=location.ID	
													LEFT JOIN SALESOFFICE soffice ON soffice.ID = cu.SALESOFFICEID
													LEFT JOIN SALESUNIT sUnit ON sUnit.ID = soffice.SALESUNITID
													LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID	
													WHERE companyLkd.id= ? and ult.LOGINTIME > ?" />

				<entry key="GET_USERS_LOCKED_COUNT"
					value="select COUNT(u.LOGINID)
													from CUSTOMER cu
													LEFT JOIN CUSTOMERUSER cuser ON cuser.CUSTOMERID=cu.ID
													LEFT JOIN [USER] u on u.USER_ID = cuser.ID
													LEFT JOIN USERLOGINDETAILS uld ON uld.USER_ID=u.USER_ID
													LEFT JOIN CUSTOMERGROUP cg ON cg.ID = cu.CUSTOMERGROUPID
													LEFT JOIN ENTERPRISE enterprise ON enterprise.id = cg.enterpriseid
													LEFT JOIN Company companyLkd ON companyLkd.ID = enterprise.companyId	
													WHERE uld.locked=1 and companyLkd.ID=?  and cu.ISDELETED = 0 and cu.SALESPROMOTER = 0" />

				<entry key="GET_HUMRAHI_USER_BY_MOBILE"
					value="select * from LEAD_USER where MOBILE_NUMBER = ?" />

				<entry key="GET_CUSTOMER_COMPANY_ID_BY_MOBILE"
					value="select CU.ID, C.COMPANYID COMPANYCODE, CU.ACCESSPORTAL
			FROM COMPANY C, ENTERPRISE E, CUSTOMERGROUP CG, CUSTOMER CU, CONTACT CO 
			WHERE CU.CUSTOMERGROUPID=CG.ID AND CG.ENTERPRISEID = E.ID AND E.COMPANYID=C.ID 
			AND CU.MAINCONTACTID=CO.ID AND CO.MOBILE=?" />

				<entry key="GET_HUMRAHI_USER_ROLE_BY_NAME"
					value="SELECT id, role_description, role_name from EMPLOYEE_ROLE where ROLE_NAME=?" />

				<entry key="GET_HUMRAHI_USER_ROLE_BY_ID"
					value="SELECT id, role_description, role_name from EMPLOYEE_ROLE where ID=?" />

				<entry key="GET_HUMRAHI_USER_MOBILE_DETAILS"
					value="select * from LEADS_USER_PHONE_AUTHENTICATION WHERE LEAD_USER=? AND USER_ROLE=?" />

				<entry key="UPDATE_HUMRAHI_USER_MOBILE_DETAILS"
					value="update LEADS_USER_PHONE_AUTHENTICATION set IMEI_NUMBER=?, UPDATEDATE=?, AUTHENTICATION_KEY=?, MTOKEN=? WHERE LEAD_USER=? AND USER_ROLE=?" />

				<entry key="ADD_HUMRAHI_USER_MOBILE_DETAILS"
					value="insert into LEADS_USER_PHONE_AUTHENTICATION (LEAD_USER, IMEI_NUMBER, AUTHENTICATION_KEY, CREATEDATE, ENTITY_UID, USER_ROLE, MTOKEN) VALUES
													(?,?,?,?,?,?,?)" />

				<entry key="FIND_HUMRAHI_USER_BY_ID"
					value="select id, name, employee_id employeeId, email, mobile_number mobileNumber, company_code companyCode, role from LEAD_USER where id=?" />

				<entry key="IS_HUMRAHI_USER_OTP_EXISTS"
					value="select * from LEAD_USER_OTP where user_id=? and role_id=?" />

				<entry key="ADD_HUMRAHI_USER_OTP"
					value="insert into LEAD_USER_OTP (user_id, role_id, otp, createdate, updatedate, isused) values (?,?,?,?,?,?)" />

				<entry key="UPDATE_HUMRAHI_USER_OTP"
					value="update LEAD_USER_OTP set otp=?, updatedate=?, isused=? where user_id=? and role_id=?" />

				<entry key="GET_HUMRAHI_USER_OTP"
					value="select id, otp, isused from LEAD_USER_OTP where user_id=? and role_id=?" />

				<entry key="DISABLE_HUMRAHI_USER_OTP"
					value="update LEAD_USER_OTP set isused=? where id=?" />

				<entry key="GET_HUMRAHI_USER_MOBILE_DETAILS"
					value="select IMEI_NUMBER imei, AUTHENTICATION_KEY authenticationKey, MTOKEN gcmToken FROM LEADS_USER_PHONE_AUTHENTICATION WHERE LEAD_USER=? AND USER_ROLE=?" />



				<!-- <entry key="SEARCH_USER_LAST_LOGIN_Report" value="select cu.CODE 
					as customerCode, cu.CUSTOMERNAME as customerName, soffice.code as salesOfficeCode, 
					soffice.name as salesOfficeName, sUnit.code as salesUnitCode, sUnit.name 
					as salesUnitName, sRegion.code as salesRegionCode, sRegion.name as salesRegionName, 
					location.city, location.STATEPROV state, cg.code as customerType, USERlKD.loginId, 
					loginDetails.lastloginsuccess FROM CUSTOMER cu LEFT JOIN customeruser custuser 
					ON cu.ID = custuser.CUSTOMERID LEFT JOIN [user] userLkd ON custuser.ID = 
					userLkd.user_id LEFT JOIN userLoginDetails loginDetails ON userLkd.user_id=loginDetails.user_id 
					LEFT JOIN CUSTOMERGROUP cg ON cg.ID = cu.CUSTOMERGROUPID LEFT JOIN ENTERPRISE 
					enterprise ON enterprise.id = cg.enterpriseid LEFT JOIN Company companyLkd 
					ON companyLkd.ID = enterprise.companyId LEFT JOIN CONTACT contact ON cu.MAINCONTACTID=contact.ID 
					LEFT JOIN ADDRESS address ON contact.ADDRESSID=address.ID LEFT JOIN LOCATION 
					location ON address.LOCATIONID=location.ID LEFT JOIN SALESOFFICE soffice 
					ON soffice.ID = cu.SALESOFFICEID LEFT JOIN SALESUNIT sUnit ON sUnit.ID = 
					soffice.SALESUNITID LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID 
					where loginDetails.lastloginsuccess BETWEEN ? AND ? and (cg.NAME like ? OR 
					cg.CODE like ?) and (soffice.NAME like ? OR soffice.CODE like ?) and (sRegion.NAME 
					like ? OR sRegion.CODE like ? ) and (sUnit.NAME like ? OR sUnit.CODE like 
					?) and (cu.CUSTOMERNAME like ? or cu.code like ?) and (location.city like 
					?) and (cu.ACCESSPORTAL LIKE ?) and companyLkd.ID = ? ORDER BY CU.CUSTOMERNAME"/> -->

				<entry key="SEARCH_USER_LAST_LOGIN_Report"
					value="select loginDetails.USER_ID as userId,u.GIVENNAME as firstName,u.FAMILYNAME as lastName,contact.EMAIL as email,cu.CODE as customerCode, cu.CUSTOMERNAME as customerName,rm.role_name as customerType, u.loginId, loginDetails.lastloginsuccess
					FROM CUSTOMER cu LEFT JOIN customeruser custuser ON cu.ID = custuser.CUSTOMERID
					LEFT JOIN [user] u on custuser.ID=u.user_id
					LEFT JOIN userLoginDetails loginDetails ON u.user_id=loginDetails.user_id 
					LEFT JOIN CONTACT contact ON u.mainContactId=contact.ID 
					left Join user_role ur on u.user_id=ur.user_id
					left Join role_master rm on ur.role_id=rm.role_id
					where loginDetails.USER_ID is not null " />
				<entry key="SEARCH_EMPLOYEES_LAST_LOGIN_ROPORT"
					value="select loginDetails.USER_ID as userId,u.GIVENNAME as firstName,u.FAMILYNAME as lastName,contact.EMAIL as email,e.EMPLOYEECODE as customerCode,u.GIVENNAME as customerName,rm.role_name as customerType, u.loginId, loginDetails.lastloginsuccess
					FROM EMPLOYEE e 
					LEFT JOIN [user] u on e.ID=u.user_id
					LEFT JOIN userLoginDetails loginDetails ON u.user_id=loginDetails.user_id 
					LEFT JOIN CONTACT contact ON u.mainContactId=contact.ID 
					left Join user_role ur on u.user_id=ur.user_id
					left Join role_master rm on ur.role_id=rm.role_id
					where loginDetails.USER_ID is not null
					" />

				<!-- <entry key="SEARCH_USER_NO_LOGIN_HISTORY_Report" value="select cu.CODE 
					as customerCode, cu.CUSTOMERNAME as customerName, soffice.code as salesOfficeCode, 
					soffice.name as salesOfficeName, sUnit.code as salesUnitCode, sUnit.name 
					as salesUnitName, sRegion.code as salesRegionCode, sRegion.name as salesRegionName, 
					location.city, location.STATEPROV state, cg.code as customerType FROM CUSTOMER 
					cu LEFT JOIN CUSTOMERGROUP cg ON cg.ID = cu.CUSTOMERGROUPID LEFT JOIN ENTERPRISE 
					enterprise ON enterprise.id = cg.enterpriseid LEFT JOIN Company companyLkd 
					ON companyLkd.ID = enterprise.companyId LEFT JOIN CONTACT contact ON cu.MAINCONTACTID=contact.ID 
					LEFT JOIN ADDRESS address ON contact.ADDRESSID=address.ID LEFT JOIN LOCATION 
					location ON address.LOCATIONID=location.ID LEFT JOIN SALESOFFICE soffice 
					ON soffice.ID = cu.SALESOFFICEID LEFT JOIN SALESUNIT sUnit ON sUnit.ID = 
					soffice.SALESUNITID LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID 
					WHERE (cg.NAME like ? OR cg.CODE like ?) and (soffice.NAME like ? OR soffice.CODE 
					like ?) and (sRegion.NAME like ? OR sRegion.CODE like ? ) and (sUnit.NAME 
					like ? OR sUnit.CODE like ?) and (cu.CUSTOMERNAME like ? or cu.code like 
					?) and (location.city LIKE ?) and (cu.ACCESSPORTAL LIKE ?) and companyLkd.ID 
					= ? and cu.CODE NOT IN ( select DISTINCT(cu.CODE) FROM CUSTOMER cu LEFT JOIN 
					customeruser custuser ON cu.ID = custuser.CUSTOMERID LEFT JOIN [user] userLkd 
					ON custuser.ID = userLkd.user_id INNER JOIN Company companyLkd ON companyLkd.ID 
					= userLkd.companyId LEFT JOIN userLoginDetails loginDetails ON userLkd.user_id=loginDetails.user_id 
					LEFT JOIN userLoginTracker loginTracker ON loginTracker.USERID = loginDetails.user_id 
					where loginTracker.logintime BETWEEN ? AND ? AND companyLkd.ID = ? ) ORDER 
					BY CU.CUSTOMERNAME"/> -->

				<entry key="SEARCH_USER_NO_LOGIN_HISTORY_Report"
					value="select  u.USER_ID as userId,u.GIVENNAME as firstName,u.FAMILYNAME as lastName,contact.EMAIL as email,
					cu.CODE as customerCode, cu.CUSTOMERNAME as customerName,rm.role_name as customerType, u.loginId
					FROM CUSTOMER cu LEFT JOIN customeruser custuser ON cu.ID = custuser.CUSTOMERID
					LEFT JOIN [user] u on custuser.ID=u.user_id LEFT JOIN CONTACT contact ON u.MAINCONTACTID=contact.ID
					left Join user_role ur on u.user_id=ur.user_id left Join role_master rm on ur.role_id=rm.role_id
					WHERE u.user_id NOT IN ( select DISTINCT(loginTracker.USERID) FROM userLoginTracker loginTracker
					LEFT JOIN [user] u ON u.user_id=loginTracker.USERID " />
				<entry key="SEARCH_EMPLOYEE_NO_LOGIN_HISTORY_Report"
					value="select  u.USER_ID as userId,u.GIVENNAME as firstName,u.FAMILYNAME as lastName,contact.EMAIL as email,
					e.EMPLOYEECODE as customerCode, u.GIVENNAME as customerName,rm.role_name as customerType, u.loginId
					FROM EMPLOYEE e 
					LEFT JOIN [user] u on e.ID=u.user_id LEFT JOIN CONTACT contact ON u.mainContactId=contact.ID
					left Join user_role ur on u.user_id=ur.user_id left Join role_master rm on ur.role_id=rm.role_id
					WHERE u.user_id NOT IN ( select DISTINCT(loginTracker.USERID) FROM userLoginTracker loginTracker
					LEFT JOIN [user] u ON u.user_id=loginTracker.USERID " />

				<!-- <entry key="SEARCH_USER_LOGIN_HISTORY_Report" value="select cu.CODE 
					as customerCode, cu.CUSTOMERNAME as customerName, soffice.code as salesOfficeCode, 
					soffice.name as salesOfficeName, sUnit.code as salesUnitCode, sUnit.name 
					as salesUnitName, sRegion.code as salesRegionCode, sRegion.name as salesRegionName, 
					location.city, location.STATEPROV as state, cg.code as customerType, USERlKD.loginId, 
					loginTracker.logintime as loginDateAndTime FROM CUSTOMER cu LEFT JOIN customeruser 
					custuser ON cu.ID = custuser.CUSTOMERID LEFT JOIN [user] userLkd ON custuser.ID 
					= userLkd.user_id LEFT JOIN userLoginDetails loginDetails ON userLkd.user_id=loginDetails.user_id 
					LEFT JOIN userLoginTracker loginTracker ON loginTracker.USERID = loginDetails.user_id 
					LEFT JOIN CUSTOMERGROUP cg on cg.ID = cu.CUSTOMERGROUPID LEFT JOIN ENTERPRISE 
					enterprise ON enterprise.id = cg.enterpriseid LEFT JOIN Company companyLkd 
					ON companyLkd.ID = enterprise.companyId LEFT JOIN CONTACT contact ON cu.MAINCONTACTID=contact.ID 
					LEFT JOIN ADDRESS address ON contact.ADDRESSID=address.ID LEFT JOIN LOCATION 
					location ON address.LOCATIONID=location.ID LEFT JOIN SALESOFFICE soffice 
					ON soffice.ID = cu.SALESOFFICEID LEFT JOIN SALESUNIT sUnit ON sUnit.ID = 
					soffice.SALESUNITID LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID 
					where loginTracker.logintime BETWEEN ? AND ? and (cg.NAME like ? OR cg.CODE 
					like ?) and (soffice.NAME like ? OR soffice.CODE like ?) and (sRegion.NAME 
					like ? OR sRegion.CODE like ? ) and (sUnit.NAME like ? OR sUnit.CODE like 
					?) and (cu.CUSTOMERNAME like ? or cu.code like ?) and (location.city like 
					?) and (cu.ACCESSPORTAL LIKE ?) and companyLkd.ID = ? ORDER BY CU.CUSTOMERNAME, 
					loginTracker.logintime desc"/> -->

				<entry key="SEARCH_USER_LOGIN_HISTORY_Report"
					value="select loginTracker.USERID as userId,u.GIVENNAME as firstName,u.FAMILYNAME as lastName,contact.EMAIL as email,
					cu.CODE as customerCode, cu.CUSTOMERNAME as customerName,rm.role_name as customerType, u.loginId, loginTracker.logintime as loginDateAndTime
					FROM CUSTOMER cu LEFT JOIN customeruser custuser ON cu.ID = custuser.CUSTOMERID
					LEFT JOIN [user] u on custuser.ID=u.user_id
					LEFT JOIN userLoginTracker loginTracker ON loginTracker.USERID = u.user_id
					LEFT JOIN CONTACT contact ON u.mainContactId=contact.ID 
					left Join user_role ur on u.user_id=ur.user_id
					left Join role_master rm on ur.role_id=rm.role_id
					where loginTracker.USERID is not null " />
				<entry key="SEARCH_EMPLOYEE_LOGIN_HISTORY_Report"
					value="select loginTracker.USERID as userId,u.GIVENNAME as firstName,u.FAMILYNAME as lastName,contact.EMAIL as email,
					e.EMPLOYEECODE as customerCode, u.GIVENNAME as customerName,rm.role_name as customerType, u.loginId, loginTracker.logintime as loginDateAndTime
					FROM employee e 
					LEFT JOIN [user] u on e.ID=u.user_id
					LEFT JOIN userLoginTracker loginTracker ON loginTracker.USERID = u.user_id
					LEFT JOIN CONTACT contact ON u.mainContactId=contact.ID 
					left Join user_role ur on u.user_id=ur.user_id
					left Join role_master rm on ur.role_id=rm.role_id
					where loginTracker.USERID is not null  " />

				<!-- <entry key="SEARCH_USERS_REGISTRATION_Report" value="select cu.CODE 
					as customerCode, cu.CUSTOMERNAME as customerName, soffice.code as salesOfficeCode, 
					soffice.name as salesOfficeName, sUnit.code as salesUnitCode, sUnit.name 
					as salesUnitName, sRegion.code as salesRegionCode, sRegion.name as salesRegionName, 
					location.city, location.STATEPROV as state, cg.code as customerType, 'Yes' 
					as uploadStatus, CASE WHEN cu.ACCESSPORTAL=1 THEN 'Yes' ELSE 'No' END portalActive, 
					count(custuser.id) as usersCount FROM CUSTOMER cu LEFT JOIN customeruser 
					custuser ON cu.ID = custuser.CUSTOMERID LEFT JOIN CUSTOMERGROUP cg on cg.ID 
					= cu.CUSTOMERGROUPID LEFT JOIN ENTERPRISE enterprise ON enterprise.id = cg.enterpriseid 
					LEFT JOIN Company companyLkd ON companyLkd.ID = enterprise.companyId LEFT 
					JOIN CONTACT contact ON cu.MAINCONTACTID=contact.ID LEFT JOIN ADDRESS address 
					ON contact.ADDRESSID=address.ID LEFT JOIN LOCATION location ON address.LOCATIONID=location.ID 
					LEFT JOIN SALESOFFICE soffice ON soffice.ID = cu.SALESOFFICEID LEFT JOIN 
					SALESUNIT sUnit ON sUnit.ID = soffice.SALESUNITID LEFT JOIN SALESREGION sRegion 
					ON sRegion.ID = sUnit.SALESREGIONID where (cg.NAME like ? OR cg.CODE like 
					?) and (soffice.NAME like ? OR soffice.CODE like ?) and (sRegion.NAME like 
					? OR sRegion.CODE like ? ) and (sUnit.NAME like ? OR sUnit.CODE like ?) and 
					(cu.CUSTOMERNAME like ? or cu.code like ?) and (location.city like ?) and 
					(cu.ACCESSPORTAL LIKE ?) and companyLkd.ID = ? group by cu.code, cu.customername, 
					soffice.code, soffice.name, sUnit.code, sUnit.name, sRegion.code, sRegion.name, 
					location.city, location.STATEPROV, cg.code, cu.ACCESSPORTAL order by cu.CUSTOMERNAME" 
					/> -->

				<entry key="SEARCH_USERS_REGISTRATION_Report"
					value="select cu.CODE as customerCode, cu.CUSTOMERNAME as customerName, 
													soffice.code as salesOfficeCode, soffice.name as salesOfficeName,
													sUnit.code as salesUnitCode, sUnit.name as salesUnitName,
													sRegion.code as salesRegionCode, sRegion.name as salesRegionName,
													location.city, location.STATEPROV as state,
													cg.code as customerType, 'Yes' as uploadStatus, 
													CASE WHEN cu.ACCESSPORTAL=1 THEN 'Yes' ELSE 'No' END portalActive,
													count(custuser.id) as usersCount
													FROM CUSTOMER cu
													LEFT JOIN customeruser custuser ON cu.ID = custuser.CUSTOMERID	
													LEFT JOIN CUSTOMERGROUP cg on cg.ID = cu.CUSTOMERGROUPID
													LEFT JOIN ENTERPRISE enterprise ON enterprise.id = cg.enterpriseid
													LEFT JOIN Company companyLkd ON companyLkd.ID = enterprise.companyId
													LEFT JOIN CONTACT contact ON cu.MAINCONTACTID=contact.ID
													LEFT JOIN ADDRESS address ON contact.ADDRESSID=address.ID
													LEFT JOIN LOCATION location ON address.LOCATIONID=location.ID	
													LEFT JOIN SALESOFFICE soffice ON soffice.ID = cu.SALESOFFICEID
													LEFT JOIN SALESUNIT sUnit ON sUnit.ID = soffice.SALESUNITID
													LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID
													where													
													companyLkd.ID = ? " />

				<entry key="SEARCH_SHIP_TO_PARTY_LIST_FOR_CUSTOMER"
					value="select s.CITYNAME as cityName from SHIPTOPARTY s where s.SHIPTOCODE = ?" />


				<entry key="GET_SHIP_TO_PARTY_REQUEST_LIST_BY_CUSTOMER_CODE"
					value="SELECT ID, SOLDTOCODE, SHIPTOCODE, CREATEDBY, CREATEDATE, UPDATEDBY, UPDATEDATE,
																	STATUS, NAME, ADDRESS1, ADDRESS2, CITY, TALUKA, DISTRICT, LANDMARK, STATE, PIN pinCode, PHONENUMBER, MOBILENUMBER,GSTNUMBER
																	FROM SHIPTOPARTYREQUEST WHERE SOLDTOCODE=? order by id desc" />

				<entry key="INSERT_SHIP_TO_PARTY_REQUEST"
					value="insert into SHIPTOPARTYREQUEST (ID, SOLDTOCODE, CREATEDBY, CREATEDATE, STATUS, NAME, ADDRESS1, ADDRESS2, CITY, 
													TALUKA, DISTRICT, LANDMARK, STATE, PIN, PHONENUMBER, MOBILENUMBER,GSTNUMBER) 
													VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)" />

				<entry key="GET_SHIP_TO_PARTY_REQUEST_LIST_SO"
					value="SELECT cust.CUSTOMERNAME, request.ID, request.SOLDTOCODE, request.SHIPTOCODE, request.CREATEDBY, request.CREATEDATE, request.UPDATEDBY, request.UPDATEDATE,
													request.STATUS, request.NAME, request.ADDRESS1, request.ADDRESS2, request.CITY, request.TALUKA, request.DISTRICT, request.LANDMARK, request.STATE,
													request.PIN pinCode, request.PHONENUMBER, request.MOBILENUMBER,request.GSTNUMBER
													FROM SHIPTOPARTYREQUEST request
													LEFT JOIN CUSTOMER cust ON  cust.code = request.soldtocode
													where cust.salesofficeid=? and 
													request.status like ? and
													(cust.CUSTOMERNAME like ? or cust.code like ?)" />

				<entry key="APPROVE_REJECT_SHIP_TO_PARTY_REQUEST"
					value="update SHIPTOPARTYREQUEST SET STATUS = ?, REMARKS = ? , SHIPTOCODE = ?, UPDATEDBY = ? , UPDATEDATE = ? WHERE ID=?" />

				<entry key="GET_SHIP_TO_PARTY_BY_SHIP_TO_CODE"
					value="SELECT shiptoparty.id,shiptoparty.SOLDTOCODE,shiptoparty.SHIPTOCODE,shiptoparty.ADDRESS,shiptoparty.STREETSIDE,shiptoparty.HOUSENUMBER,shiptoparty.CITYCODE,shiptoparty.CITYNAME,shiptoparty.STREETNAME,shiptoparty.DISTRICT,shiptoparty.POSTALCODE,shiptoparty.STATE,shiptoparty.SALESORG,shiptoparty.DISTCHANNEL,shiptoparty.DIVISION,shiptoparty.PARTNERFUNCTION,shiptoparty.BLOCKSTATUS,shiptoparty.CREATEDATE,shiptoparty.UPDATEDATE
                                        FROM shiptoparty 
                                        where shiptoparty.SOLDTOCODE = ? AND shiptoparty.SHIPTOCODE = ?" />

				<entry key="GET_ACTIVE_INACTIVE_CUSTOMERS"
					value="select cu.CODE, cu.CUSTOMERNAME, 
										soffice.code as salesOfficeCode, soffice.name as salesOffice,
										sUnit.code as salesUnitCode, sUnit.name as salesUnit,
										sRegion.code as salesRegionCode, sRegion.name as salesRegion,
										location.city, location.STATEPROV state,
										cg.code as distChannel
										from CUSTOMER cu
										LEFT JOIN CUSTOMERGROUP cg ON cg.ID = cu.CUSTOMERGROUPID
										LEFT JOIN ENTERPRISE enterprise ON enterprise.id = cg.enterpriseid
										LEFT JOIN Company companyLkd ON companyLkd.ID = enterprise.companyId
										LEFT JOIN CONTACT contact ON cu.MAINCONTACTID=contact.ID
										LEFT JOIN ADDRESS address ON contact.ADDRESSID=address.ID
										LEFT JOIN LOCATION location ON address.LOCATIONID=location.ID	
										LEFT JOIN SALESOFFICE soffice ON soffice.ID = cu.SALESOFFICEID
										LEFT JOIN SALESUNIT sUnit ON sUnit.ID = soffice.SALESUNITID
										LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID	
										WHERE companyLkd.ID=? AND cu.ACCESSPORTAL=?
										 and cu.ISDELETED = 0 and cu.SALESPROMOTER = 0 ORDER BY CU.CUSTOMERNAME" />

				<entry key="GET_ALL_CUSTOMERS_LIST"
					value="select cu.CODE, cu.CUSTOMERNAME, 
										soffice.code as salesOfficeCode, soffice.name as salesOffice,
										sUnit.code as salesUnitCode, sUnit.name as salesUnit,
										sRegion.code as salesRegionCode, sRegion.name as salesRegion,
										location.city, location.STATEPROV state,
										cg.code as distChannel
										from CUSTOMER cu
										LEFT JOIN CUSTOMERGROUP cg ON cg.ID = cu.CUSTOMERGROUPID
										LEFT JOIN ENTERPRISE enterprise ON enterprise.id = cg.enterpriseid
										LEFT JOIN Company companyLkd ON companyLkd.ID = enterprise.companyId
										LEFT JOIN CONTACT contact ON cu.MAINCONTACTID=contact.ID
										LEFT JOIN ADDRESS address ON contact.ADDRESSID=address.ID
										LEFT JOIN LOCATION location ON address.LOCATIONID=location.ID	
										LEFT JOIN SALESOFFICE soffice ON soffice.ID = cu.SALESOFFICEID
										LEFT JOIN SALESUNIT sUnit ON sUnit.ID = soffice.SALESUNITID
										LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID	
										WHERE  cu.ISDELETED = 0 and cu.SALESPROMOTER = 0 ORDER BY CU.CUSTOMERNAME" />

				<entry key="GET_ALL_LOCKED_USERS_LIST"
					value="select cu.CODE, cu.CUSTOMERNAME, u.LOGINID, 
										soffice.code as salesOfficeCode, soffice.name as salesOffice,
										sUnit.code as salesUnitCode, sUnit.name as salesUnit,
										sRegion.code as salesRegionCode, sRegion.name as salesRegion,
										location.city, location.STATEPROV state,
										cg.code as customerType
										from CUSTOMER cu
										LEFT JOIN CUSTOMERUSER cuser ON cuser.CUSTOMERID=cu.ID
										LEFT JOIN [USER] u on u.USER_ID = cuser.ID
										LEFT JOIN USERLOGINDETAILS uld ON uld.USER_ID=u.USER_ID
										LEFT JOIN CUSTOMERGROUP cg ON cg.ID = cu.CUSTOMERGROUPID
										LEFT JOIN ENTERPRISE enterprise ON enterprise.id = cg.enterpriseid
										LEFT JOIN Company companyLkd ON companyLkd.ID = enterprise.companyId
										LEFT JOIN CONTACT contact ON cu.MAINCONTACTID=contact.ID
										LEFT JOIN ADDRESS address ON contact.ADDRESSID=address.ID
										LEFT JOIN LOCATION location ON address.LOCATIONID=location.ID	
										LEFT JOIN SALESOFFICE soffice ON soffice.ID = cu.SALESOFFICEID
										LEFT JOIN SALESUNIT sUnit ON sUnit.ID = soffice.SALESUNITID
										LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID	
										WHERE uld.locked=1  and cu.ISDELETED = 0 and cu.SALESPROMOTER = 0 ORDER BY cu.CUSTOMERNAME" />

				<entry key="GET_REGISTERED_CUSTOMERS_LIST"
					value="select DISTINCT(cu.CODE), cu.CUSTOMERNAME,
										soffice.code as salesOfficeCode, soffice.name as salesOffice,
										sUnit.code as salesUnitCode, sUnit.name as salesUnit,
										sRegion.code as salesRegionCode, sRegion.name as salesRegion,
										location.city, location.STATEPROV state,
										cg.code as customerType
										from CUSTOMER cu
										INNER JOIN CUSTOMERUSER cuser ON cuser.CUSTOMERID=cu.ID	
										LEFT JOIN CUSTOMERGROUP cg ON cg.ID = cu.CUSTOMERGROUPID
										LEFT JOIN ENTERPRISE enterprise ON enterprise.id = cg.enterpriseid
										LEFT JOIN Company companyLkd ON companyLkd.ID = enterprise.companyId
										LEFT JOIN CONTACT contact ON cu.MAINCONTACTID=contact.ID
										LEFT JOIN ADDRESS address ON contact.ADDRESSID=address.ID
										LEFT JOIN LOCATION location ON address.LOCATIONID=location.ID	
										LEFT JOIN SALESOFFICE soffice ON soffice.ID = cu.SALESOFFICEID
										LEFT JOIN SALESUNIT sUnit ON sUnit.ID = soffice.SALESUNITID
										LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID	
										WHERE companyLkd.ID=?  and cu.ISDELETED = 0 and cu.SALESPROMOTER = 0 ORDER BY cu.CUSTOMERNAME" />

				<entry key="GET_NON_REGISTERED_CUSTOMERS_LIST"
					value="select DISTINCT(cu.CODE), cu.CUSTOMERNAME,
										soffice.code as salesOfficeCode, soffice.name as salesOffice,
										sUnit.code as salesUnitCode, sUnit.name as salesUnit,
										sRegion.code as salesRegionCode, sRegion.name as salesRegion,
										location.city, location.STATEPROV state,
										cg.code as customerType
										from CUSTOMER cu
										LEFT JOIN CUSTOMERUSER cuser ON cuser.CUSTOMERID=cu.ID	
										LEFT JOIN CUSTOMERGROUP cg ON cg.ID = cu.CUSTOMERGROUPID
										LEFT JOIN ENTERPRISE enterprise ON enterprise.id = cg.enterpriseid
										LEFT JOIN Company companyLkd ON companyLkd.ID = enterprise.companyId
										LEFT JOIN CONTACT contact ON cu.MAINCONTACTID=contact.ID
										LEFT JOIN ADDRESS address ON contact.ADDRESSID=address.ID
										LEFT JOIN LOCATION location ON address.LOCATIONID=location.ID	
										LEFT JOIN SALESOFFICE soffice ON soffice.ID = cu.SALESOFFICEID
										LEFT JOIN SALESUNIT sUnit ON sUnit.ID = soffice.SALESUNITID
										LEFT JOIN SALESREGION sRegion ON sRegion.ID = sUnit.SALESREGIONID	
										WHERE cu.ISDELETED = 0 and cu.SALESPROMOTER = 0 and cuser.id is NULL ORDER BY cu.CUSTOMERNAME" />

				<entry key="GET_LEADS_FOR_SO"
					value="select LEAD.ID, LEAD.LEADNUMBER, LEAD.STATUS, LEAD.TENDERNUMBER, LEAD.TENDERVALUE, LEAD.TENDERDATE, LEAD.CLOSINGDATE,
										LEAD.CEMENTVALUE, LEAD.DISTRICT, LEAD.STATE, LEAD.PINCODE, LEAD.CREATEDATE, LEAD.UPDATEDATE,
										LEAD.AGENCY, LEAD.CONSTRUCTION_ADDRESS, LEAD.CONTRACTOR,
										AGENCY.ID AGENCY_ID, AGENCY.AGENCY_NAME, AGENCY.ISSUE_OFFICE, AGENCY.ADDRESS_LINE_ONE, AGENCY.ADDRESS_LINE_TWO, AGENCY.ADDRESS_LINE_THREE, AGENCY.AGENCY_CONTACT_NUMBER, AGENCY.SITE_ENGINEER, AGENCY.EX_ENGINEER, AGENCY.JR_ENGINEER,
										CONTRACTOR.ID CONTRACTOR_ID, CONTRACTOR.NAME CONTRACTOR_NAME, CONTRACTOR.CONTACTNUMBER, CONTRACTOR.ADDRESS CONTRACTOR_ADDRESS, CONTRACTOR.CITY CONTRACTOR_CITY, CONTRACTOR.PINCODE CONTRACTOR_PINCODE,
										CONSTRUCTION.ID CONSTRUCTION_ID, CONSTRUCTION.ADDRESS CONSTRUCTION_ADDR, CONSTRUCTION.CITY CONSTRUCTION_CITY, CONSTRUCTION.PINCODE CONSTRUCTION_PINCODE, CONSTRUCTION.DISTRICT_CODE, CONSTRUCTION.STATE CONSTRCUTION_STATE, LD.DISTRICT_NAME
										from LEADS LEAD, HM_EMPLOYEE SO, EMPLOYEE_DISTRICT_MAPPING ER, LEAD_CONSTRUCTION_ADDRESS CONSTRUCTION, LEAD_AGENCY AGENCY, LEAD_CONTRACTOR CONTRACTOR, LEAD_USER LU, LEAD_DISTRICTS LD
										WHERE LD.DISTRICT_CODE=CONSTRUCTION.DISTRICT_CODE AND CONSTRUCTION.ID=LEAD.CONSTRUCTION_ADDRESS AND LEAD.AGENCY = AGENCY.ID AND LEAD.CONTRACTOR = CONTRACTOR.ID
										AND CONSTRUCTION.DISTRICT_CODE=ER.DISTRICT_CODE AND ER.EMPLOYEEID=SO.ID AND 
										SO.EMPLOYEECODE=LU.EMPLOYEE_ID AND LU.ID=? AND LU.ACTIVE=1
										AND LEAD.UPDATEDATE between CONVERT(VARCHAR, ?, 103) and CONVERT(VARCHAR, ?, 103)
										AND LEAD.ID > ? ORDER BY LEAD.ID DESC	" />

				<entry key="GET_LEADS_FOR_RH"
					value="select LEAD.ID, LEAD.LEADNUMBER, LEAD.STATUS, LEAD.TENDERNUMBER, LEAD.TENDERVALUE, LEAD.TENDERDATE, LEAD.CLOSINGDATE,
										LEAD.CEMENTVALUE, LEAD.DISTRICT, LEAD.STATE, LEAD.PINCODE, LEAD.CREATEDATE, LEAD.UPDATEDATE,
										LEAD.AGENCY, LEAD.CONSTRUCTION_ADDRESS, LEAD.CONTRACTOR,
										AGENCY.ID AGENCY_ID, AGENCY.AGENCY_NAME, AGENCY.ISSUE_OFFICE, AGENCY.ADDRESS_LINE_ONE, AGENCY.ADDRESS_LINE_TWO, AGENCY.ADDRESS_LINE_THREE, AGENCY.AGENCY_CONTACT_NUMBER, AGENCY.SITE_ENGINEER, AGENCY.EX_ENGINEER, AGENCY.JR_ENGINEER,
										CONTRACTOR.ID CONTRACTOR_ID, CONTRACTOR.NAME CONTRACTOR_NAME, CONTRACTOR.CONTACTNUMBER, CONTRACTOR.ADDRESS CONTRACTOR_ADDRESS, CONTRACTOR.CITY CONTRACTOR_CITY, CONTRACTOR.PINCODE CONTRACTOR_PINCODE,
										CONSTRUCTION.ID CONSTRUCTION_ID, CONSTRUCTION.ADDRESS CONSTRUCTION_ADDR, CONSTRUCTION.CITY CONSTRUCTION_CITY, CONSTRUCTION.PINCODE CONSTRUCTION_PINCODE, CONSTRUCTION.DISTRICT_CODE, CONSTRUCTION.STATE CONSTRCUTION_STATE, LD.DISTRICT_NAME
										from LEADS LEAD, LEAD_CONSTRUCTION_ADDRESS CONSTRUCTION, LEAD_AGENCY AGENCY, LEAD_CONTRACTOR CONTRACTOR, HM_EMPLOYEE SO, EMPLOYEE_REGION_MAPPING ER, REGION_DISTRICT_MAPPING RD, LEAD_USER LU, LEAD_DISTRICTS LD
										WHERE LD.DISTRICT_CODE=CONSTRUCTION.DISTRICT_CODE AND CONSTRUCTION.ID=LEAD.CONSTRUCTION_ADDRESS  AND LEAD.AGENCY = AGENCY.ID AND LEAD.CONTRACTOR = CONTRACTOR.ID
										AND CONSTRUCTION.DISTRICT_CODE=RD.DISTRICT_CODE AND
										RD.REGION_ID=ER.REGION_ID AND ER.EMPLOYEEID=SO.ID AND SO.EMPLOYEECODE=LU.EMPLOYEE_ID AND LU.ID=? AND LU.ACTIVE=1
										AND LEAD.UPDATEDATE between CONVERT(VARCHAR, ?, 103) and CONVERT(VARCHAR, ?, 103)
										AND LEAD.ID > ? ORDER BY LEAD.ID DESC" />

				<entry key="GET_LEADS_FOR_MANAGER"
					value="select LEAD.ID, LEAD.LEADNUMBER, LEAD.STATUS, LEAD.TENDERNUMBER, LEAD.TENDERVALUE, LEAD.TENDERDATE, LEAD.CLOSINGDATE,
										LEAD.CEMENTVALUE, LEAD.DISTRICT, LEAD.STATE, LEAD.PINCODE, LEAD.CREATEDATE, LEAD.UPDATEDATE,
										LEAD.AGENCY, LEAD.CONSTRUCTION_ADDRESS, LEAD.CONTRACTOR,
										AGENCY.ID AGENCY_ID, AGENCY.AGENCY_NAME, AGENCY.ISSUE_OFFICE, AGENCY.ADDRESS_LINE_ONE, AGENCY.ADDRESS_LINE_TWO, AGENCY.ADDRESS_LINE_THREE, AGENCY.AGENCY_CONTACT_NUMBER, AGENCY.SITE_ENGINEER, AGENCY.EX_ENGINEER, AGENCY.JR_ENGINEER,
										CONTRACTOR.ID CONTRACTOR_ID, CONTRACTOR.NAME CONTRACTOR_NAME, CONTRACTOR.CONTACTNUMBER, CONTRACTOR.ADDRESS CONTRACTOR_ADDRESS, CONTRACTOR.CITY CONTRACTOR_CITY, CONTRACTOR.PINCODE CONTRACTOR_PINCODE,
										CONSTRUCTION.ID CONSTRUCTION_ID, CONSTRUCTION.ADDRESS CONSTRUCTION_ADDR, CONSTRUCTION.CITY CONSTRUCTION_CITY, CONSTRUCTION.PINCODE CONSTRUCTION_PINCODE, CONSTRUCTION.DISTRICT_CODE, CONSTRUCTION.STATE CONSTRCUTION_STATE, LD.DISTRICT_NAME
										from LEADS LEAD, HM_EMPLOYEE SO, EMPLOYEE_DISTRICT_MAPPING ER, LEAD_CONSTRUCTION_ADDRESS CONSTRUCTION, LEAD_AGENCY AGENCY, LEAD_CONTRACTOR CONTRACTOR, LEAD_DISTRICTS LD
										WHERE LD.DISTRICT_CODE=CONSTRUCTION.DISTRICT_CODE AND CONSTRUCTION.ID=LEAD.CONSTRUCTION_ADDRESS AND LEAD.AGENCY = AGENCY.ID AND LEAD.CONTRACTOR = CONTRACTOR.ID
										AND CONSTRUCTION.DISTRICT_CODE=ER.DISTRICT_CODE AND ER.EMPLOYEEID=SO.ID AND SO.ID IN
										(SELECT DISTINCT(EMMP.EMPLOYEEID) FROM HM_EMPLOYEE HME, LEAD_USER LUR, EMPLOYEE_MANAGER_MAPPING EMMP WHERE EMMP.MANAGERID=HME.ID AND HME.EMPLOYEECODE=LUR.EMPLOYEE_ID AND LUR.ID=? AND LUR.ACTIVE=1)
										AND LEAD.UPDATEDATE between CONVERT(VARCHAR, ?, 103) and CONVERT(VARCHAR, ?, 103)
										AND LEAD.ID > ? ORDER BY LEAD.ID DESC" />

				<entry key="GET_LEADS_FOR_CUSTOMER"
					value="select LEAD.ID, LEAD.LEADNUMBER, LEAD.STATUS, LEAD.TENDERNUMBER, LEAD.TENDERVALUE, LEAD.TENDERDATE, LEAD.CLOSINGDATE,
										LEAD.CEMENTVALUE, LEAD.DISTRICT, LEAD.STATE, LEAD.PINCODE, LEAD.CREATEDATE, LEAD.UPDATEDATE,
										LEAD.AGENCY, LEAD.CONSTRUCTION_ADDRESS, LEAD.CONTRACTOR,
										AGENCY.ID AGENCY_ID, AGENCY.AGENCY_NAME, AGENCY.ISSUE_OFFICE, AGENCY.ADDRESS_LINE_ONE, AGENCY.ADDRESS_LINE_TWO, AGENCY.ADDRESS_LINE_THREE, AGENCY.AGENCY_CONTACT_NUMBER, AGENCY.SITE_ENGINEER, AGENCY.EX_ENGINEER, AGENCY.JR_ENGINEER,
										CONTRACTOR.ID CONTRACTOR_ID, CONTRACTOR.NAME CONTRACTOR_NAME, CONTRACTOR.CONTACTNUMBER, CONTRACTOR.ADDRESS CONTRACTOR_ADDRESS, CONTRACTOR.CITY CONTRACTOR_CITY, CONTRACTOR.PINCODE CONTRACTOR_PINCODE,
										CONSTRUCTION.ID CONSTRUCTION_ID, CONSTRUCTION.ADDRESS CONSTRUCTION_ADDR, CONSTRUCTION.CITY CONSTRUCTION_CITY, CONSTRUCTION.PINCODE CONSTRUCTION_PINCODE, CONSTRUCTION.DISTRICT_CODE, CONSTRUCTION.STATE CONSTRCUTION_STATE, LD.DISTRICT_NAME
										from LEADS LEAD, LEAD_CONSTRUCTION_ADDRESS CONSTRUCTION, LEAD_AGENCY AGENCY, LEAD_CONTRACTOR CONTRACTOR, CUSTOMER_LEADS CL, LEAD_DISTRICTS LD
										WHERE LD.DISTRICT_CODE=CONSTRUCTION.DISTRICT_CODE AND CL.CUSTOMERID=? AND CL.LEADID=LEAD.ID AND LEAD.CONSTRUCTION_ADDRESS = CONSTRUCTION.ID AND LEAD.AGENCY = AGENCY.ID AND LEAD.CONTRACTOR = CONTRACTOR.ID
										AND LEAD.UPDATEDATE between CONVERT(VARCHAR, ?, 103) and CONVERT(VARCHAR, ?, 103)
										AND LEAD.ID > ? AND LEAD.DISTRICT LIKE ? AND LEAD.STATUS LIKE ? ORDER BY LEAD.ID DESC" />

				<entry key="GET_LEAD_BY_ID"
					value="select LEAD.ID, LEAD.LEADNUMBER, LEAD.STATUS, LEAD.TENDERNUMBER, LEAD.TENDERVALUE, LEAD.TENDERDATE, LEAD.CLOSINGDATE,
										LEAD.CEMENTVALUE, LEAD.DISTRICT, LEAD.STATE, LEAD.PINCODE, LEAD.CREATEDATE, LEAD.UPDATEDATE,
										LEAD.AGENCY, LEAD.CONSTRUCTION_ADDRESS, LEAD.CONTRACTOR,
										AGENCY.ID AGENCY_ID, AGENCY.AGENCY_NAME, AGENCY.ISSUE_OFFICE, AGENCY.ADDRESS_LINE_ONE, AGENCY.ADDRESS_LINE_TWO, AGENCY.ADDRESS_LINE_THREE, AGENCY.AGENCY_CONTACT_NUMBER, AGENCY.SITE_ENGINEER, AGENCY.EX_ENGINEER, AGENCY.JR_ENGINEER,
										CONTRACTOR.ID CONTRACTOR_ID, CONTRACTOR.NAME CONTRACTOR_NAME, CONTRACTOR.CONTACTNUMBER, CONTRACTOR.ADDRESS CONTRACTOR_ADDRESS, CONTRACTOR.CITY CONTRACTOR_CITY, CONTRACTOR.PINCODE CONTRACTOR_PINCODE,
										CONSTRUCTION.ID CONSTRUCTION_ID, CONSTRUCTION.ADDRESS CONSTRUCTION_ADDR, CONSTRUCTION.CITY CONSTRUCTION_CITY, CONSTRUCTION.PINCODE CONSTRUCTION_PINCODE, CONSTRUCTION.DISTRICT_CODE, CONSTRUCTION.STATE CONSTRCUTION_STATE, LD.DISTRICT_NAME
										from LEADS LEAD, LEAD_CONSTRUCTION_ADDRESS CONSTRUCTION, LEAD_AGENCY AGENCY, LEAD_CONTRACTOR CONTRACTOR, LEAD_DISTRICTS LD
										WHERE LD.DISTRICT_CODE=CONSTRUCTION.DISTRICT_CODE AND LEAD.ID = ? and LEAD.CONSTRUCTION_ADDRESS = CONSTRUCTION.ID AND LEAD.AGENCY = AGENCY.ID AND LEAD.CONTRACTOR = CONTRACTOR.ID" />

				<entry key="UPDATE_LEAD_DATA"
					value="UPDATE LEADS SET STATUS=?, TENDERNUMBER=?, CEMENTVALUE=?, TENDERVALUE=?, TENDERDATE=?,
										CLOSINGDATE=?, DISTRICT=?, STATE=?, PINCODE=?, UPDATEDATE=? WHERE ID=?" />

				<entry key="UPDATE_LEAD_CONTRACTOR_DETAILS"
					value="UPDATE LEAD_CONTRACTOR SET NAME=?, CONTACTNUMBER=?, ADDRESS=?, CITY=?, PINCODE=?, MODIFIER=?, UPDATEDATE=? WHERE ID=?" />

				<entry key="GET_LEAD_CONTRACTOR_UPDATE_DETAILS"
					value="SELECT FIELD_NAME fieldName, UPDATED_BY updatedBy, UPDATED_DATE updateDate, 
										UPDATED_BY_NAME updatedByName FROM LEAD_CONTRACTOR_UPDATE_DETAILS WHERE CONTRACTOR_ID=?" />

				<entry key="GET_LEAD_ORDER_DETAILS"
					value="SELECT ID, LEAD_ID leadId, CONVERTED_TO_ORDER covertToOrder, MATERIAL material, QUANTITY quantity
										FROM LEAD_ORDERS
										WHERE LEAD_ID = ?" />

				<entry key="GET_LEAD_ORDER_UPDATE_DETAILS"
					value="SELECT FIELD_NAME fieldName, UPDATED_BY updatedBy, UPDATED_DATE updateDate, UPDATED_BY_NAME updatedByName
										FROM LEAD_ORDERS_UPDATED_DETAILS WHERE LEAD_ORDER_ID = ?" />

				<entry key="CLOSE_LEAD"
					value="UPDATE LEADS SET STATUS = ?, UPDATEDATE=?, MODIFIER=? where id=?" />

				<entry key="UPDATE_LEAD_CONTRACTOR_UPDATE_DETAILS"
					value="UPDATE LEAD_CONTRACTOR_UPDATE_DETAILS SET UPDATED_BY = ?, UPDATED_DATE = ?, UPDATED_BY_NAME=? WHERE FIELD_NAME=? AND CONTRACTOR_ID=?" />

				<entry key="GET_CUSTOMER_BY_LEAD_REGION"
					value="SELECT CU.ID, CO.MOBILE mobileNumber, CO.EMAIL, CU.CUSTOMERNAME
												FROM CUSTOMER CU, CONTACT CO, CUSTOMER_DISTRICT_MAPPING CR
												WHERE CU.MAINCONTACTID=CO.ID AND CU.ID=CR.CUSTOMERID AND CR.DISTRICT_CODE=? AND CU.ACCESSPORTAL=1" />

				<entry key="GET_HUMRAHI_USER_BY_DISTRICT"
					value="SELECT SO.ID, SO.EMAIL, SO.EMPLOYEECODE, SO.MOBILENUMBER, SO.NAME
												FROM HM_EMPLOYEE SO, EMPLOYEE_DISTRICT_MAPPING EDM
												WHERE EDM.EMPLOYEEID=SO.ID AND EDM.DISTRICT_CODE=? AND ACTIVE=1" />

				<entry key="UPDATE_LEAD_ORDER_DETAILS"
					value="UPDATE LEAD_ORDERS SET CONVERTED_TO_ORDER=?, MATERIAL=?, QUANTITY=? WHERE ID=?" />

				<entry key="UPDATE_LEAD_ORDER_UPDATE_DETAILS"
					value="UPDATE LEAD_ORDERS_UPDATED_DETAILS SET UPDATED_BY = ?, UPDATED_DATE = ?, UPDATED_BY_NAME=? WHERE FIELD_NAME=? AND LEAD_ORDER_ID=?" />

				<entry key="INSERT_USER_MOBILE_DETAILS"
					value="INSERT INTO userMobiledetails (USER_ID, NOTIFICATIONTOKEN, ACTIVE, CREATEDATE, UPDATEDATE, IMEI_NUMBER) VALUES
											(?,?,?,?,?,?)" />

				<entry key="UPDATE_USER_MOBILE_DETAILS"
					value="UPDATE userMobiledetails SET NOTIFICATIONTOKEN=?, ACTIVE=?, UPDATEDATE=?, IMEI_NUMBER=? WHERE ID = ?" />

				<entry key="GET_USER_MOBILE_DETAILS"
					value="SELECT ID, NOTIFICATIONTOKEN, ACTIVE, CREATEDATE, UPDATEDATE FROM userMobiledetails WHERE USER_ID=?" />

				<entry key="INSERT_CUSTOMER_OTP"
					value="INSERT INTO CUSTOMER_OTP_DETAILS (CREATEDATE, UPDATEDATE, USERID, OTP, ISUSED) VALUES (?,?,?,?,?)" />

				<entry key="UPDATE_CUSTOMER_OTP"
					value="UPDATE CUSTOMER_OTP_DETAILS SET UPDATEDATE = ?, OTP = ?, ISUSED = ? WHERE USERID = ?" />

				<entry key="GET_CUSTOMER_OTP"
					value="SELECT ID, USERID, OTP, isused, UPDATEDATE FROM CUSTOMER_OTP_DETAILS WHERE USERID = ?" />

				<entry key="GET_USER_MOBILE_PASSWORD"
					value="SELECT MTOKEN userPassword FROM userMobiledetails WHERE USER_ID=? and IMEI_NUMBER=?" />

				<entry key="GET_SHIP_TO_PARTY_REQUEST_LIST_BY_ID"
					value="SELECT ID, SOLDTOCODE, SHIPTOCODE, CREATEDBY, CREATEDATE, UPDATEDBY, UPDATEDATE,
										STATUS, NAME, ADDRESS1, ADDRESS2, CITY, TALUKA, DISTRICT, LANDMARK, STATE, PIN pinCode, PHONENUMBER, MOBILENUMBER,GSTNUMBER
										FROM SHIPTOPARTYREQUEST WHERE ID = ?" />

				<!-- Mohsin code ends here -->



				<entry key="GET_CONTRACT_LIST"
					value="select c.ID as id,c.SDDOCNUMBER as sdDocNumber,c.MATERIALNUMBER as materialNumber,c.SDSHORTTEXT as sdShortText,c.DOCDATE as docDate,
									  c.PLANT as plant,c.STORELOCATION as storeLocation,c.INCOTERM1 as incoTerm1,c.INCOTERM2  as incoTerm2 from contracts c
									  where c.CUSTOMERNO=? and c.DOCDATE between ? and ? and c.SALESORG = ? and c.TRANGROUP = ?" />

				<entry key="FIND_SALES_ORGANISATION_CODE_BY_CUSTOMER_CODE"
					value="select s.CODE  from SALESORGANISATION s
																inner join SALESAREA on s.ID=SALESAREA.SALESORGID 
																inner join CUSTOMER on CUSTOMER.SALESAREAID=SALESAREA.ID
															    where CUSTOMER.CODE=?" />

				<entry key="FIND_SALES_ORGANISATION_BY_COMPANYID"
					value="select so.* from SALESORGANISATION so,Enterprise e  where so.ISDELETED=0 and e.id=so.enterpriseID and e.companyID=? " />

				<entry key="FIND_All_SALES_ORGANISATION_BY_CUSTOMER_CODE"
					value="select so.ID,so.CODE,so.NAME,so.ENTERPRISEID from SALESORGANISATION so  where so.ISDELETED=0 and so.code in (  select distinct SALES_ORG_CODE from CUSTOMER_SALESOFFICE_PLANT_MAPPING where CUSTOMER_CODE=?);" />

				<entry key="GET_SMS_DETAILS_BY_COMPANY_ID"
					value="SELECT * from SMSDETAILS where companyid = ?" />

				<entry key="GET_COMPANY_NAME_BY_COMPANY_ID"
					value="select NAME from COMPANY where ID = ?" />


				<entry key="UPDATE_counter_By_Job"
					value="Update COUNTER set counter = (select substring( MAX(SUBSTRING(WEBORDERNUMBER, 3, LEN(WEBORDERNUMBER))), patindex('%[^0]%',MAX(SUBSTRING(WEBORDERNUMBER, 3, LEN(WEBORDERNUMBER)))) ,10) from SALEORDER where WEBORDERNUMBER like ? and CREATEDATE >= DateADD(mi, -5, Current_TimeStamp)) where name like ? " />

				<entry key="GET_CUSTOMER_DETAILS_BY_USER_ID"
					value="select c.CUSTOMERNAME as customerName,c.CODE as code,cn.EMAIL as email,cn.MOBILE as mobile from CUSTOMER c 
													inner join CUSTOMERUSER cu  on c.ID  = cu.CUSTOMERID inner join CONTACT cn on
  													cn.ID = c.MAINCONTACTID where cu.ID = ?" />
				<entry key="SEARCH_SHIP_TO_PARTY_LIST_FOR_CUSTOMER"
					value="select s.CITYNAME as cityName from SHIPTOPARTY s where s.SHIPTOCODE = ?" />
				<entry key="GET_VERSION_BY_COMPANY_ID_AND_PLATFORM"
					value="select * from version where companyid = ? and platform = ?" />
				<entry key="FIND_ENTERPRISE_CODE_BY_COMPANY_ID"
					value=" select e.code from ENTERPRISE e where companyid = ? and e.ISDELETED=0" />
				<entry key="CHECK_GPS_FITTED_TRUCK"
					value=" select count(*) from GPSTRUCK where truckno=?" />

				<!-- WARE-HOUSE-OPERATOR -->

				<entry key="SEARCH_WARE_HOUSE_OPERATOR"
					value="Select e.ID, e.EMPLOYEECODE, e.EXTERNALID, e.SALESOFFICEID, u.givenName, u.MiddleName, u.FamilyName,
											u.loginId as loginID, u.DateOfBirth, u.gender, Concat(u.givenName,' ', u.FamilyName) as Name,
											c.EMAIL as emailId, c.MOBILE as mobileNumber, so.NAME as salesOfficeName, so.CODE as salesOfficeCode,
											su.NAME as salesUnitName, su.CODE as salesUnitCode, u.EMPLOYEELOCKED as Locked,
											u.user_id as userId, rm.role_name as roleName,
											a.streetname as streetName, a.streetside as streetSide, a.FLOOR as floor,
											a.HOUSENUMBER as houseNumber, l.city as  city, l.STATEPROV as  state,
											l.COUNTRY as  country, l.POSTALCODE as  postalCode,e.ISWAREHOUSEOPERATOR as isWareHouseOperator
										from [EMPLOYEE] e
										INNER Join [USER] u ON e.ID = u.user_id
										Inner join [SALESOFFICE] so ON so.ID = e.SALESOFFICEID
										INNER Join [SALESUNIT] su ON su.ID = so.SALESUNITID
										INNER JOIN user_role ur on ur.user_id = u.user_id
										Inner Join role_master rm on ur.role_id =  rm.role_id
										Left Join  [CONTACT] c on c.ID = u.mainContactId
										LEFT JOIN  [ADDRESS] a ON a.ID = c.ADDRESSID
										LEFT JOIN  [Location] l ON l.ID = a.LOCATIONID
										INNER JOIN SALESREGION salesRegionLkd ON su.SALESREGIONID = salesRegionLkd.ID 
										INNER JOIN ENTERPRISE en ON salesRegionLkd.ENTERPRISEID = en.ID
									where e.ISDELETED = 0 and e.EMPLOYEECODE like ? and Concat(u.givenName,' ', u.FamilyName) like ? 
										and u.loginId like ? and c.EMAIL Like ? and (so.NAME LIKE ? OR so.CODE LIKE ?)  and (su.NAME like ? OR su.CODE LIKE ?) 
										AND u.EMPLOYEELOCKED LIKE ? AND c.MOBILE LIKE ? and rm.role_name like ? and en.COMPANYID = ? and e.ISWAREHOUSEOPERATOR =1
									Order By EMPLOYEECODE
                               " />
				<entry key="GetRole_by_Name_For_Employee"
					value="SELECT rm.role_id,rm.role_name FROM role_master rm
											INNER JOIN lookup_details ld ON ld.lookupd_id = rm.SUPERROLE
											where rm.role_name = ? and isDeleted = 0 AND ld.lookup_value = 'Employee' " />

				<entry key="CHECK_FOR_WARE_HOUSE_OPERATOR"
					value="SELECT e.ISWAREHOUSEOPERATOR from EMPLOYEE e where e.isDeleted = 0 AND 
												  e.ID=? " />


				<entry key="GET_ALL_ROLE_TYPE_BY_USER_ID"
					value=" select  ld.lookup_value from role_master rm INNER JOIN lookup_details ld ON ld.lookupd_id = rm.SUPERROLE 
						 						inner join user_role ur  on rm.role_id = ur.role_id
												where ur.user_id=? and (rm.ISDELETED=0 or rm.ISDELETED is null) " />
				<entry key="UNLOCK_ALL_USERS"
					value="update USERLOGINDETAILS set WRONGPASSWORDATTEMPTS=0,LOCKED=0 where locked=1 " />
				<entry key="UPDATE_CUSTOMER_USER_POSITION"
					value="update CUSTOMERUSER set POSITION = ? where ID = ? " />
				<entry key="FIND_POSTION_FOR_CUSTOMER_USER"
					value="SELECT ld.lookup_value as positionValue
												   FROM customeruser cu inner join lookup_details ld on cu.POSITION = ld.lookupd_id
												   where cu.CUSTOMERID = ? and cu.ID = ?" />

				<entry key="GET_DESPATCH_DETAILS_RFID"
					value="SELECT DO_STATUS doStatus, PLANT, SO_NO soNo, DO_NO doNo,
SALES_DST_CODE SalesDstCode, SALES_DST_NAME SalesDstName, TRUCK_NO truckNumber, TRANSPORTER_CD transporterCd,
TRANSPORTER_NAME transporterName, QTY, MATERIAL_DESC materialDesc,
CITY_DESC city, COUNTY_DESC county, WEIGH_IN_DATE weightIn, WEIGH_OUT_DATE weightOut, 
PGI_DATE pgiTime, route_dist routeDistance,
WEIGH_IN_TIME weighInTime, WEIGH_OUT_TIME weighOutTime, PGI_TIME pgit
FROM DO_DETAILS_CEN
WHERE DO_NO = ?
" />
				<entry key="UPDATE_CUSTOMER_DISTRICT"
					value="update location set district=? where ID=(select LOCATIONID from ADDRESS where ID=(
select addressid from CUSTOMER cu,CONTACT co where cu.MAINCONTACTID=co.ID and code=?))" />

				<!-- Start Ravindrak - Commented and new query added to apply company 
					check in query <entry key="IS_MOBILE_FOR_CUSTOMER_EXIST" value="SELECT CUSTOMER.CODE 
					FROM CUSTOMER INNER JOIN CONTACT ON CONTACT.ID = CUSTOMER.MAINCONTACTID WHERE 
					CONTACT.MOBILE=?"/> -->
				<entry key="IS_MOBILE_FOR_CUSTOMER_EXIST"
					value="SELECT CUSTOMER.CODE FROM CUSTOMER
												INNER JOIN CONTACT ON CONTACT.ID = CUSTOMER.MAINCONTACTID
												inner join CUSTOMERGROUP on CUSTOMERGROUP.id=customer.CUSTOMERGROUPID
												WHERE CONTACT.MOBILE=? and CUSTOMERGROUP.ENTERPRISEID=?" />
				<!-- End Query modification by Ravindrak -->
				<entry key="SELECT_CMS_ActualVsTargetData_byMonth_andYear"
					value="SELECT  CUSTOMER_CODE as companyCode, 
											year, DATENAME(month, CONCAT([Year],'-', [Month],'-','1')) as month,
											Concat([Year],'-', DATENAME(month, CONCAT([Year],'-', [Month],'-','1'))) as YearMonth,
											SUM(TRGT_SLS) as TRGTSLS, SUM(ACTL_SLS) ACTLSLS, SUM(TRGT_SLS_VAL ) as TRGTSLSVAL, SUM(ACTL_SLS_VAL) as ACTLSLSVAL 
											FROM CRM_MONTHLY_SALES cms
											Inner Join CUSTOMER  c ON c.CODE = cms.CUSTOMER_CODE
											Where c.ID = ? and cms.year=? and cms.month=?
											GROUP BY CUSTOMER_CODE, [Year],[Month]
											Order by CONVERT ( datetime , CONCAT([Year],'-', [Month],'-','1'), 102 )  
									  " />

				<entry key="SELECT_CMS_ActualVsTargetData_Dynamic"
					value="SELECT  CUSTOMER_CODE as companyCode, 
											year, DATENAME(month, CONCAT([Year],'-', [Month],'-','1')) as month,
											Concat([Year],'-', DATENAME(month, CONCAT([Year],'-', [Month],'-','1'))) as YearMonth,
											SUM(TRGT_SLS) as TRGTSLS, SUM(ACTL_SLS) ACTLSLS, SUM(TRGT_SLS_VAL ) as TRGTSLSVAL, SUM(ACTL_SLS_VAL) as ACTLSLSVAL 
											FROM CRM_MONTHLY_SALES cms
											Inner Join CUSTOMER  c ON c.CODE = cms.CUSTOMER_CODE
											Where c.ID = ?										  
									  " />

				<entry key="SELECT_CMS_ActualVsTargetData_APP_Dynamic"
					value="select companyCode, year, mothInt, month, yearMonth, trgtsls, actlsls, trgtslsval, actlslsval 
											from CRM_MONTHLY_SALES_APP where id = ? " />

				<entry key="GET_ALL_Material_By_SU"
					value="SELECT mat.ID, mat.CREATEDATE, mat.CREATOR, mat.ENTITY_UID, mat.MODIFIER, 
											mat.UPDATEDATE, mat.OPTLOCK, mat.ACTIVE, mat.ARTICLENO, mat.DESCRIPTION,
											mat.MATERIALGROUP, mat.UOM, mat.ENTERPRISEID
											FROM MATERIAL mat
											inner join MATERIAL_SALESUNIT MS ON MS.MATERIALID=MAT.ID
											INNER JOIN SALESUNIT SU ON SU.ID = MS.SALESUNITID			
											INNER JOIN ENTERPRISE en ON en.ID = mat.ENTERPRISEID
											WHERE en.COMPANYID = ? and mat.ACTIVE=1 and su.id = ? ORDER BY mat.ID" />

				<!-- Query modified by raivindra added companyid check -->
				<entry key="Validate_MobileExistForUser"
					value="SELECT Count(c.id) 
                                        FROM contact c
                                        INNER JOIN [user] u ON u.mainContactId=c.id
                                        where c.mobile = ? and u.COMPANYID= ?
                                        " />
				<!-- Query modified by Ravindra -->
				<entry key="Validate_EmailExistForUser"
					value="SELECT Count(c.id) 
                                        FROM contact c
                                        INNER JOIN [user] u ON u.mainContactId=c.id
                                        where c.email = ? and u.COMPANYID=?
                                        " />

				<entry key="Select_Customer_By_Code"
					value="SELECT customer.ID,customer.CREATEDATE,customer.CREATOR,customer.ENTITY_UID,customer.MODIFIER,customer.UPDATEDATE,customer.issecondarysalesaccess as secondarySalesAccess,
										ISNULL(customer.OPTLOCK,0) OPTLOCK,customer.ACCESSKEY,ISNULL(customer.ACCESSPORTAL, 0) ACCESSPORTAL,customer.CODE,ISNULL(customer.HEADQUARTER, 0) HEADQUARTER,customer.CUSTOMERNAME,
										ISNULL(customer.SINGLELOCATION, 0) SINGLELOCATION,ISNULL(customer.CUSTOMERGROUPID,0) CUSTOMERGROUPID,
										ISNULL(customer.MAINCONTACTID, 0) MAINCONTACTID,ISNULL(customer.PARENTHQID, 0) PARENTHQID,ISNULL(customer.SALESAREAID, 0) SALESAREAID,
										ISNULL(customer.SALESGROUPID, 0) SALESGROUPID, ISNULL(customer.SALESOFFICEID, 0) SALESOFFICEID,
										ISNULL(customer.SALESPROMOTER, 0) SALESPROMOTER,ISNULL(customer.SALESPROMOTERID, 0) SALESPROMOTERID,ISNULL(customer.ISDIRECTPOSTING, 0) ISDIRECTPOSTING,
										ISNULL(customer.VIRTUALACCOUNT, 0) VIRTUALACCOUNT, ISNULL(customer.ISDELETED, 0) ISDELETED,
										ISNULL(customer.DELCREDER,0) DELCREDER  ,salesofficeLkd.name salesOffice
										FROM customer with (NOLOCK) 
										Inner JOIN customergroup customergroupLkd with (NOLOCK)  ON customer.CUSTOMERGROUPID = customergroupLkd.ID
										Inner JOIN salesarea  salesareaLkd with (NOLOCK) ON customer.SALESAREAID = salesareaLkd.ID 
										Inner JOIN salesgroup  salesgroupLkd with (NOLOCK) ON customer.SALESGROUPID = salesgroupLkd.ID 
										Inner JOIN salesoffice salesofficeLkd  with (NOLOCK) ON customer.SALESOFFICEID = salesofficeLkd.ID 
										Inner JOIN salesorganisation salesorgLkd  with (NOLOCK) ON salesareaLkd.SALESORGID = salesorgLkd.ID 
										Inner JOIN DISTRIBUTIONCHANNEL  distchannelLkd with (NOLOCK) ON salesareaLkd.DISTCHANNELID = distchannelLkd.ID 
										Inner JOIN salesunit  salesunitLkd with (NOLOCK) ON salesofficeLkd.SALESUNITID = salesunitLkd.ID 
										Inner JOIN salesregion salesregionLkd with (NOLOCK) ON salesunitLkd.SALESREGIONID = salesregionLkd.ID 
										Inner JOIN ENTERPRISE en  with (NOLOCK)ON en.ID = salesregionLkd.ENTERPRISEID
										where customer.CODE= ?" />

				<entry key="SQL_INSERT_CustomerOrderStatus"
					value="INSERT INTO CUSTOMER_ORDER_STATUS (
											CREATEDATE, UPDATEDATE, SODATE, DISPATCHDATE, PGIDATE, REQUESTDATE, 
											CUSTOMERID, REQUESTEDBY, SOLDTOCODE, SHIPTOCODE,
											MAT_DESCRIPTION, QUANTITY, DEL_QUANTITY, MAT_ARTICLE, 
											SONUMBER, STATUS, WEBORDERNUMBER, PONUMBER, IDOC_NUMBER, STATUSID, ORDERID, DELETED
											)VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) " />

				<entry key="SQL_UPDATE_CustomerOrderStatus"
					value="UPDATE CUSTOMER_ORDER_STATUS SET SODATE = ?,
											SONUMBER = ?, DISPATCHDATE=?, PGIDATE=?, STATUS = ?, UPDATEDATE = ?, MAT_DESCRIPTION=?,
											QUANTITY=?, DEL_QUANTITY=?, MAT_ARTICLE=?, IDOC_NUMBER=?, STATUSID=? WHERE ID = ?" />

				<entry key="SQL_SELECT_CustomerOrderStatus"
					value="SELECT DISTINCT COS.ID, COS.CREATEDATE, COS.UPDATEDATE, COS.REQUESTDATE, COS.REQUESTEDBY requestBy, 
											COS.CUSTOMERID, COS.SONUMBER salesDocumentNumber,
											COS.SODATE salesOrderDate, COS.WEBORDERNUMBER,
											COS.MAT_DESCRIPTION  materialDescription, COS.QUANTITY, COS.DEL_QUANTITY deliveryQuantity, 
											COS.MAT_ARTICLE materialArticle, COS.SOLDTOCODE ,COS.SHIPTOCODE, COS.DISPATCHDATE, COS.PGIDATE, 
											STP.ADDRESS shipToAddress, STP.CITYNAME shipToCity, COS.PONUMBER,
											lookup.statuskey, lookup.statusvalue, lookup.id statusId
											FROM CUSTOMER_ORDER_STATUS AS COS
											LEFT JOIN SHIPTOPARTY STP ON STP.SHIPTOCODE=COS.SHIPTOCODE
											INNER JOIN status_lookup lookup ON lookup.ID = COS.STATUSID
											where COS.customerid = ?
											and COS.CREATEDATE BETWEEN ? AND ?
											and lookup.statuskey like ?
											order by CREATEDATE desc" />

				<entry key="SQL_SELECT_CustomerOrderStatusBYSO"
					value="SELECT distinct COS.ID, COS.CREATEDATE, COS.UPDATEDATE, COS.REQUESTDATE, COS.REQUESTEDBY requestBy, 
											COS.CUSTOMERID, COS.SONUMBER salesDocumentNumber,
											COS.SODATE salesOrderDate, COS.STATUS, COS.WEBORDERNUMBER,
											COS.MAT_DESCRIPTION  materialDescription, COS.QUANTITY, COS.DEL_QUANTITY deliveryQuantity, 
											COS.MAT_ARTICLE materialArticle, COS.SOLDTOCODE ,COS.SHIPTOCODE,
											COS.DISPATCHDATE, COS.PGIDATE, COS.IDOC_NUMBER	idocNumber										
											FROM CUSTOMER_ORDER_STATUS AS COS											
											where COS.SONUMBER = ?" />

				<entry key="SQL_SELECT_CustomerOrderStatusBYWebOrderNumber"
					value="SELECT distinct COS.ID, COS.CREATEDATE, COS.UPDATEDATE, COS.REQUESTDATE, COS.REQUESTEDBY requestBy, 
											COS.CUSTOMERID, COS.SONUMBER salesDocumentNumber,
											COS.SODATE salesOrderDate, COS.STATUS, COS.WEBORDERNUMBER,
											COS.MAT_DESCRIPTION  materialDescription, COS.QUANTITY, COS.DEL_QUANTITY deliveryQuantity, 
											COS.MAT_ARTICLE materialArticle, COS.SOLDTOCODE ,COS.SHIPTOCODE,
											COS.DISPATCHDATE, COS.PGIDATE,
											COS.IDOC_NUMBER idocNumber
											FROM CUSTOMER_ORDER_STATUS AS COS											
											where COS.WEBORDERNUMBER = ?" />

				<entry key="SQL_SalesOrderStaging"
					value="SELECT ID, SALES_ORDER_NUMBER salesOrderNumber, SALES_ORDER_DATE salesOrderDate, 
											SALES_ORDER_TIME salesOrderTime, SALES_ORDER_SOLD_TO salesOrderSoldTo,
										    SALES_ORDER_SHIP_TO salesOrderShipTo, WEBORDER_NUMBER webOrderNumber,
											MATERIAL_CODE materialCode, MATERIAL_DESCRIPTION materialDescription, ORDER_TYPE orderType,
											REASON_CODE reasonCode, CUSTOMER_CONDITION_GRP1 customerConditionGrp, 
											QUANTITY quantity, DEL_QUANTITY delQuantity, SO_STATUS soStatus, IDOC_NUMBER idocNumber
										 	FROM SAP_SALESORDER_STAGING WHERE PROCESSED = ? ORDER BY IDOC_NUMBER" />

				<entry key="SQL_INSERT_CustomerDeliveryStatus"
					value="INSERT INTO CUSTOMER_DELIVERY_STATUS (IDOC_NUMBER, DELIVERY_DOCUMENT_NUMBER, SALES_DOCUMENT_NUMBER, DELIVERY_DOCUMENT_DATE,
											DELIVERY_QTY, CUMM_QTY, SHIPTOCODE, SOLDTOCODE, TRUCKNO, TRANSPORTER_NO, TRANSPORTER_NAME, WEIGHT_IN, WEIGHT_OUT, 
											PGI, POD, DISPATCH_STATUS, CREATEDATE, UPDATEDATE, DELETED) VALUES (?, ?, ? ,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)" />

				<entry key="SQL_UPDATE_CustomerDeliveryStatus"
					value="UPDATE CUSTOMER_DELIVERY_STATUS SET IDOC_NUMBER = ?, DELIVERY_QTY= ?, CUMM_QTY= ?, TRUCKNO=?, 
											TRANSPORTER_NO=?, TRANSPORTER_NAME=?, WEIGHT_IN=?, WEIGHT_OUT=?, PGI=?, POD=?, DISPATCH_STATUS=?, 
											UPDATEDATE=?, DELETED=? WHERE ID =?" />

				<entry key="SQL_DeliveryOrderStaging"
					value="SELECT  ID, IDOC_NUMBER idocNumber, SALES_ORDER_NUMBER saleOrderNumber, 
											DELIVERY_DOCUMENT_NUMBER deliveryDocumentNumber, DELIVERY_DOCUMENT_DATE deliveryDocumentDate, 
											DELIVERY_DOCUMENT_TIME deliveryDocumentTime,
											DELIVERY_TYPE deliveryType, DELIVERY_CREATED_BY deliveryCreatedBy,
											DELIVERY_QTY deliveryQty, DELIVERY_SOLD_TO deliverySoldTo, DELIVERY_SHIP_TO deliveryShipTo,
											TRUCK_NUMBER truckNumber, TRANSPOTER_NAME transpoterName, 
											WEIGHT_IN_DATE weightInDate, WEIGHT_IN_TIME weightInTime, WEIGHT_OUT_DATE weightOutDate,
											WEIGHT_OUT_TIME weightOutTime, PGI_DATE pgiDate, PGI_TIME pgiTime,
											EPOD_DATE podDate, EPOD_TIME podTime, 
											PLANT_CODE plantCode, MATERIAL_CODE materialCode, MATERIAL_DESCRIPTION materialDescription,
											CUSTOMER_CONDITION_GRP1, READ_STATUS, INVOICE_NUMBER invoiceNumber, CUMM_QTY cummQty, DISPATCH_STATUS dispatchStatus
											FROM SAP_DELIVERY_ORDER_STAGING WHERE  PROCESSED =? order by IDOC_NUMBER" />

				<entry key="SQL_SELECT_CustomerDeliveryStatus_BY_SO"
					value="SELECT ID, IDOC_NUMBER idocNumber, DELIVERY_DOCUMENT_NUMBER deliveryNumber, SALES_DOCUMENT_NUMBER salesDocNumber,
											DELIVERY_DOCUMENT_DATE DeliveryDocDate, DELIVERY_QTY deliveryQty, CUMM_QTY cummQty, SHIPTOCODE,
											SOLDTOCODE, TRUCKNO, TRANSPORTER_NO transporterNo, TRANSPORTER_NAME transporterName, WEIGHT_IN weightIn,
											WEIGHT_OUT WeightOut, PGI, POD, DISPATCH_STATUS dispatchStatus, CREATEDATE, UPDATEDATE
											FROM CUSTOMER_DELIVERY_STATUS WHERE SALES_DOCUMENT_NUMBER = ? and DELETED=0" />

				<entry key="SQL_SELECT_CustomerDeliveryStatus_BY_DO"
					value="SELECT ID, IDOC_NUMBER idocNumber, DELIVERY_DOCUMENT_NUMBER deliveryNumber, SALES_DOCUMENT_NUMBER salesDocNumber,
											DELIVERY_DOCUMENT_DATE DeliveryDocDate, DELIVERY_QTY deliveryQty, CUMM_QTY cummQty, SHIPTOCODE,
											SOLDTOCODE, TRUCKNO, TRANSPORTER_NO transporterNo, TRANSPORTER_NAME transporterName, WEIGHT_IN weightIn,
											WEIGHT_OUT WeightOut, PGI, POD, DISPATCH_STATUS dispatchStatus, CREATEDATE, UPDATEDATE
											FROM CUSTOMER_DELIVERY_STATUS WHERE DELIVERY_DOCUMENT_NUMBER = ?" />

				<entry key="SQL_UpdateDeliveryOrderStaging_Status"
					value="UPDATE SAP_DELIVERY_ORDER_STAGING SET PROCESSED = ?  WHERE ID= ? " />

				<entry key="SQL_UpdateSalesOrderStaging_Status"
					value="UPDATE SAP_SALESORDER_STAGING SET PROCESSED = ? WHERE ID = ?" />

				<entry key="SQL_SELECT_STATUS_LOOKUP_BY_ID"
					value="select * from status_lookup where id = ?" />

				<entry key="SQL_SELECT_STATUS_LOOKUP_BY_KEY"
					value="select * from status_lookup where statuskey=?" />

				<entry key="SQL_SELECT_ALL_STATUS_LOOKUP_BY_MASTER"
					value="select status.statuskey, statusvalue from status_lookup status
											inner join lookup_master master on master.lookup_id = status.lookupmasterid
											where master.lookup_name=?" />

				<entry key="SQL_UPDATE_DeliveryStatus"
					value=" UPDATE CUSTOMER_DELIVERY_STATUS SET   DELIVERY_QTY= ?, CUMM_QTY=  ? ,DELIVERY_DOCUMENT_DATE =?, DELIVERY_DOCUMENT_NUMBER =?, UPDATEDATE = getDate() 
     WHERE ID =?" />

				<entry key="SQL_GET_OWNER_USERS_FROM_CUSTOMER_CODE"
					value="select u.user_id userId, u.loginid loginId, u.user_status userStatus, u.mainContactid mainContactId,
											u.companyId companyId, u.givenname givenName, u.middlename middleName, u.familyName familyName	
											from [user] u
											inner join customeruser cu on cu.id = u.user_id
											inner join customer c on c.id = cu.customerid
											where c.code = ? and cu.position = '103' and u.user_status=1" />
				<entry key="SQL_GET_OWNER_USERS_FROM_CUSTOMER_ID"
					value="select u.user_id userId, u.loginid loginId, u.user_status userStatus, u.mainContactid mainContactId,
											u.companyId companyId, u.givenname givenName, u.middlename middleName, u.familyName familyName,ct.email as email,ct.mobile as mobile	
											from [user] u
											inner join customeruser cu on cu.id = u.user_id
											inner join customer c on c.id = cu.customerid
											inner join contact ct on ct.id=u.mainContactid
											where c.id = ? and cu.position = '103' and u.user_status=1 order by u.user_id" />

				<entry key="INSERT_USER_NOTIFICATIONS"
					value="insert into USER_NOTIFICATIONS (createdate, userid, message, title, response_code) values (?,?,?,?,?) " />

				<entry key="GET_USER_NOTIFICATIONS"
					value="select top 30 id, createdate, userid, message, title, response_code responseCode from USER_NOTIFICATIONS where userid = ?
											order by createdate desc" />
											
						<entry key="INSERT_ONLINE_PAYMENT_TRANSACTION"
					value="insert into ONLINE_PAYMENT_TRANSACTIONS(CUST_CODE, AMOUNT, CARD_DETAILS, REFERENCE, STATUS, CREATED_TIME,
					 RESULT_KEY, OUTSTANDING, SURCHARGE_AMOUNT, TOTAL_AMOUNT, RECEIPT_NUMBER, TRANSACTION_NUMBER) values (?,?,?,?,?,?,?,?,?,?,?,?) " />

				<entry key="GET_ONLINE_PAYMENT_TRANSACTIONS"
					value="select CUST_CODE custCode, AMOUNT amount, CARD_DETAILS cardDetails, REFERENCE reference, STATUS transStatus, CREATED_TIME transDate, RESULT_KEY resultKey, OUTSTANDING outstanding, 
					SURCHARGE_AMOUNT surchargeAmount, TOTAL_AMOUNT totalAmount, RECEIPT_NUMBER receiptNo, 
					TRANSACTION_NUMBER transactionNo from ONLINE_PAYMENT_TRANSACTIONS where CUST_CODE = ? and
					STATUS='Approved' order by CREATED_TIME desc" />
				<entry key="GET_ONLINE_PAYMENT_TRANSACTIONS_EXISTING"
					value="select CUST_CODE custCode, AMOUNT amount, CARD_DETAILS cardDetails, REFERENCE reference, STATUS transStatus, CREATED_TIME transDate, RESULT_KEY resultKey, OUTSTANDING outstanding, SURCHARGE_AMOUNT surchargeAmount from ONLINE_PAYMENT_TRANSACTIONS where RESULT_KEY = ?
									" />
						

				<entry key="GET_COMPANY_BY_CUSTOMER_CODE"
					value="SELECT companyLkd.id, companyLkd.companyid FROM CUSTOMER CU
											INNER JOIN CUSTOMERGROUP cg ON cg.ID = cu.CUSTOMERGROUPID
											INNER JOIN ENTERPRISE enterprise ON enterprise.id = cg.enterpriseid
											INNER JOIN Company companyLkd ON companyLkd.ID = enterprise.companyId
											where cu.code = ?" />

				<entry key="SQL_GET_ADMIN_USERS"
					value="select u.user_id userId, u.loginid loginId, u.user_status userStatus, u.mainContactid mainContactId,u.companyId companyId, u.givenname givenName,
					 u.middlename middleName, u.familyName familyName,ct.email as email,ct.mobile as mobile	
											from [user] u
											inner join employee e on e.id = u.user_id
											inner join user_role ur on e.id=ur.user_id
											inner join contact ct on ct.id=u.mainContactid
											where  u.user_status=1 and ur.role_id=3 order by u.user_id;" />

				<entry key="SELECT_Config_BY_PARAM"
					value="select flag from dbo.APP_CONFIG where PARAMETER=?" />

				<entry key="SQL_DeliveryOrderStaging_by_idocNumber"
					value="SELECT  ID, IDOC_NUMBER idocNumber, SALES_ORDER_NUMBER saleOrderNumber, 
											DELIVERY_DOCUMENT_NUMBER deliveryDocumentNumber, DELIVERY_DOCUMENT_DATE deliveryDocumentDate, 
											DELIVERY_DOCUMENT_TIME deliveryDocumentTime,
											DELIVERY_TYPE deliveryType, DELIVERY_CREATED_BY deliveryCreatedBy,
											DELIVERY_QTY deliveryQty, DELIVERY_SOLD_TO deliverySoldTo, DELIVERY_SHIP_TO deliveryShipTo,
											TRUCK_NUMBER truckNumber, TRANSPOTER_NAME transpoterName, 
											WEIGHT_IN_DATE weightInDate, WEIGHT_IN_TIME weightInTime, WEIGHT_OUT_DATE weightOutDate,
											WEIGHT_OUT_TIME weightOutTime, PGI_DATE pgiDate, PGI_TIME pgiTime,
											EPOD_DATE podDate, EPOD_TIME podTime, 
											PLANT_CODE plantCode, MATERIAL_CODE materialCode, MATERIAL_DESCRIPTION materialDescription,
											CUSTOMER_CONDITION_GRP1, READ_STATUS, INVOICE_NUMBER invoiceNumber, CUMM_QTY cummQty, DISPATCH_STATUS dispatchStatus
											FROM SAP_DELIVERY_ORDER_STAGING WHERE  IDOC_NUMBER=?" />

				<entry key="GET_SALESPROMOTER_BY_CODE"
					value="SELECT C.ID, C.CODE, C.CUSTOMERNAME FROM CUSTOMER C
											INNER JOIN CUSTOMERGROUP cg ON cg.ID = C.CUSTOMERGROUPID
											INNER JOIN ENTERPRISE enterprise ON enterprise.id = cg.enterpriseid
											INNER JOIN Company companyLkd ON companyLkd.ID = enterprise.companyId
											WHERE companyLkd.ID = ? AND C.ACCESSPORTAL=1 AND C.CODE = ? AND C.SALESPROMOTER=1" />

				<entry key="MAP_SALESPROMOTER_CUSTOMER"
					value="update customer set salespromoterid = ?, updatedate = ?, modifier= ? where id = ?" />

				<entry key="GET_RETAILER_ORDER_STATUS"
					value="select ro.id retailerOrderid, ro.orderNumber retailerOrderNumber, ro.status retailerOrderStatus, ro.FLOATINGSTOCK,
											ro.quantity retailerQuantity, cos.requestDate, cos.sonumber salesDocumentNumber, cos.sodate salesOrderDate,
											cos.dispatchDate, cos.pgidate, cos.webordernumber, cos.mat_description materialDescription, COS.PONUMBER, COS.SHIPTOCODE,
											STP.ADDRESS shipToAddress, STP.CITYNAME shipToCity,
											cos.quantity dealerOrderQuantity, cos.del_quantity deliveryQuantity, cos.mat_article materialArticle, lookup.statusvalue
											from rp_retailer_order ro
											left join customer_order_status cos on cos.webordernumber = ro.webordernumber
											LEFT JOIN SHIPTOPARTY STP ON STP.id=ro.retailerid
											left JOIN status_lookup lookup ON lookup.ID = COS.STATUSID" />

				<entry key="GET_RETAILER_ORDER_DELIVERY_STATUS"
					value="SELECT cds.ID, cds.IDOC_NUMBER idocNumber, cds.DELIVERY_DOCUMENT_NUMBER deliveryNumber,
											cds.SALES_DOCUMENT_NUMBER salesDocNumber, cds.DELIVERY_DOCUMENT_DATE DeliveryDocDate, 
											cds.DELIVERY_QTY deliveryQty, cds.CUMM_QTY cummQty, cds.SHIPTOCODE,
											cds.SOLDTOCODE, cds.TRUCKNO, cds.TRANSPORTER_NO transporterNo, cds.TRANSPORTER_NAME transporterName, 
											cds.WEIGHT_IN weightIn, cds.WEIGHT_OUT WeightOut, cds.PGI, cds.POD, 
											cds.DISPATCH_STATUS dispatchStatus, cds.CREATEDATE, cds.UPDATEDATE
											FROM CUSTOMER_DELIVERY_STATUS cds
											INNER JOIN customer_order_status cos on cos.sonumber = cds.sales_document_number
											inner join rp_retailer_order ro on ro.webordernumber = cos.webordernumber
											WHERE cds.DELETED=0" />

				<!-- Added below query to get Retailer details from ship to party table 
					for Retailer Order - Added by Mohsin -->
				<entry key="GET_RETAILER_DETAILS_BY_RETAILER_CUSTOMER_CODE"
					value="SELECT shiptoparty.id,shiptoparty.SOLDTOCODE,shiptoparty.SHIPTOCODE,shiptoparty.ADDRESS,shiptoparty.STREETSIDE,shiptoparty.HOUSENUMBER,shiptoparty.CITYCODE,shiptoparty.CITYNAME,shiptoparty.STREETNAME,shiptoparty.DISTRICT,shiptoparty.POSTALCODE,shiptoparty.STATE,shiptoparty.SALESORG,shiptoparty.DISTCHANNEL,shiptoparty.DIVISION,shiptoparty.PARTNERFUNCTION,shiptoparty.BLOCKSTATUS,shiptoparty.CREATEDATE,shiptoparty.UPDATEDATE
                                        FROM shiptoparty 
                                        where shiptoparty.SOLDTOCODE = ?  AND shiptoparty.SHIPTOCODE=? AND shiptoparty.PARTNERFUNCTION = ? AND
                                        shiptoparty.DIVISION = ? AND shiptoparty.SALESORG = ? AND shiptoparty.BLOCKSTATUS=1
                                        " />

				<entry key="GET_RETAILER_DETAILS_BY_RETAILER_ID_CUSTOMER_CODE"
					value="SELECT shiptoparty.id,shiptoparty.SOLDTOCODE,shiptoparty.SHIPTOCODE,shiptoparty.ADDRESS,shiptoparty.STREETSIDE,shiptoparty.HOUSENUMBER,shiptoparty.CITYCODE,shiptoparty.CITYNAME,shiptoparty.STREETNAME,shiptoparty.DISTRICT,shiptoparty.POSTALCODE,shiptoparty.STATE,shiptoparty.SALESORG,shiptoparty.DISTCHANNEL,shiptoparty.DIVISION,shiptoparty.PARTNERFUNCTION,shiptoparty.BLOCKSTATUS,shiptoparty.CREATEDATE,shiptoparty.UPDATEDATE
                                        FROM shiptoparty 
                                        where shiptoparty.SOLDTOCODE = ?  AND shiptoparty.id=? AND shiptoparty.BLOCKSTATUS=1
                                        " />

				<entry key="SELECT_Material_BY_ARTICLE_NUMBER"
					value=" select * from MATERIAL m where  m.ARTICLENO = ?" />

				<entry key="SELECT_CUSTOMERS_BY_RETAILERS"
					value="select c.code, c.customername from customer c
										inner join shiptoparty stp on stp.soldtocode = c.code
										where stp.shiptocode = ? and blockstatus = 1 and partnerfunction = 'WE' and c.accessportal=1" />

				<entry key="VALIDATE_TOKEN"
					value="select count(ats.service_url) from application_token at 
										inner join application_token_service_mapping ats on ats.applicationid = at.id
										where at.application_name = ? and at.active =1 and ats.active=1 
										and ats.service_url=? 
										and at.application_token = ?" />
				<entry key="SEARCH_ACTIVE_USER_LOGIN_Report"
					value="select cus.accessportal as customerStatus,u.user_status as userStatus,cus.code as code,rm.role_name as role, cus.customername,u.loginid,
												u.givenname as givenName,u.middlename,u.familyname,c.companyid as companyCode,c.name as companyName,	
												so.name as salesofficename,so.code as salesofficecode,
												su.name as salesunitname,su.code as salesunitcode,
												sr.name as salesregionname,sr.code as salesregioncode,
												cc.email as customerEmail,cc.mobile as customerMobile,con.email as userEmail,con.mobile as userMobile,
												cus.activation_date as customerActivationDate, cus.deactivation_date as customerDeactivationDate,
												u.activation_date as userActivationDate, u.deactivation_date as userDeactivationDate ,
												CASE WHEN cus.statusupdatedby IS NOT NULL THEN (select top 1 loginid from [user] u where u.user_id = cus.statusupdatedby )
											    END customerUpdatedBy ,
												CASE WHEN u.statusupdatedby IS NOT NULL THEN (select top 1 loginid from [user] u where u.user_id = u.statusupdatedby )
												 END userUpdatedBy
												from Customer cus 
												inner join contact cc on cus.maincontactid = cc.id
												inner join salesoffice so on so.id = cus.salesofficeid
												inner join salesunit su on su.id = so.salesunitid
												inner join salesregion sr on sr.id = su.salesregionid
												inner join enterprise er on er.id = sr.enterpriseid
												inner join company c on c.id = er.companyid
												left join customeruser cu on cu.customerid=cus.id
												left join [user] u on u.user_id  = cu.id
												left join contact con on con.id= u.maincontactid
												left join user_role ur on ur.user_id = u.user_id
												left join role_master rm on rm.role_id = ur.role_id
												where er.companyid = ? " />
				<entry key="ACTIVE_USER_Report_For_Employee"
					value="select e.employeecode as code,rm.role_name as role,u.loginid,u.user_status as userStatus,u.givenname as givenName,u.middlename,u.familyname,c.companyid as companyCode,c.name as companyName,
					                                        con.email as userEmail,con.mobile as userMobile,
															so.name as salesofficename,so.code as salesofficecode,
															su.name as salesunitname,su.code as salesunitcode,
															sr.name as salesregionname,sr.code as salesregioncode,
															u.activation_date as userActivationDate, u.deactivation_date as userDeactivationDate ,
												
												CASE WHEN u.statusupdatedby IS NOT NULL THEN (select top 1 loginid from [user] u where u.user_id = u.statusupdatedby )
												 END userUpdatedBy
												from employee e 
															inner join salesoffice so on so.id = e.salesofficeid
															inner join salesunit su on su.id = so.salesunitid
															inner join salesregion sr on sr.id = su.salesregionid
															inner join [user] u on u.user_id  = e.id
															inner join contact con on con.id = u.maincontactid
															inner join company c on c.id = u.companyid
															inner join user_role ur on ur.user_id = u.user_id
															inner join role_master rm on rm.role_id = ur.role_id
															where u.companyid = ?" />
				<entry key="SELECT_DELCREDER_Customer"
					value="Select count(*) from delcreder_customer where delcrederid = ? and customerid = ?" />
				<entry key="INSERT_DELCREDER_Customer"
					value="insert into delcreder_customer(delcrederid,customerid) values(?,?)" />
				<entry key="UPDATE_SHIP_TO_PARTY_STATUS"
					value="update shiptoparty set blockstatus = 0 where soldtocode = ? and shiptocode = ?" />

				<!-- resourcess service Query -->
				<entry key="INSERT_Resourcess"
					value="insert into resourcess(id,COD,value,companuID) values(?,?,?,?)" />
				<entry key="UPDATE_Resourcess_BY_ID"
					value="update resourcess set COD =?,value=?,companyID=? where id= ?" />

				<entry key="SELECT_resourcess_BY_ID"
					value="select * from resourcess where id=?" />
				<entry key="SELECT_CONTENT_BY_companyID"
					value="select c.id as ID,c.COMPANYID as COMPANYID,c.TEMPLATE as TEMPLATE,cd.CONTENTTEXT as CONTENTTEXT,cd.URL as CONTENTURL,
					img.DESCRIPTION as DESCRIPTION,img.IMAGEPATH as IMAGEPATH,img.URL as IMAGEURL,img.ID as IGIMAGEID 
					from content c left join CONTENTIMAGES ci on ci.contentid = c.id
					left join IGIMAGE img on img.id=ci.IMAGEID
					inner join contentdetail cd on cd.id = c.detailtextid 
					where COMPANYID=? order by c.id" />
				<entry key="SELECT_CONTENT_For_Login_Page"
					value="select c.id as ID,c.COMPANYID as COMPANYID,c.TEMPLATE as TEMPLATE,cd.CONTENTTEXT as CONTENTTEXT,cd.URL as CONTENTURL,
					img.DESCRIPTION as DESCRIPTION,img.IMAGEPATH as IMAGEPATH,img.URL as IMAGEURL,img.ID as IGIMAGEID 
					from content c left join CONTENTIMAGES ci on ci.contentid = c.id
					left join IGIMAGE img on img.id=ci.IMAGEID
					inner join contentdetail cd on cd.id = c.detailtextid 
					where POSITION=1 order by c.id" />
				<entry key="SELECT_DISTINCT_CONTENT_HEADER"
					value="select distinct TEMPLATE from content except select TEMPLATE from content where COMPANYID=?" />


				<entry key="SELECT_resourcess_BY_enterpriseID"
					value="select r.cod,r.value,r.companyID from resourcess r,enterprise e where r.companyID=e.COMPANYID and e.id= ?" />

				<entry key="SELECT_User_ONLY_BY_EmailID"
					value="SELECT * FROM [user] u inner join CONTACT c on u.mainContactId 
					= c.ID where c.EMAIL =? AND c.ISDELETED=0 AND u.ISDELETED=0 and u.user_status=1" />

				<entry key="SEARCH_User_By_Emailid"
					value="SELECT u.*,  CASE WHEN e.ID IS NOT NULL THEN 'Employee'
													WHEN cu.ID IS NOT NULL AND (c.SALESPROMOTER IS NULL OR  c.SALESPROMOTER = 0) THEN 'Customer'
													When cu.ID IS NOT NULL AND c.SALESPROMOTER = 1 THEN 'SalesPromoter'
												END userType 
										FROM [USER] u
										inner join CONTACT ct on u.mainContactId = ct.ID 
										LEFT Join  EMPLOYEE e ON e.ID = u.user_id
										Left Join CUSTOMERUSER cu ON cu.ID = u.user_id
										Left Join CUSTOMER c ON c.ID = cu.CUSTOMERID
										where u.user_status=1 and ct.ISDELETED=0 AND u.ISDELETED=0 and ( ct.EMAIL is not null and ct.EMAIL=?)
                                        " />

				<entry key="SEARCH_User_By_LoginId"
					value="select * from [user] where loginId=?" />
				<entry key="SELECT_loginIDs_ONLY_BY_LOGINID"
					value="select loginId from [user] where loginId like ?" />

				<!-- for staging tables -->

				<entry key="SELECT_ALL_CUSTOMER_MASTER_STG"
					value="select * from CUSTOMER_MASTER_STG  with (NOLOCK) where IS_PROCESSED is Null Or IS_PROCESSED=0 " />
				<entry key="SELECT_CUSTOMER_SALESGROUP_STG_BY_CODE"
					value="select * from CUSTOMER_SALESGROUP_STG with (NOLOCK) where SOLD_TO_SAP_CODE=?  
					AND ( IS_PROCESSED is Null Or IS_PROCESSED=0 ) 
					AND (NOT convert(datetime,FROM_DATE,104)>GETDATE() )
					And convert(datetime,TO_DATE,104)>=GETDATE()" />
				<entry key="SELECT_ALL_CUSTOMER_SALESGROUP_STG"
					value="select * from CUSTOMER_SALESGROUP_STG with (NOLOCK) where   
					 ( IS_PROCESSED is Null Or IS_PROCESSED=0 ) 
					AND (NOT convert(datetime,FROM_DATE,104)>GETDATE() )" />



				<entry key="SELECT_ALL_SALESGROUP_PLANT_STG"
					value="select * from SALESGROUP_PLANT_STG with (NOLOCK) where IS_PROCESSED is Null Or IS_PROCESSED=0 " />
				<entry key="GET_COMPANY_BY_SALES_GROUP_ID"
					value="select c.* from COMPANY c,ENTERPRISE e,SALESORGANISATION s where c.id=e.COMPANYID and e.id=s.ENTERPRISEID and s.ID=?" />
				<entry key="GET_COMPANY_BY_SALES_OFFICE_ID"
					value="select c.* from COMPANY c,ENTERPRISE e,SALESOFFICE s ,SALESUNIT su,SALESREGION sr where c.id=e.COMPANYID and e.ID=sr.ENTERPRISEID and sr.ID=su.SALESREGIONID and su.id=s.SALESUNITID and s.ID=?" />

				<entry key="GET_COMPANY_BY_Enterprise_ID"
					value="select c.* from COMPANY c,ENTERPRISE ewhere c.id=e.COMPANYID and e.ID=?" />
				<entry key="GET_COMPANY_BY_CRED_REP_GRP_CODE"
					value="select c.* from COMPANY c,CREDIT_REP_GROUP crg where c.id=crg.COMPANY_ID and crg.code=?" />
				<entry key="GET_COMPANY_BY_CUSTOMER_ID"
					value="select c.* from COMPANY c,CREDIT_REP_GROUP crg ,CUSTOMER_REP_GROUP_MAPPING cgm where c.id=crg.COMPANY_ID and cgm.CREDIT_REP_GROUP_ID=crg.ID and cgm.CUSTOMER_ID=?" />
				<entry key="GET_All_COMPANY" value="select c.* from COMPANY c" />

				<entry key="GET_COMPANY_BY_SALES_ORG_CODE"
					value="select c.* from COMPANY c,ENTERPRISE e,SALESORGANISATION s where c.id=e.COMPANYID and e.id=s.ENTERPRISEID and s.CODE=?" />
				<entry key="SELECT_SALESGROUP_PLANT_STG_FOR_OFC_ORG_GRP"
					value="select * from SALESGROUP_PLANT_STG where SALES_OFFICE_CODE=? and SALES_ORG_CODE=? and SALES_GROUP_CODE=? and (IS_PROCESSED is Null Or IS_PROCESSED=0)" />
				<entry key="SELECT_SALES_UNIT_BY_OFFICE_CODE"
					value="  select s.* from SALESUNIT s,SALESOFFICE o where o.SALESUNITID=s.ID and o.CODE=? " />

				<entry key="INSERT_CUSTOMER_SAELSOFFICE_PLANT_MAPPING"
					value="INSERT INTO CUSTOMER_SALESOFFICE_PLANT_MAPPING (CUSTOMER_CODE,SALES_OFFICE_CODE,SALES_ORG_CODE,SALES_GROUP_CODE,PLANT_CODE,IS_DELETE) VALUES(?,?,?,?,?,?)" />
				<entry key="INSERT_CUSTOMER_Rep_Group_MAPPING"
					value="INSERT INTO CUSTOMER_REP_GROUP_MAPPING(CUSTOMER_ID,CREDIT_REP_GROUP_ID,CUSTOMER_CREDIT_GROUP_ID) VALUES(?,?,?)" />
				<entry key="UPDATE_CUSTOMER_Rep_Group_MAPPING"
					value="UPDATE CUSTOMER_REP_GROUP_MAPPING set CREDIT_REP_GROUP_ID=?,CUSTOMER_CREDIT_GROUP_ID=? where  CUSTOMER_ID=?" />

				<entry key="UPDATE_CUSTOMER_MASTER_STG_IS_PROCESSED"
					value="update CUSTOMER_MASTER_STG set IS_PROCESSED=?,STATUS_COMMENT=? where ID=?" />

				<entry key="UPDATE_SALES_GRP_PLANT_STG_IS_PROCESSED"
					value="update SALESGROUP_PLANT_STG set IS_PROCESSED=? where ID=?" />

				<entry key="UPDATE_CUSTOMER_SALES_GRP_STG_IS_PROCESSED"
					value="update CUSTOMER_SALESGROUP_STG set IS_PROCESSED=? where ID=?" />
				<entry key="UPDATE_CUSTOMER_SAELSOFFICE_PLANT_MAPPING"
					value="update CUSTOMER_SALESOFFICE_PLANT_MAPPING set IS_DELETE=? where CUSTOMER_CODE=? AND SALES_OFFICE_CODE=? AND SALES_ORG_CODE=? and SALES_GROUP_CODE=? and PLANT_CODE=? " />

				<!-- credit rep group -->
				<entry key="SELECT_mapped_CrdRepGrp_by_employee_id"
					value="select * from CREDIT_REP_GROUP with (NOLOCK) where id in (select CREDIT_REP_GROUP_ID from EMP_CRD_REP_GRP_MPG with (NOLOCK) where EMPLOYEE_ID=?) " />
				<entry key="SELECT_unmapped_CrdRepGrp_by_employee_id"
					value="select * from CREDIT_REP_GROUP  crp with (NOLOCK)  where crp.ID not in (select CREDIT_REP_GROUP_ID from EMP_CRD_REP_GRP_MPG with (NOLOCK) where EMPLOYEE_ID=?)" />

				<entry key="SELECT_emp_CrdRepGrp_by_employee_id"
					value="select EMPLOYEE_ID as empId, CREDIT_REP_GROUP_ID as crdRepGrpId from EMP_CRD_REP_GRP_MPG with (NOLOCK) where EMPLOYEE_ID=? " />
				<entry key="DELETE_emp_CrdRepGrp"
					value="DELETE from EMP_CRD_REP_GRP_MPG where EMPLOYEE_ID=?  and CREDIT_REP_GROUP_ID=? " />
				<entry key="INSERT_emp_CrdRepGrp"
					value="INSERT INTO EMP_CRD_REP_GRP_MPG (EMPLOYEE_ID, CREDIT_REP_GROUP_ID)VALUES(?, ?) " />
				<entry key="GET_CUSTOMER_ID_BY_CODE"
					value="SELECT ID from CUSTOMER with (NOLOCK) where CODE=?" />
				<entry key="GET_CREDIT_REP_GROUP_ID_BY_CODE"
					value="SELECT ID from CREDIT_REP_GROUP with (NOLOCK) where CODE=?" />
				<entry key="GET_CUSTOMER_CREDIT_GROUP_ID_BY_CODE"
					value="SELECT ID from CUST_CREDIT_GRP with (NOLOCK) where CODE=?" />
				<entry key="GET_CUSTOMER_SALESOFFICE_PLANT_MAPPING"
					value="select * from  CUSTOMER_SALESOFFICE_PLANT_MAPPING with (NOLOCK) where CUSTOMER_CODE=? AND SALES_OFFICE_CODE=? AND SALES_ORG_CODE=? and SALES_GROUP_CODE=? and PLANT_CODE=? and IS_DELETE=?" />
				<entry key="GET_All_CUSTOMER_SALESOFFICE_PLANT_MAPPING"
					value="select * from  CUSTOMER_SALESOFFICE_PLANT_MAPPING with (NOLOCK) where CUSTOMER_CODE=? AND SALES_OFFICE_CODE=? AND SALES_ORG_CODE=? and SALES_GROUP_CODE=? and PLANT_CODE=?" />
				<entry key="GET_CUSTOMER_REP_GROUP_MAPPING"
					value="select * from  CUSTOMER_REP_GROUP_MAPPING with (NOLOCK) where CUSTOMER_ID=?" />
				<entry key="GET_CUSTOMER_USER_MAPPING"
					value="select * from  CUSTOMERUSER with (NOLOCK) where CUSTOMERID=?" />
				<entry key="Search_Customer_For_User_Register"
					value="select t1.ID as ID,t1.CODE as Code,t1.CUSTOMERNAME as CUSTOMERNAME,t1.ACCESSPORTAL as ACCESSPORTAL,t1.SALESPROMOTER as SALESPROMOTER ,
					  t1.companyName as companyName,t2.OwnerCount as OwnerCount from (select c.ID as ID,c.CODE as Code,c.CUSTOMERNAME as CUSTOMERNAME,c.ACCESSPORTAL as ACCESSPORTAL,c.SALESPROMOTER as SALESPROMOTER ,
					  crg.DESCRIPTION as companyName
					  from customer c
					   inner join CUSTOMER_REP_GROUP_MAPPING crgm on c.id=crgm.CUSTOMER_ID inner join CREDIT_REP_GROUP crg on crgm.CREDIT_REP_GROUP_ID=crg.ID 
					   where c.ISDELETED=0 and c.ACCESSPORTAL=1 and c.code=?) as t1 , (select count(*) as OwnerCount  from customer c left join CUSTOMERUSER cu on c.ID=cu.CUSTOMERID 
					   left join  [user] u on cu.id=u.user_id
					   left join CONTACT cd on cd.id=u.mainContactId left join user_role ur on ur.user_id=u.user_id where u.ISDELETED=0 and ur.role_id=5 and c.code=? and cd.email is not null and  cd.email!='') as t2
					" />

				<entry key="INSERT_ContactUsDetails"
					value="INSERT INTO contactUsDetails (email,mobile,shortDescription,description,creationDate,name,applicationStatus,category) VALUES (?,?,?,?,?,?,?,?)" />
				<entry key="SELECT_ALL_ContactUsDetails"
					value="select * from  contactUsDetails" />
				<entry key="SEARCH_ContactUsDetails"
					value="select cud.email as email,cud.mobile as mobile,cud.shortDescription as shortDescription,cud.description as description,cud.id as id,cud.creationDate as creationDate,
					cud.name as name,cud.updatedDate as updatedDate,u.loginId as updatedBy,cud.applicationStatus as applicationStatus,cud.category as category from  contactUsDetails cud left outer join [user] u on u.user_id= ISNULL(cud.updatedBy,'')
						where 1=1" />
				<entry key="Update_ContactUsDetails"
					value="update contactUsDetails set email=?,mobile=?,shortDescription=?,description=?,name=?,applicationStatus=?,modifierComment=?,updatedDate=?,updatedBy=? where id=?" />

				<entry key="Create_Oredr_For_Quotation"
					value="
					INSERT INTO PlaceQuotationOrder(quotationId,quotationName,loggedInUserId,loggedInUserName,customerId,customerCode,remark,material_Id,material,materialDescription,quantity,requiredDate,creationDate,uom,status,isDeleted,pouringMethod,testingRequired,testingNotes,loadSizes,deliveryAddressDetails,truckSpacing,siteContactName,siteContactPhoneNumber,orderSetDeliveryDateTime,customerName,timePreference1,timePreference2,timePreference3) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);" />

				<entry key="UPDATE_Oredr_For_Quotation"
					value="UPDATE PlaceQuotationOrder SET remark =?,[quantity] =?,[requiredDate] =?,[status] = ?,[updatedBy] = ?,[updatedDate] =?,[updatedByEmployee] = ?,[updatedByEmployeeDate] = ?,[employeeComment] = ?,[isDeleted] =?,[commandOrderId]=?,[pouringMethod]=?,[testingRequired]=?,[testingNotes]=?,[loadSizes]=?,[deliveryAddressDetails]=?,[truckSpacing]=?,[siteContactName]=?,[siteContactPhoneNumber]=?,[orderSetDeliveryDateTime]=?,[timePreference1]=?,[timePreference2]=?,[timePreference3]=?,[orderSetDeliveryTime]=? WHERE id=? " />


				<entry key="GET_Quotation_Oredr"
					value="Select * from  PlaceQuotationOrder Where 1=1" />

				<!-- DELIVERY NOTIFICATION QUERYS -->
				<entry key="INSERT_DELIVERY_NOTIFICATION"
					value="INSERT INTO [dbo].[DeliveryNotification]([UserID],[DeliveryNumber],[DeliveryArrived],[DeliveryCancled],[DeliveryInTransist],[DeliveryIn5],[DeliveryIn10],[DeliveryIn15],[DeliveryIn60],[deliveryIn120],[DeliveryOnhold],[deliveryReachedBy])VALUES(?,?,?,?,?,?,?,?,?,?,?,?)" />

				<entry key="UPDATE_DELIVERY_NOTIFICATION"
					value="UPDATE [dbo].[DeliveryNotification] set [DeliveryArrived]=?,[DeliveryCancled]=?,[DeliveryInTransist]=?,[DeliveryIn5]=?,[DeliveryIn10]=?,[DeliveryIn15]=?,[DeliveryIn60]=?,[deliveryIn120]=?,[DeliveryOnhold]=?,[deliveryReachedBy]=? where ID=?" />


				<entry key="GET_DELIVERY_NOTIFICATION_BY_ID"
					value="select * from [dbo].[DeliveryNotification] where ID=?" />


				<entry key="GET_DELIVERY_NOTIFICATION_BY_USERID_DEL"
					value="select * from [dbo].[DeliveryNotification] where UserID=? and DeliveryNumber=?" />

				<entry key="DELETE_DELIVERY_NOTIFICATION"
					value="delete from table [dbo].[DeliveryNotification] where ID=?" />
				<entry key="ALL_DELIVERY_IN_5"
					value='select * from [dbo].[DeliveryNotification] where DeliveryIn5=1 and deliveryReachedBy BETWEEN  DATEADD(MINUTE,0,GETDATE()) and  DATEADD(MINUTE,6,GETDATE())' />
				<entry key="ALL_DELIVERY_IN_10"
					value="select * from [dbo].[DeliveryNotification] where deliveryIn10=1 and deliveryReachedBy BETWEEN  DATEADD(MINUTE,9,GETDATE()) and  DATEADD(MINUTE,10,GETDATE())" />
				<entry key="ALL_DELIVERY_IN_15"
					value="select * from [dbo].[DeliveryNotification] where deliveryIn15=1 and deliveryReachedBy BETWEEN  DATEADD(MINUTE,14,GETDATE()) and  DATEADD(MINUTE,16,GETDATE())" />
				<entry key="ALL_DELIVERY_IN_60"
					value="select * from [dbo].[DeliveryNotification] where deliveryIn60=1 and deliveryReachedBy BETWEEN  DATEADD(MINUTE,59,GETDATE()) and  DATEADD(MINUTE,61,GETDATE())" />
				<entry key="ALL_DELIVERY_IN_120"
					value="select * from [dbo].[DeliveryNotification] where deliveryIn120=1 and deliveryReachedBy BETWEEN  DATEADD(MINUTE,119,GETDATE()) and  DATEADD(MINUTE,121,GETDATE())" />
					
				<entry key="GET_EPOD_FIELDS"
					value="select EPOD_FIELD_NAME epodFieldName, DESCRIPTION fieldDescription FROM EPOD_DELIVERY_FIELDS edf where CUSTOMER_REPORT='Y'
                           and EPOD_FIELD_NAME not in (select splitdata from dbo.fnSplitString(
                           (select field_ids from EPOD_FIELDS_FAVOURITE where user_id=?),','))" />	
                           
                 <!-- <entry key="GET_EPOD_FIELDS_FAVOURITES"
					value="select EPOD_FIELD_NAME epodFieldName, DESCRIPTION fieldDescription FROM EPOD_DELIVERY_FIELDS edf where CUSTOMER_REPORT='Y'
                           and EPOD_FIELD_NAME in (select splitdata from dbo.fnSplitString(
                           (select field_ids from EPOD_FIELDS_FAVOURITE where user_id=?),','))" /> -->	
                   <entry key="GET_EPOD_FIELDS_FAVOURITES"
					value= "select field_ids epodFieldName, FIELD_DESC fieldDescription from EPOD_FIELDS_FAVOURITE where user_id=?" />        
                           
			   <entry key="GET_RECORD_BY_USERID"
					value="select FIELD_IDS fieldIds,USER_ID userId from EPOD_FIELDS_FAVOURITE
					 where USER_ID=?" />
		      <entry key="INSERT_FAVOURITE_FIELDS"
					value="INSERT INTO EPOD_FIELDS_FAVOURITE (FIELD_IDS,USER_ID,FIELD_DESC,FILE_NAME) VALUES (?,?,?,NULL)" />
			 <entry key="UPDATE_FAVOURITE_FIELDS"
					value="UPDATE EPOD_FIELDS_FAVOURITE SET FIELD_IDS=? , FIELD_DESC=? , FILE_NAME=NULL  WHERE  USER_ID = ?" />

             <entry key="UPDATE_FILE_NAME"
					value="UPDATE EPOD_FIELDS_FAVOURITE SET FILE_NAME=? WHERE  USER_ID = ?" />
					
			 <entry key="GET_FILE_NAME"
					value="SELECT FILE_NAME FROM EPOD_FIELDS_FAVOURITE WHERE  USER_ID = ?" />


				<!-- Code ends here -->

			</map>
		</constructor-arg>
	</bean>
</beans>
